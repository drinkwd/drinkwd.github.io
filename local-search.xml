<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>每周一推NPM包-第五弹</title>
    <link href="/2023/04/04/%E6%AF%8F%E5%91%A8%E4%B8%80%E6%8E%A8%EF%BC%88npm%E5%8C%85%EF%BC%89-%E7%AC%AC%E4%BA%94%E5%BC%B9/"/>
    <url>/2023/04/04/%E6%AF%8F%E5%91%A8%E4%B8%80%E6%8E%A8%EF%BC%88npm%E5%8C%85%EF%BC%89-%E7%AC%AC%E4%BA%94%E5%BC%B9/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>为了不让自己的空余时间都浪费掉，打算做一个每周一推的专栏，盘点一些好的插件，分享给大家</strong>🎈。</p><h2 id="NProgress"><a href="#NProgress" class="headerlink" title="NProgress"></a><a href="https://www.npmjs.com/package/nprogress">NProgress</a></h2><p>大家在查看<code>vue-element-admin</code>或者某些相关文档的时候部分网站都会有浏览器加载进度条，接下来我们就用插件来实现它。👇</p><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><ul><li><p>安装</p><figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada">npm install <span class="hljs-comment">--save nprogress</span><br></code></pre></div></td></tr></table></figure></li><li><p>引用</p><figure class="highlight clean"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> NProgress <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;nprogress&#x27;</span> <span class="hljs-comment">// Progress 进度条</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;nprogress/nprogress.css&#x27;</span> <span class="hljs-comment">// Progress 进度条样式</span><br></code></pre></div></td></tr></table></figure></li><li><p>全局引用配置</p></li><li><p>main.js</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//引入nprogress 进度条插件</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">NProgress</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;nprogress&#x27;</span><br><span class="hljs-comment">// 简单配置  进度条,可以不配置：在axios中我们不再做配置，以用来区分。</span><br><span class="hljs-title class_">NProgress</span>.<span class="hljs-title function_">configure</span>(&#123; <span class="hljs-attr">minimum</span>: <span class="hljs-number">0.01</span> &#125;);<br><span class="hljs-title class_">NProgress</span>.<span class="hljs-title function_">configure</span>(&#123; <span class="hljs-attr">easing</span>: <span class="hljs-string">&#x27;ease&#x27;</span>, <span class="hljs-attr">speed</span>: <span class="hljs-number">500</span>, <span class="hljs-attr">showSpinner</span>: <span class="hljs-literal">false</span> &#125;)<br></code></pre></div></td></tr></table></figure><h4 id="API"><a href="#API" class="headerlink" title="API"></a>API</h4></li><li><p>只需调用start()和done()即可控制进度条。</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">NProgress</span>.</span></span>start<span class="hljs-literal">()</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">NProgress</span>.</span></span><span class="hljs-keyword">done</span><span class="hljs-literal">()</span>;<br></code></pre></div></td></tr></table></figure></li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/351d5f375f05409b81537402682d9bc5~tplv-k3u1fbpfcp-zoom-1.image"></p><ul><li>百分比：要设置进度百分比，请调用.set(n)，其中n是介于0-1之间的数字。</li></ul><figure class="highlight jboss-cli"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jboss-cli">NProgress.<span class="hljs-keyword">set</span><span class="hljs-params">(0.0)</span>;     <span class="hljs-string">//</span> <span class="hljs-string">.start</span><span class="hljs-params">()</span>相似<br>NProgress.<span class="hljs-keyword">set</span><span class="hljs-params">(0.4)</span>;<br>NProgress.<span class="hljs-keyword">set</span><span class="hljs-params">(1.0)</span>;     <span class="hljs-string">//</span> <span class="hljs-string">.done</span><span class="hljs-params">()</span>相似<br></code></pre></div></td></tr></table></figure><ul><li>递增：只需使用.inc() 这会以随机数量增加它。这永远不会达到 100%：<figure class="highlight abnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs abnf">NProgress.inc()<span class="hljs-comment">;</span><br></code></pre></div></td></tr></table></figure></li><li>设置启动值最小值默认<code>0.08</code>最大<code>1</code><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">NProgress</span>.configure(&#123; minimum: <span class="hljs-number">0</span>.<span class="hljs-number">8</span> &#125;);<br></code></pre></div></td></tr></table></figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8c902df2aef543aaa3cc33d8a3a47500~tplv-k3u1fbpfcp-zoom-1.image"></li><li>设置使用缓动（CSS 缓动字符串）和速度（以毫秒为单位）调整动画设置。（默认值：ease和200）<figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">NProgress.<span class="hljs-title function_ invoke__">configure</span>(&#123; <span class="hljs-attr">easing</span>: <span class="hljs-string">&#x27;ease&#x27;</span>, <span class="hljs-attr">speed</span>: <span class="hljs-number">600</span> &#125;);<br></code></pre></div></td></tr></table></figure></li><li>修改加载条的颜色（只需要全局替换对应的#29d就可以修改相关样式）</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e414e723eae444658232a782a2819079~tplv-k3u1fbpfcp-zoom-1.image"></p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>可以配合请求的拦截器,或者路由的拦截器一起使用,加载<code>loading</code>。</p><h3 id="在请求中使用"><a href="#在请求中使用" class="headerlink" title="在请求中使用"></a>在请求中使用</h3><ul><li>api.js<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><span class="hljs-comment">//引入nprogress 进度条插件</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">NProgress</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;nprogress&#x27;</span><br><br><span class="hljs-comment">// 创建axios实例</span><br><span class="hljs-keyword">const</span> service = axios.<span class="hljs-title function_">create</span>(&#123;<br>    <span class="hljs-attr">baseURL</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">VUE_APP_BASE_API</span>, <span class="hljs-comment">//URL地址   环境变量文件</span><br>    <span class="hljs-attr">timeout</span>: <span class="hljs-number">5000</span> ,<span class="hljs-comment">//超时</span><br>&#125;)<br><br><span class="hljs-comment">// 请求拦截器</span><br>service.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<br>    <span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 开启进度条</span><br><span class="hljs-title class_">NProgress</span>.<span class="hljs-title function_">start</span>();<br>        <span class="hljs-keyword">return</span> config<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error)<br>    &#125;<br>)<br><br><span class="hljs-comment">// 响应拦截器</span><br>service.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<br>    <span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span>&#123;<br>        <span class="hljs-comment">// 关闭进度条</span><br>        <span class="hljs-title class_">NProgress</span>.<span class="hljs-title function_">done</span>()<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(response)<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>        <span class="hljs-comment">// 关闭进度条</span><br>        <span class="hljs-title class_">NProgress</span>.<span class="hljs-title function_">done</span>()<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error)<br>    &#125;<br>)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> service;<br></code></pre></div></td></tr></table></figure><h3 id="在路由切换中使用"><a href="#在路由切换中使用" class="headerlink" title="在路由切换中使用"></a>在路由切换中使用</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueRouter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">NProgress</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;nprogress&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">VueRouter</span>);<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> constRouter = [<br>    &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/login&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;@/views/login/Login&#x27;</span>),<br>    &#125;,<br>]<br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;history&#x27;</span>,<br>    <span class="hljs-attr">base</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">BASE_URL</span>,<br>    <span class="hljs-attr">routes</span>: constRouter<br>&#125;)<br><span class="hljs-comment">// 页面路由刚开始切换的时候</span><br>router.<span class="hljs-title function_">beforeEach</span>(<span class="hljs-keyword">async</span> (to,<span class="hljs-keyword">from</span>,next) =&gt; &#123;<br>    <span class="hljs-comment">// 开启进度条</span><br>    <span class="hljs-title class_">NProgress</span>.<span class="hljs-title function_">start</span>();<br>&#125;)<br><span class="hljs-comment">// 页面路由切换完毕的时候</span><br>router.<span class="hljs-title function_">afterEach</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 关闭进度条</span><br>    <span class="hljs-title class_">NProgress</span>.<span class="hljs-title function_">done</span>()<br>&#125;)<br>​<br>​<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></div></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2></li></ul><p><code>NProgress</code>的使用特别简单，希望大家可以根据需求合理的使用，且不要贪杯哦🎈。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NPM</tag>
      
      <tag>VUE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每周一推NPM包-第四弹</title>
    <link href="/2023/03/10/%E6%AF%8F%E5%91%A8%E4%B8%80%E6%8E%A8%EF%BC%88npm%E5%8C%85%EF%BC%89-%E7%AC%AC%E5%9B%9B%E5%BC%B9/"/>
    <url>/2023/03/10/%E6%AF%8F%E5%91%A8%E4%B8%80%E6%8E%A8%EF%BC%88npm%E5%8C%85%EF%BC%89-%E7%AC%AC%E5%9B%9B%E5%BC%B9/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>为了不让自己的空余时间都浪费掉，打算做一个每周一推的专栏，盘点一些好的插件，分享给大家，每次分享前会先发到自己的博客，可以在<a href="https://drinkwd.github.io/">博客</a>中抢先看哦</strong>🎈。</p><h2 id="v-viewer"><a href="#v-viewer" class="headerlink" title="v-viewer"></a><a href="http://mirari.cc/v-viewer/">v-viewer</a></h2><p>我们在做后台项目的时候会涉及到图片的放大🖼，已经有很多成熟的组件提供了这些功能比如<code>element-ui</code>下的<code>image</code>组件,但是如果我们需要单独使用图片放大的功能🎡，还需要安装<code>element-ui</code>就有些<strong>小题大作</strong>了，🎭还有的同学使用<code>dialog</code>的方式来放大的图片这种只能实现单纯的放大图片🎨，但是无法实现图片翻转，缩小等等功能，于是就需要使用<code>v-viewer</code>来实现🥽。</p><blockquote><p>这款组件支持Vue图片浏览组件<code>v-viewer</code>，支持旋转、缩放、翻转等操作，用法也非常简单🎈。</p></blockquote><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><ul><li>安装<figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> v-viewer<br></code></pre></div></td></tr></table></figure></li><li>用法<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// main.js</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;viewerjs/dist/viewer.css&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueViewer</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;v-viewer&#x27;</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">VueViewer</span>)<br></code></pre></div></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"> <span class="hljs-comment">&lt;!-- template --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 指令方式放大图片 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;images&quot;</span> <span class="hljs-attr">v-viewer</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;src in images&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;src&quot;</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;src&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 组件方式放大图片 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">viewer</span> <span class="hljs-attr">:images</span>=<span class="hljs-string">&quot;images&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;src in images&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;src&quot;</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;src&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">viewer</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 通过api的方式放大图片 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;show&quot;</span>&gt;</span>Click to show<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">images</span>: [</span><br><span class="language-javascript">          <span class="hljs-string">&quot;https://picsum.photos/200/200&quot;</span>,</span><br><span class="language-javascript">          <span class="hljs-string">&quot;https://picsum.photos/300/200&quot;</span>,</span><br><span class="language-javascript">          <span class="hljs-string">&quot;https://picsum.photos/250/200&quot;</span></span><br><span class="language-javascript">        ]</span><br><span class="language-javascript">      &#125;;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">show</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.$viewerApi(&#123;</span><br><span class="language-javascript">          <span class="hljs-attr">images</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">images</span>,</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="小tips"><a href="#小tips" class="headerlink" title="小tips"></a>小tips</h4><blockquote><p>通过这个网站可以设置随机图<a href="https://picsum.photos/">picsum</a>满足我们写<code>demo</code>的需要🎈。</p></blockquote></li></ul><p>这样就通过三种方式实现了图片的放大具体的效果如下🎉。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9271854d05d84bdfb802f6f351ff04aa~tplv-k3u1fbpfcp-zoom-1.image"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/208491267771490195bf96c4ed38ae93~tplv-k3u1fbpfcp-zoom-1.image"></p><h4 id="指令方式-绑定option"><a href="#指令方式-绑定option" class="headerlink" title="指令方式[绑定option]"></a>指令方式[绑定option]</h4><ul><li><code>inline</code><blockquote><ul><li>默认值：<code>false</code></li><li> true：默认放大并且在图片内部展示，false: 需要手动点击方法在图片外部展示</li></ul></blockquote></li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a7ec841b3f4f43499427219c9862ce41~tplv-k3u1fbpfcp-zoom-1.image"></p><center>inline->false</center><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fb814b9c74c64687980f2b6910476634~tplv-k3u1fbpfcp-zoom-1.image"></p><center>inline->true</center><ul><li><code>button</code><blockquote><ul><li>默认值：<code>true</code></li><li>是否展示右上角关闭按钮</li></ul></blockquote></li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3ea4c8ff906640e4b08ca84b6b1be19a~tplv-k3u1fbpfcp-zoom-1.image"></p><center>button->false</center><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9479164628fc43dbab912f0a5b2ecf09~tplv-k3u1fbpfcp-zoom-1.image"></p><center>button->true</center><ul><li><code>navbar</code><blockquote><ul><li>默认值：<code>true</code></li><li>是否展示下方导航</li></ul></blockquote></li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9453195d4be24a4c84dca0ff80f79be3~tplv-k3u1fbpfcp-zoom-1.image"></p><center>navbar->true</center><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7de3a441bf7c46c18a34e858139c4b31~tplv-k3u1fbpfcp-zoom-1.image"></p><center>navbar->false</center><ul><li><code>title</code><blockquote><ul><li> 默认值:<code>true</code></li><li>是否在下方显示图片alt信息</li></ul></blockquote></li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/980a86a7129b4035a737c21e5470345e~tplv-k3u1fbpfcp-zoom-1.image"></p><ul><li><code>toolbar</code><blockquote><ul><li>默认：<code>true</code></li><li>是否展示下方工具栏</li></ul></blockquote></li><li><code>movable</code><blockquote><ul><li>默认：<code>true</code></li><li>放大图片是否可移动</li></ul></blockquote></li><li><code>zoomable</code><blockquote><ul><li>默认值：<code>true</code></li><li>是否可放大缩小图片</li></ul></blockquote></li><li><code>tooltip</code><blockquote><ul><li>默认值：<code>true</code></li><li>放大过程中是否展示放大比例</li></ul></blockquote></li><li><code>rotatable</code><blockquote><ul><li>默认值：<code>true</code></li><li>是否有旋转功能</li></ul></blockquote></li><li><code>scalable</code><blockquote><ul><li>默认值：<code>true</code></li><li>是否有放大缩小功能</li></ul></blockquote></li><li><code>fullscreen</code><blockquote><ul><li>默认值：<code>true</code></li><li>是否有全屏功能</li></ul></blockquote></li><li><code>transition</code><blockquote><ul><li>默认值：<code>true</code></li><li>图片放大的过程中是否有放大效果 </li></ul></blockquote></li><li><code>keyboard</code><blockquote><ul><li>默认值：<code>true</code></li><li>是否支持键盘上下左右剪头操作</li></ul></blockquote></li></ul><h3 id="拿一个举例"><a href="#拿一个举例" class="headerlink" title="拿一个举例"></a>拿一个举例</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;images&quot;</span> <span class="hljs-attr">v-viewer</span>=<span class="hljs-string">&quot;&#123;inline:false&#125;&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;src in images&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;src&quot;</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;src&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;我是img的alt属性&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="组件方式"><a href="#组件方式" class="headerlink" title="组件方式"></a>组件方式</h3><blockquote><p>组件方式中的<code>option</code>与指令方式的<code>option</code>是相同的属性,可以在<code>option</code>中动态配置。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">viewer</span> <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;options&quot;</span> <span class="hljs-attr">:images</span>=<span class="hljs-string">&quot;images&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;src in images&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;src&quot;</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;src&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">viewer</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">images</span>: [</span><br><span class="language-javascript">          <span class="hljs-string">&quot;https://picsum.photos/200/200&quot;</span>,</span><br><span class="language-javascript">          <span class="hljs-string">&quot;https://picsum.photos/300/200&quot;</span>,</span><br><span class="language-javascript">          <span class="hljs-string">&quot;https://picsum.photos/250/200&quot;</span></span><br><span class="language-javascript">        ],</span><br><span class="language-javascript">        <span class="hljs-attr">options</span>:&#123;</span><br><span class="language-javascript">          <span class="hljs-attr">inline</span>: <span class="hljs-literal">true</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="api方式（该方式不太常用）"><a href="#api方式（该方式不太常用）" class="headerlink" title="api方式（该方式不太常用）"></a>api方式（该方式不太常用）</h4><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;button&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;previewURL&quot;</span>&gt;</span>URL Array<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;button&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;previewImgObject&quot;</span>&gt;</span>Img-Object Array<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">import</span> &#123; api <span class="hljs-keyword">as</span> viewerApi &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;v-viewer&quot;</span></span><br><span class="language-javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">sourceImageURLs</span>: [</span><br><span class="language-javascript">        <span class="hljs-string">&#x27;https://picsum.photos/200/200?random=1&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-string">&#x27;https://picsum.photos/200/200?random=2&#x27;</span>,</span><br><span class="language-javascript">      ],</span><br><span class="language-javascript">      <span class="hljs-attr">sourceImageObjects</span>: [</span><br><span class="language-javascript">        &#123;</span><br><span class="language-javascript">          <span class="hljs-string">&#x27;src&#x27;</span>:<span class="hljs-string">&#x27;https://picsum.photos/200/200?random=3&#x27;</span>,</span><br><span class="language-javascript">          <span class="hljs-string">&#x27;data-source&#x27;</span>:<span class="hljs-string">&#x27;https://picsum.photos/800/800?random=3&#x27;</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        &#123;</span><br><span class="language-javascript">          <span class="hljs-string">&#x27;src&#x27;</span>:<span class="hljs-string">&#x27;https://picsum.photos/200/200?random=4&#x27;</span>,</span><br><span class="language-javascript">          <span class="hljs-string">&#x27;data-source&#x27;</span>:<span class="hljs-string">&#x27;https://picsum.photos/800/800?random=4&#x27;</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      ]</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">      previewURL () &#123;</span><br><span class="language-javascript">          <span class="hljs-comment">// 如果使用`app.use`进行全局安装, 你就可以像这样直接调用`this.$viewerApi`</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> $viewer = <span class="hljs-variable language_">this</span>.$viewerApi(&#123;</span><br><span class="language-javascript">          <span class="hljs-attr">images</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">sourceImageURLs</span></span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      previewImgObject () &#123;</span><br><span class="language-javascript">          <span class="hljs-comment">// 或者你可以单独引入api然后执行它</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> $viewer = <span class="hljs-title function_">viewerApi</span>(&#123;</span><br><span class="language-javascript">          <span class="hljs-attr">options</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">toolbar</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;data-source&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">initialViewIndex</span>: <span class="hljs-number">1</span></span><br><span class="language-javascript">          &#125;,</span><br><span class="language-javascript">          <span class="hljs-attr">images</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">sourceImageObjects</span></span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="通过外部按钮操作图片"><a href="#通过外部按钮操作图片" class="headerlink" title="通过外部按钮操作图片"></a>通过外部按钮操作图片</h4><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iten&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">viewer</span> <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;options&quot;</span> <span class="hljs-attr">:images</span>=<span class="hljs-string">&quot;images&quot;</span>  @<span class="hljs-attr">inited</span>=<span class="hljs-string">&quot;inited&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;src in images&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;src&quot;</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;src&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">viewer</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;Rotate&quot;</span>&gt;</span><br>      旋转<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">images</span>: [</span><br><span class="language-javascript">        <span class="hljs-string">&quot;https://picsum.photos/200/200&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-string">&quot;https://picsum.photos/300/200&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-string">&quot;https://picsum.photos/250/200&quot;</span></span><br><span class="language-javascript">      ],</span><br><span class="language-javascript">      <span class="hljs-attr">options</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">inline</span>: <span class="hljs-literal">true</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;;</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-title class_">Rotate</span>() &#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">$viewer</span>.<span class="hljs-title function_">rotate</span>(<span class="hljs-number">90</span>)</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-title function_">inited</span>(<span class="hljs-params">viewer</span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">$viewer</span> = viewer</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><blockquote><p>更多案例可以查看<a href="http://mirari.cc/v-viewer/">v-viewer</a>点击<code>source</code>查看对应源码🤗</p></blockquote><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/502f5578656742df84ca23fce683de9f~tplv-k3u1fbpfcp-zoom-1.image"></p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><blockquote><ul><li>如果使用vue3可以使用该组件<a href="https://github.com/mirari/v-viewer/tree/v3">v-viewer-vue3</a></li></ul></blockquote><h2 id="往期NPM包"><a href="#往期NPM包" class="headerlink" title="往期NPM包"></a>往期NPM包</h2><h5 id="timeago-js"><a href="#timeago-js" class="headerlink" title="timeago.js"></a><a href="https://juejin.cn/post/7194637751516414011">timeago.js</a></h5><h5 id="vue-seamless-scroll"><a href="#vue-seamless-scroll" class="headerlink" title="vue-seamless-scroll"></a><a href="https://juejin.cn/post/7196907025099653176">vue-seamless-scroll</a></h5><h5 id="circlr"><a href="#circlr" class="headerlink" title="circlr"></a><a href="https://juejin.cn/post/7199455220802486330">circlr</a></h5><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>v-viewer</code>的功能是比较全的一款插件主要是根据图片放大的拓展，好用！🎈。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NPM</tag>
      
      <tag>VUE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每周一推NPM包-第三弹</title>
    <link href="/2023/02/13/%E6%AF%8F%E5%91%A8%E4%B8%80%E6%8E%A8%EF%BC%88npm%E5%8C%85%EF%BC%89-%E7%AC%AC%E4%B8%89%E5%BC%B9/"/>
    <url>/2023/02/13/%E6%AF%8F%E5%91%A8%E4%B8%80%E6%8E%A8%EF%BC%88npm%E5%8C%85%EF%BC%89-%E7%AC%AC%E4%B8%89%E5%BC%B9/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>为了不让自己的空余时间都浪费掉，打算做一个每周一推的专栏，盘点一些好的插件，分享给大家，每次分享前会先发到自己的博客，可以在<a href="https://drinkwd.github.io/">博客</a>中抢先看哦</strong>🎈。</p><h2 id="circlr"><a href="#circlr" class="headerlink" title="circlr"></a><a href="https://www.npmjs.com/package/circlr">circlr</a></h2><p>我们在做商城或者物品类项目的时候，避免不了要做到物品360度展示，效果类似下图👇。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7509ab8211134f8083d6c8e589f55aa3~tplv-k3u1fbpfcp-zoom-1.image"></p><p>这款组件支持自定义旋转方向，旋转速度，以及鼠标滚轮，手指触摸控制旋转等等，用法也非常简单🎈。</p><blockquote><p><a href="https://www.npmjs.com/package/circlr">circlr</a> 通过滚动、鼠标和触摸事件进行动画旋转。</p></blockquote><ul><li>水平或垂直方向</li><li>触摸事件支持</li><li>滚动支持</li><li>反向和循环旋转</li></ul><h4 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h4><p>我们在使用该组件时首先要获取到不同角度物品的照片，一般需要使用第三方的相机进行全景拍照，我们公司之前找到的厂商是<a href="http://www.risd.com.cn/html/panoramicautomaticsystem/">特爱秀</a></p><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><ul><li>安装<figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada">npm install <span class="hljs-comment">--save circlr</span><br></code></pre></div></td></tr></table></figure></li><li>用法<figure class="highlight dart"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> circlr from <span class="hljs-string">&#x27;circlr&#x27;</span>;<br> <br><span class="hljs-keyword">const</span> el = <span class="hljs-built_in">document</span>.<span class="hljs-built_in">querySelector</span>(<span class="hljs-string">&#x27;.container&#x27;</span>);<br> <br>circlr(el)<br>  .scroll(<span class="hljs-keyword">true</span>)<br>  .play()<br>  .<span class="hljs-keyword">on</span>(<span class="hljs-string">&#x27;show&#x27;</span>, n =&gt; &#123;<br> <br>  &#125;);<br></code></pre></div></td></tr></table></figure></li></ul><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><ul><li><p><strong>html</strong></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:340px&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item, index in imgList&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height:340px;width:340px !important;&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;`http://www.risd.com.cn/pro/41/imgs/imgsForweb2/$&#123;index&#125;.jpg`&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p><strong>js</strong></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&lt;script&gt;<br><span class="hljs-keyword">import</span> circlr <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;circlr&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;ImgCirclr&#x27;</span>,<br>  <span class="hljs-attr">props</span>: &#123;<br>    <span class="hljs-attr">msg</span>: <span class="hljs-title class_">String</span><br>  &#125;,<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">imgList</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">40</span>).<span class="hljs-title function_">fill</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>    &#125;<br>  &#125;,<br>  <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> el = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.container&#x27;</span>);<br>      <span class="hljs-title function_">circlr</span>(el)<br>        .<span class="hljs-title function_">scroll</span>(<span class="hljs-literal">true</span>)<br>        .<span class="hljs-title function_">play</span>()<br>        .<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;show&#x27;</span>, <span class="hljs-function"><span class="hljs-params">n</span> =&gt;</span> &#123;<br>        &#125;);<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure></li><li><p><strong>style</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">&lt;style&gt;<br><span class="hljs-selector-tag">img</span>&#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">340px</span> <span class="hljs-meta">!important</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">340px</span> <span class="hljs-meta">!important</span>;<br>&#125;<br>&lt;/style&gt;<br></code></pre></div></td></tr></table></figure><p>这样就实现了物品的360度展示，并支持鼠标滚轮根据方向启停🎉。</p><h4 id="动态停止，启动"><a href="#动态停止，启动" class="headerlink" title="动态停止，启动"></a>动态停止，启动</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">import</span> circlr <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;circlr&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;ImgCirclr&#x27;</span>,<br>  <span class="hljs-attr">props</span>: &#123;<br>    <span class="hljs-attr">msg</span>: <span class="hljs-title class_">String</span><br>  &#125;,<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">imgList</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">40</span>).<span class="hljs-title function_">fill</span>(<span class="hljs-string">&#x27;&#x27;</span>),<br>      <span class="hljs-attr">circlrInstance</span>: <span class="hljs-literal">null</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> el = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.container&#x27;</span>);<br>    <span class="hljs-comment">// 将circlr赋值给vue中的data</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">circlrInstance</span> = <span class="hljs-title function_">circlr</span>(el)<br>      .<span class="hljs-title function_">scroll</span>(<span class="hljs-literal">true</span>)<br>      .<span class="hljs-title function_">play</span>()<br>      .<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;show&#x27;</span>, <span class="hljs-function"><span class="hljs-params">n</span> =&gt;</span> &#123;<br>      &#125;);<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-comment">// 停止旋转</span><br>    <span class="hljs-title function_">stopCirclr</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">circlrInstance</span>.<span class="hljs-title function_">stop</span>()<br>    &#125;,<br>    <span class="hljs-comment">// 开始旋转</span><br>    <span class="hljs-title function_">startCirclr</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">circlrInstance</span>.<span class="hljs-title function_">play</span>()<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure></li></ul><h4 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h4><ul><li>circlr(el) el代表dom实例<br>创建旋转实例</li><li>scroll(n) n代表true/false<br>通过滚动标志旋转</li><li>play([n]) 开始序列播放</li><li>stop 停止播放</li><li>interval(ms) 旋转间隔时间</li></ul><p>效果如下👇</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/edd36b394c36443da5ed6506f83e2e57~tplv-k3u1fbpfcp-zoom-1.image"></p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><blockquote><ul><li>获取dom的时候如果出现获取不到的时候需要通过使用nextTick进行获取</li><li>动态启停的时候要将初始的实例进行赋值，如果不使用初始值的话，停止或者启动的时候会从初始位置进行旋转</li></ul></blockquote><h2 id="往期NPM包"><a href="#往期NPM包" class="headerlink" title="往期NPM包"></a>往期NPM包</h2><h5 id="timeago-js"><a href="#timeago-js" class="headerlink" title="timeago.js"></a><a href="https://juejin.cn/post/7194637751516414011">timeago.js</a></h5><h5 id="vue-seamless-scroll"><a href="#vue-seamless-scroll" class="headerlink" title="vue-seamless-scroll"></a><a href="https://juejin.cn/post/7196907025099653176">vue-seamless-scroll</a></h5><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>circlr</code>我们在做物品展示的时候是非常重要的，可以多角度控制物品的展示，使用方法也比较简单，希望对大家有所帮助🎈。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1d5ab6f1c77440b59862d91857f3cb74~tplv-k3u1fbpfcp-zoom-1.image"></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NPM</tag>
      
      <tag>VUE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每周一推NPM包-第二弹</title>
    <link href="/2023/02/06/%E6%AF%8F%E5%91%A8%E4%B8%80%E6%8E%A8%EF%BC%88npm%E5%8C%85%EF%BC%89-%E7%AC%AC%E4%BA%8C%E5%BC%B9/"/>
    <url>/2023/02/06/%E6%AF%8F%E5%91%A8%E4%B8%80%E6%8E%A8%EF%BC%88npm%E5%8C%85%EF%BC%89-%E7%AC%AC%E4%BA%8C%E5%BC%B9/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>为了不让自己的空余时间都浪费掉，打算做一个每周一推的专栏，盘点一些好的插件，分享给大家，每次分享前会先发到自己的博客，可以在<a href="https://drinkwd.github.io/">博客</a>中抢先看哦</strong>🎈。</p><h2 id="vue-seamless-scroll"><a href="#vue-seamless-scroll" class="headerlink" title="vue-seamless-scroll"></a><a href="https://chenxuan0000.github.io/vue-seamless-scroll/zh/guide/usage.html">vue-seamless-scroll</a></h2><p>大家在做可视化大屏的时候应该遇到很多动画效果,这就少不了滚动的表格，如下。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2b93d6aed8124460a8e319dab4e28f28~tplv-k3u1fbpfcp-zoom-1.image"></p><p>我们当然可以去改变<code>dom</code>的<code>scrollTop</code>去实现，但是有了这款插件之后包裹对应要滚动的<code>dom</code>就可以了，并且还提供了很多的<code>api</code>让的大屏的滚动更流畅更加丰富多彩🎈。</p><h4 id="不使用插件"><a href="#不使用插件" class="headerlink" title="不使用插件"></a>不使用插件</h4><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 获取dom监听如果有滚动就每隔一秒改变滚动条的值</span><br><span class="hljs-keyword">var</span> el = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&#x27;ant-table-body&#x27;</span>)[<span class="hljs-number">0</span>]<br>            <span class="hljs-keyword">if</span> (el.<span class="hljs-property">scrollHeight</span> &gt; el.<span class="hljs-property">clientHeight</span>) &#123;<br>              <span class="hljs-keyword">let</span> position = <span class="hljs-number">0</span><br>              <span class="hljs-variable language_">this</span>.<span class="hljs-property">timer</span> = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">scroller</span>(position = position + <span class="hljs-number">20</span>), <span class="hljs-number">1000</span>)<br>            &#125;<br><span class="hljs-comment">// 表格自动滚动</span><br>  scroller = <span class="hljs-function">(<span class="hljs-params">position</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">var</span> box = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&#x27;ant-table-body&#x27;</span>)[<span class="hljs-number">0</span>]<br>    <span class="hljs-comment">// 滚动到最底部回到原位置</span><br>    <span class="hljs-keyword">if</span> (box.<span class="hljs-property">scrollTop</span> === (box.<span class="hljs-property">scrollHeight</span> - box.<span class="hljs-property">offsetHeight</span>)) &#123;<br>      box.<span class="hljs-title function_">scroll</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>      <span class="hljs-built_in">clearInterval</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">timer</span>)<br>      position = <span class="hljs-number">0</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">timer</span> = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">scroller</span>(position = position + <span class="hljs-number">20</span>), <span class="hljs-number">1000</span>)<br>    &#125; <span class="hljs-keyword">else</span> <br>     <span class="hljs-comment">// 表格滚动</span><br>      box.<span class="hljs-title function_">scroll</span>(<span class="hljs-number">0</span>, position);<br>  &#125;<br></code></pre></div></td></tr></table></figure><p>如果不使用插件的话仅仅实现滚动的难度不大但，是扩展性却不是很强，很难增加定制化的需求，于是就用到了<code>vue-seamless-scroll</code>插件👇</p><blockquote><p><a href="https://www.npmjs.com/package/timeago.js">vue-seamless-scroll</a> 目前支持上下左右无缝滚动，单步滚动，以及支持水平方向的手动切换功能,兼容多平台<code>IE9+、Firefox、Chrome、Safari、iOS、Android</code>。</p></blockquote><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><ul><li>安装<figure class="highlight gauss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gauss">npm install vue-seamless-<span class="hljs-keyword">scroll</span> --<span class="hljs-keyword">save</span><br></code></pre></div></td></tr></table></figure></li><li>全局引用<figure class="highlight clean"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> scroll <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-seamless-scroll&#x27;</span><br>Vue.use(scroll)<br><br><span class="hljs-comment">// 或者你可以自己设置全局注册的组件名 默认注册的组件名是 vue-seamless-scroll</span><br>Vue.use(scroll,&#123;componentName: <span class="hljs-string">&#x27;scroll-seamless&#x27;</span>&#125;)<br></code></pre></div></td></tr></table></figure></li><li>单文件引用<figure class="highlight dust"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">import</span> vueSeamlessScroll <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-seamless-scroll&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> </span></span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">      components: &#123;</span><br><span class="hljs-template-variable">        vueSeamlessScroll</span><br><span class="hljs-template-variable">      &#125;</span><span class="language-xml"></span><br><span class="language-xml">   &#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure></li></ul><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><ul><li><p><strong>html</strong></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">vue-seamless-scroll</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;listData&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;warp&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in listData&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;item.title&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;date&quot;</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;item.date&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">vue-seamless-scroll</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><br><br></code></pre></div></td></tr></table></figure></li><li><p><strong>js</strong></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&lt;script&gt;<br>  <span class="hljs-keyword">import</span> vueSeamlessScroll <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-seamless-scroll&#x27;</span><br><br>  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Example01Basic&#x27;</span>,<br>    <span class="hljs-attr">components</span>: &#123;<br>      vueSeamlessScroll<br>    &#125;,<br>    data () &#123;<br>      <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">listData</span>: [&#123;<br>          <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;无缝滚动第一行无缝滚动第一行&#x27;</span>,<br>          <span class="hljs-string">&#x27;date&#x27;</span>: <span class="hljs-string">&#x27;2017-12-16&#x27;</span><br>        &#125;, &#123;<br>          <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;无缝滚动第二行无缝滚动第二行&#x27;</span>,<br>          <span class="hljs-string">&#x27;date&#x27;</span>: <span class="hljs-string">&#x27;2017-12-16&#x27;</span><br>        &#125;, &#123;<br>          <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;无缝滚动第三行无缝滚动第三行&#x27;</span>,<br>          <span class="hljs-string">&#x27;date&#x27;</span>: <span class="hljs-string">&#x27;2017-12-16&#x27;</span><br>        &#125;, &#123;<br>          <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;无缝滚动第四行无缝滚动第四行&#x27;</span>,<br>          <span class="hljs-string">&#x27;date&#x27;</span>: <span class="hljs-string">&#x27;2017-12-16&#x27;</span><br>        &#125;, &#123;<br>          <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;无缝滚动第五行无缝滚动第五行&#x27;</span>,<br>          <span class="hljs-string">&#x27;date&#x27;</span>: <span class="hljs-string">&#x27;2017-12-16&#x27;</span><br>        &#125;, &#123;<br>          <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;无缝滚动第六行无缝滚动第六行&#x27;</span>,<br>          <span class="hljs-string">&#x27;date&#x27;</span>: <span class="hljs-string">&#x27;2017-12-16&#x27;</span><br>        &#125;, &#123;<br>          <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;无缝滚动第七行无缝滚动第七行&#x27;</span>,<br>          <span class="hljs-string">&#x27;date&#x27;</span>: <span class="hljs-string">&#x27;2017-12-16&#x27;</span><br>        &#125;, &#123;<br>          <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;无缝滚动第八行无缝滚动第八行&#x27;</span>,<br>          <span class="hljs-string">&#x27;date&#x27;</span>: <span class="hljs-string">&#x27;2017-12-16&#x27;</span><br>        &#125;, &#123;<br>          <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;无缝滚动第九行无缝滚动第九行&#x27;</span>,<br>          <span class="hljs-string">&#x27;date&#x27;</span>: <span class="hljs-string">&#x27;2017-12-16&#x27;</span><br>        &#125;],<br>      &#125;<br>    &#125;,<br>  &#125;<br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure></li><li><p><strong>style</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">&lt;style lang=&quot;scss&quot; scoped&gt;<br>  <span class="hljs-selector-class">.warp</span> &#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">270px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">360px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>    <span class="hljs-selector-tag">ul</span> &#123;<br>      <span class="hljs-attribute">list-style</span>: none;<br>      <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>      <span class="hljs-selector-tag">li</span>,<br>      <span class="hljs-selector-tag">a</span> &#123;<br>        <span class="hljs-attribute">display</span>: block;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;<br>        <span class="hljs-attribute">line-height</span>: <span class="hljs-number">30px</span>;<br>        <span class="hljs-attribute">display</span>: flex;<br>        <span class="hljs-attribute">justify-content</span>: space-between;<br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">15px</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br>&lt;/style&gt;<br></code></pre></div></td></tr></table></figure></li></ul><p>如果想实现自定义配置可以查阅文档中对应的组件配置<a href="https://chenxuan0000.github.io/vue-seamless-scroll/zh/guide/properties.html#data">组件配置</a>可实现，滚动方向，滚动速度，动态追加数据等等🎨。</p><h4 id="回调事件"><a href="#回调事件" class="headerlink" title="回调事件"></a>回调事件</h4><ul><li><strong>html</strong><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">vue-seamless-scroll</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;listData&quot;</span> @<span class="hljs-attr">ScrollEnd</span>=<span class="hljs-string">&quot;ScrollEnd&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;warp&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in listData&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;item.title&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;date&quot;</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;item.date&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">vue-seamless-scroll</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><strong>js</strong><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-title class_">ScrollEnd</span>()&#123;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;ScrollEnd&quot;</span>)<br>   &#125;<br></code></pre></div></td></tr></table></figure></li></ul><h4 id="element-ui-Table-实现滚动"><a href="#element-ui-Table-实现滚动" class="headerlink" title="element-ui Table 实现滚动"></a>element-ui Table 实现滚动</h4><p>如果直接使用该组件将<code>el-table</code>包裹起来会导致表头也会跟着滚动效果特别不好</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/50eb1c60905a4aa2b5121803e5129ded~tplv-k3u1fbpfcp-zoom-1.image"></p><p>因此我们需要写两个表格通过样式进行实现，具体实现如下🍨</p><ul><li>html<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;scroll_table&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: inline-block; width: 100%&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-table</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;tableList&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span></span><br><span class="hljs-tag">          <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in columns&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index+&#x27;i&#x27;&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">:label</span>=<span class="hljs-string">&quot;item.label&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">:prop</span>=<span class="hljs-string">&quot;item.prop&quot;</span></span><br><span class="hljs-tag">        /&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">el-table</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scroll-seamless</span></span><br><span class="hljs-tag">        <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;tableList&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;seamless-warp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100%&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">:class-option</span>=<span class="hljs-string">&quot;classOption&quot;</span></span><br><span class="hljs-tag">      &gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-table</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;tableList&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table_scroll&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span></span><br><span class="hljs-tag">            <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in columns&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index+&#x27;i&#x27;&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">:label</span>=<span class="hljs-string">&quot;item.label&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">:prop</span>=<span class="hljs-string">&quot;item.prop&quot;</span></span><br><span class="hljs-tag">          /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-table</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">scroll-seamless</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li>js<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;ScrollTable&quot;</span>,<br>  data () &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">columns</span>: [<br>        &#123; <span class="hljs-attr">prop</span>: <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;姓名&#x27;</span>, <span class="hljs-attr">minWidth</span>: <span class="hljs-string">&#x27;100&#x27;</span>, <span class="hljs-attr">sort</span>: <span class="hljs-literal">true</span> &#125;,<br>        &#123; <span class="hljs-attr">prop</span>: <span class="hljs-string">&#x27;date&#x27;</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;日期&#x27;</span>, <span class="hljs-attr">minWidth</span>: <span class="hljs-string">&#x27;180&#x27;</span>, <span class="hljs-attr">sort</span>: <span class="hljs-literal">true</span> &#125;,<br>        &#123; <span class="hljs-attr">prop</span>: <span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;年龄&#x27;</span>, <span class="hljs-attr">minWidth</span>: <span class="hljs-string">&#x27;180&#x27;</span>, <span class="hljs-attr">sort</span>: <span class="hljs-literal">true</span> &#125;,<br>        &#123; <span class="hljs-attr">prop</span>: <span class="hljs-string">&#x27;status&#x27;</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;状态&#x27;</span>, <span class="hljs-attr">minWidth</span>: <span class="hljs-string">&#x27;180&#x27;</span>, <span class="hljs-attr">sort</span>: <span class="hljs-literal">true</span> &#125;,<br>        &#123; <span class="hljs-attr">prop</span>: <span class="hljs-string">&#x27;address&#x27;</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;地址&#x27;</span>, <span class="hljs-attr">minWidth</span>: <span class="hljs-string">&#x27;220&#x27;</span>, <span class="hljs-attr">sort</span>: <span class="hljs-literal">true</span> &#125;<br>      ],<br>      <span class="hljs-attr">tableList</span>: [<br>        &#123;<br>          <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;1&#x27;</span>,<br>          <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2019-09-25&#x27;</span>,<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>          <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;待处理&#x27;</span>,<br>          <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>          <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;广东省广州市天河区&#x27;</span><br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;2&#x27;</span>,<br>          <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2019-09-26&#x27;</span>,<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;李四&#x27;</span>,<br>          <span class="hljs-attr">age</span>: <span class="hljs-number">19</span>,<br>          <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;已处理&#x27;</span>,<br>          <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;广东省广州市天广东省广州市天河区2广东省广州市天河区2河区2&#x27;</span><br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;3&#x27;</span>,<br>          <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2019-09-27&#x27;</span>,<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;王五&#x27;</span>,<br>          <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>,<br>          <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;已完成&#x27;</span>,<br>          <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;广东省广州市天河区3&#x27;</span><br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;3&#x27;</span>,<br>          <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2019-09-27&#x27;</span>,<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;赵六&#x27;</span>,<br>          <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>,<br>          <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;已完成&#x27;</span>,<br>          <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;广东省广州市天河区3&#x27;</span><br>        &#125;,&#123;<br>          <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;1&#x27;</span>,<br>          <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2019-09-25&#x27;</span>,<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>          <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;待处理&#x27;</span>,<br>          <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>          <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;广东省广州市天河区&#x27;</span><br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;2&#x27;</span>,<br>          <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2019-09-26&#x27;</span>,<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;李四&#x27;</span>,<br>          <span class="hljs-attr">age</span>: <span class="hljs-number">19</span>,<br>          <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;已处理&#x27;</span>,<br>          <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;广东省广州市天广东省广州市天河区2广东省广州市天河区2河区2&#x27;</span><br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;3&#x27;</span>,<br>          <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2019-09-27&#x27;</span>,<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;王五&#x27;</span>,<br>          <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>,<br>          <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;已完成&#x27;</span>,<br>          <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;广东省广州市天河区3&#x27;</span><br>        &#125;<br>      ]<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">computed</span>: &#123;<br>    classOption () &#123;<br>      <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">step</span>: <span class="hljs-number">0.8</span>, <span class="hljs-comment">// 数值越大速度滚动越快</span><br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure></li><li>style<figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">&lt;style lang=&quot;less&quot; scoped&gt;<br>// 非常重要<br><span class="hljs-selector-class">.scroll_table</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">15px</span>;<br>  <span class="hljs-attribute">display</span>: flex;<br>  ::v-deep .table .el-table__body-wrapper &#123;<br>    <span class="hljs-attribute">display</span>: none;<br>  &#125;<br>  // 重点注意这段样式<br>  <span class="hljs-selector-class">.seamless-warp</span> &#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>    ::v-deep .table_scroll .el-table__header-wrapper &#123;<br>      <span class="hljs-attribute">display</span>: none;<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/style&gt;<br></code></pre></div></td></tr></table></figure>效果如下👇<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2add6de8ecbe4a5ea76db6cd5bcf4bca~tplv-k3u1fbpfcp-zoom-1.image"></li></ul><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><blockquote><ul><li>最外层容器需要手动设置<code>width</code>、<code>height</code>、<code>overflow:hidden</code></li><li>step值不建议太小,不然会有卡顿效果(如果设置了单步滚动,step需是单步大小的约数,否则无法保证单步滚动结束的位置是否准确,比如单步设置的30,step不能为4)</li></ul></blockquote><h2 id="往期NPM包"><a href="#往期NPM包" class="headerlink" title="往期NPM包"></a>往期NPM包</h2><h5 id="timeago-js"><a href="#timeago-js" class="headerlink" title="timeago.js"></a><a href="https://juejin.cn/post/7194637751516414011">timeago.js</a></h5><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>vue-seamless-scroll</code>我们在做可视化大屏的时候会经常用到，使用方法也比较简单，希望对大家有所帮助🎈。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3800fb414b3748098800461269d9925c~tplv-k3u1fbpfcp-zoom-1.image"></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NPM</tag>
      
      <tag>VUE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每周一推NPM包</title>
    <link href="/2023/01/31/%E6%AF%8F%E5%91%A8%E4%B8%80%E6%8E%A8%EF%BC%88npm%E5%8C%85%EF%BC%89/"/>
    <url>/2023/01/31/%E6%AF%8F%E5%91%A8%E4%B8%80%E6%8E%A8%EF%BC%88npm%E5%8C%85%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>为了不让自己的空余时间都浪费掉，打算做一个每周一推的专栏，盘点一些好的插件，分享给大家</strong>🎈。</p><h2 id="timeago-js"><a href="#timeago-js" class="headerlink" title="timeago.js"></a><a href="https://www.npmjs.com/package/timeago.js">timeago.js</a></h2><p>相信大家都看到过这种时间的展示,或者是朋友圈发了一条动态后，左下角显示 “刚刚”，过一会儿变成了“x分钟前”👇<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/31a047e79f8b415683308b5f77b10098~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp"><br>如果我们通过自己实现怕不是比较麻烦,但是有了<code>timeago.js</code>之后就变的简单起来。</p><blockquote><p><a href="https://www.npmjs.com/package/timeago.js">timeago.js</a> 是一个 nano 库（小于 2 kb），用于使用 *** time ago 语句格式化日期时间。例如：“3 小时前”,“5分钟后”，“刚刚”。</p></blockquote><ul><li>React 版本在这里：<a href="https://github.com/hustcc/timeago-react">timeago-react</a>。</li><li>Python 版本在这里：<a href="https://github.com/hustcc/timeago">timeago</a></li></ul><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><ul><li><p>安装</p><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> timeago.js<br></code></pre></div></td></tr></table></figure></li><li><p>引用</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> &#123; <span class="hljs-keyword">format</span>, render, cancel, register &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;timeago.js&#x27;</span>;<br></code></pre></div></td></tr></table></figure><h4 id="API"><a href="#API" class="headerlink" title="API"></a>API</h4><p>之所以<code>timeago</code>能有这么小的原因是因为他只有四个<code>api</code></p></li><li><p><strong>format</strong> </p><blockquote><p><code>format(date[, locale = &#39;en_US&#39;, opts])</code> 将日期实例/时间戳/日期字符串格式化为字符串。</p><ul><li><code>date</code>【日期实例/时间戳/日期字符串】</li><li><code>locale</code>【可选参数：语言显示（默认英文）内置<code>en_US/zh_CN</code>】</li><li><code>opts</code>【可选参数：opts是个对象中间包含两个值<code>relativeDate(与该时间进行对比)</code>，<code>minInterval(自动渲染的最小间隔),可以配合render函数使用</code>】</li></ul></blockquote><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 以<span class="hljs-number">2019</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span>为例<br><span class="hljs-regexp">//</span> new Date(<span class="hljs-string">&quot;2019-01-01&quot;</span>).getTime() <span class="hljs-number">1546300800000</span><br>format(new Date(<span class="hljs-string">&quot;2019-01-01&quot;</span>), <span class="hljs-string">&quot;zh_CN&quot;</span>); <span class="hljs-regexp">//</span><span class="hljs-number">4</span>年前<br>format(<span class="hljs-string">&quot;2019-01-01&quot;</span>, <span class="hljs-string">&quot;zh_CN&quot;</span>); <span class="hljs-regexp">//</span><span class="hljs-number">4</span>年前<br>format(<span class="hljs-number">1546300800000</span>, <span class="hljs-string">&quot;zh_CN&quot;</span>); <span class="hljs-regexp">//</span><span class="hljs-number">4</span>年前<br>format(<span class="hljs-number">1546300800000</span>, <span class="hljs-string">&quot;en_US&quot;</span>); <span class="hljs-regexp">//</span><span class="hljs-number">4</span> years ago<br>format(<span class="hljs-number">1546300800000</span>, <span class="hljs-string">&quot;zh_CN&quot;</span>,&#123; relativeDate : <span class="hljs-string">&#x27; 2018-11-11 &#x27;</span> &#125;); <span class="hljs-regexp">//</span>一个月后<br></code></pre></div></td></tr></table></figure></li><li><p><strong>render &amp; cancel</strong> </p></li></ul><blockquote><ul><li>render(dom[, locale = ‘en_US’, opts])</li><li>cancel([dom]) </li></ul></blockquote><blockquote><p>制作一个带有必须<strong>datetime</strong>属性自动渲染的dom并取消。</p></blockquote><p>HTML代码</p><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;timeago&quot;</span> datetime = <span class="hljs-string">&quot;2016-06-30 09:20:00&quot;</span> &gt; &lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></div></td></tr></table></figure><p>JS代码</p><figure class="highlight dart"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> &#123; render, cancel &#125; from <span class="hljs-string">&#x27;timeago.js&#x27;</span>;<br> <br><span class="hljs-keyword">const</span> nodes = <span class="hljs-built_in">document</span>.<span class="hljs-built_in">querySelectorAll</span>(<span class="hljs-string">&#x27;.timeago&#x27;</span>);<br> <br><span class="hljs-comment">// 使用 render 方法实时渲染节点</span><br>render(nodes, <span class="hljs-string">&#x27;zh_CN&#x27;</span>);<br> <br><span class="hljs-comment">// 取消所有实时渲染任务,因为是实时渲染cancel的作用就类似于清空定时器🧹释放实例的所有资源与render需要成对出现</span><br>cancel();<br></code></pre></div></td></tr></table></figure><ul><li><strong>register</strong><blockquote><p>register(locale, localeFunc), 注册一个新的语言环境,由于我在开发中很少用到我就把官网的搬过来方便大家查看🤓</p></blockquote><figure class="highlight prolog"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs prolog">const localeFunc = (number, index, totalSec) =&gt; &#123;<br>  return [<br>    [<span class="hljs-string">&#x27;just now&#x27;</span>, <span class="hljs-string">&#x27;right now&#x27;</span>],<br>    [<span class="hljs-string">&#x27;%s seconds ago&#x27;</span>, <span class="hljs-string">&#x27;in %s seconds&#x27;</span>],<br>    [<span class="hljs-string">&#x27;1 minute ago&#x27;</span>, <span class="hljs-string">&#x27;in 1 minute&#x27;</span>],<br>    [<span class="hljs-string">&#x27;%s minutes ago&#x27;</span>, <span class="hljs-string">&#x27;in %s minutes&#x27;</span>],<br>    [<span class="hljs-string">&#x27;1 hour ago&#x27;</span>, <span class="hljs-string">&#x27;in 1 hour&#x27;</span>],<br>    [<span class="hljs-string">&#x27;%s hours ago&#x27;</span>, <span class="hljs-string">&#x27;in %s hours&#x27;</span>],<br>    [<span class="hljs-string">&#x27;1 day ago&#x27;</span>, <span class="hljs-string">&#x27;in 1 day&#x27;</span>],<br>    [<span class="hljs-string">&#x27;%s days ago&#x27;</span>, <span class="hljs-string">&#x27;in %s days&#x27;</span>],<br>    [<span class="hljs-string">&#x27;1 week ago&#x27;</span>, <span class="hljs-string">&#x27;in 1 week&#x27;</span>],<br>    [<span class="hljs-string">&#x27;%s weeks ago&#x27;</span>, <span class="hljs-string">&#x27;in %s weeks&#x27;</span>],<br>    [<span class="hljs-string">&#x27;1 month ago&#x27;</span>, <span class="hljs-string">&#x27;in 1 month&#x27;</span>],<br>    [<span class="hljs-string">&#x27;%s months ago&#x27;</span>, <span class="hljs-string">&#x27;in %s months&#x27;</span>],<br>    [<span class="hljs-string">&#x27;1 year ago&#x27;</span>, <span class="hljs-string">&#x27;in 1 year&#x27;</span>],<br>    [<span class="hljs-string">&#x27;%s years ago&#x27;</span>, <span class="hljs-string">&#x27;in %s years&#x27;</span>]<br>  ][index];<br>&#125;;<br>register(<span class="hljs-string">&#x27;my-locale&#x27;</span>, localeFunc);<br>format(<span class="hljs-string">&#x27;2016-06-12&#x27;</span>, <span class="hljs-string">&#x27;my-locale&#x27;</span>);// <span class="hljs-number">6</span> years ago<br></code></pre></div></td></tr></table></figure><h3 id="在vue项目中使用"><a href="#在vue项目中使用" class="headerlink" title="在vue项目中使用"></a>在vue项目中使用</h3>我一般在项目中是通过过滤器的方式进行使用的，大家也可以进行参照😀。<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>&#123;&#123; ShowTime | timeFormat &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123;</span><br><span class="language-javascript">format</span><br><span class="language-javascript">&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;timeago.js&quot;</span></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">filters</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">timeFormat</span>(<span class="hljs-params">time</span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> <span class="hljs-title function_">format</span>(time, <span class="hljs-string">&quot;zh_CN&quot;</span>);</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript"><span class="hljs-title class_">ShowTime</span>:<span class="hljs-string">&#x27;2022-06-20&#x27;</span></span><br><span class="language-javascript">&#125;;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2></li></ul><p><code>timeago.js</code>主要用的<code>API</code>就是<code>format</code>，一定要动手去实践，希望可以对大家有帮助哦🎈。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NPM</tag>
      
      <tag>VUE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>效率翻倍小技巧</title>
    <link href="/2023/01/29/%E6%95%88%E7%8E%87%E7%BF%BB%E5%80%8D%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <url>/2023/01/29/%E6%95%88%E7%8E%87%E7%BF%BB%E5%80%8D%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="🎨前言"><a href="#🎨前言" class="headerlink" title="🎨前言"></a>🎨前言</h2><p>工作中最重要的就是效率没有效率怎么摸鱼啊，推荐几款适合开发用到的小工具🥙</p><h2 id="markdown-自动生成目录结构"><a href="#markdown-自动生成目录结构" class="headerlink" title="markdown 自动生成目录结构"></a>markdown 自动生成目录结构</h2><p>当我们在写博客的时候经常想要介绍一下自己项目的目录结构，如下图这种，我当初还以为都是手动生成的😒。</p><figure class="highlight csharp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs csharp">├── app.vue <span class="hljs-meta"># Nuxt 3 应用程序中的主组件 入口组件</span><br>├── components <span class="hljs-meta"># 组件目录，支持自动导入</span><br>|  └── helloWorld.vue <span class="hljs-meta"># 组件</span><br>├── nuxt.config.ts <span class="hljs-meta"># Nuxt 配置文件，文件名必须是nuxt.config 后缀名可以是.js,.ts或.mjs</span><br>├── package.json <span class="hljs-meta"># 项目包的配置文件和项目的启动调式命令配置</span><br>├── README.md <span class="hljs-meta"># 搭建 Nuxt 3脚手架之后的阅读文档</span><br>├── tsconfig.json <span class="hljs-meta"># ts配置</span><br>└── yarn.<span class="hljs-keyword">lock</span> <span class="hljs-meta"># yarn锁文件 锁定依赖包版本</span><br></code></pre></div></td></tr></table></figure><p>直到我发现了<code>windows</code>自带的<code>tree</code>命令。</p><ul><li><strong><code>tree</code></strong> 使用方法</li></ul><p>在需要生成目录的文件夹中输入<code>tree</code>将输出的内容复制出来即可👇。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/877946a2e93944fbbb4388612fa51444~tplv-k3u1fbpfcp-zoom-1.image"></p><blockquote><p>上面的内容看起来不错，但是<code>tree</code>命令没有提供可忽略的选项🍖定在生成你目录结构的时候不想要<code>node_modules</code>,<code>.git</code>等等，于是我们需要用到<code>tree-cli</code>指令👍</p></blockquote><ul><li><strong><code>tree-cli</code></strong> 安装</li></ul><figure class="highlight avrasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs avrasm">npm install tree-<span class="hljs-keyword">cli</span><br></code></pre></div></td></tr></table></figure><blockquote><p>需要注意一点，如果是<code>windows</code>系统的话要使用<code>treee</code>避免与<code>windows</code>系统自带的<code>tree</code>产生冲突🦺</p></blockquote><ul><li><p>输出指定层级目录</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-comment"># -l 层级深度，-o 输出文件</span><br><span class="hljs-attribute">treee</span> -l <span class="hljs-number">2</span> -o output.txt<br></code></pre></div></td></tr></table></figure></li><li><p>输出目录不包含指定文件</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">treee -l <span class="hljs-number">5</span> -o output<span class="hljs-selector-class">.txt</span> <span class="hljs-attr">--ignore</span> <span class="hljs-string">&#x27;node_modules,.git&#x27;</span><br></code></pre></div></td></tr></table></figure></li><li><p>在markdown中使用</p></li></ul><p>在使用的时候需要用代码块包裹才可以正常显示哦,以后妈妈再也不用担心我的博客中缺少目录结构了✌。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cfc898c953804251ae912a9fc9a3f9ab~tplv-k3u1fbpfcp-zoom-1.image"></p><h3 id="生成代码片段"><a href="#生成代码片段" class="headerlink" title="生成代码片段"></a>生成代码片段</h3><p>当我们在使用<code>vscode</code>编程的时候在写<code>vue</code>程序的时候避免不了要用到以下模板</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3763292058a44aed8040eec47aae8c48~tplv-k3u1fbpfcp-zoom-1.image"><br>但是🥠身份程序员每次多打一个字我们都会觉得累想一下我们在写<code>html</code>文件的时候为什么写一个<strong>html:5</strong> 的时候就会自动生成一个模板呢😘</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e4710151addc4be9a8deabad8147267e~tplv-k3u1fbpfcp-zoom-1.image"></p><p>实际上上面的过程就是一个代码片段，接下来我们就需要实现一个<code>vue</code>的代码片段。</p><h4 id="vue代码片段"><a href="#vue代码片段" class="headerlink" title="vue代码片段"></a><code>vue</code>代码片段</h4><ul><li>打开<code>vscode</code>设置小齿轮找到用户代码片段</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/56974a1084e34e54b9770a60c4af603d~tplv-k3u1fbpfcp-zoom-1.image"></p><ul><li>点击用户代码片段，在弹出的框中选择新代码片段，填入名称可以随意填写，点击<code>enter</code></li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c7331cd95289401b9a1e3710254b647e~tplv-k3u1fbpfcp-zoom-1.image"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d2e44c736e3c446c91af2c5a2225451f~tplv-k3u1fbpfcp-zoom-1.image"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/755e2a39e0ff4602997558d1c5d109a0~tplv-k3u1fbpfcp-zoom-1.image"></p><ul><li>编写代码片段模板，保存即可。<figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-comment">// Example: </span><br><span class="hljs-comment">// &quot;vue&quot;: &#123;</span><br><span class="hljs-comment">// &quot;scope&quot;: &quot;javascript,typescript&quot;, 指定文件类型</span><br><span class="hljs-comment">// &quot;prefix&quot;: &quot;log&quot;, //输入前缀</span><br><span class="hljs-comment">// &quot;body&quot;: [ // 模板内容</span><br><span class="hljs-comment">// &quot;console.log(&#x27;$1&#x27;);&quot;,</span><br><span class="hljs-comment">// &quot;$2&quot;</span><br><span class="hljs-comment">// ],</span><br><span class="hljs-comment">// &quot;description&quot;: &quot;Log output to console&quot; // 描述</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;vue&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;prefix&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;vue&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;body&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;&lt;template&gt;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;  &lt;div class=\&quot;\&quot;&gt;&lt;/div&gt;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;&lt;/template&gt;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;&lt;script&gt;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;export default &#123;&#125;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;&lt;/script&gt;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;&lt;style scoped&gt;&lt;/style&gt;&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;vue Components&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></div></td></tr></table></figure></li><li>当我们载输入<code>vue</code>的时候就会自动生成模板啦。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7e1cd76cda1e4b0288561b5587f33467~tplv-k3u1fbpfcp-zoom-1.image"></li></ul><h3 id="快速定位人员"><a href="#快速定位人员" class="headerlink" title="快速定位人员"></a>快速定位人员</h3><p>相信在开发代码的过程中可能会遇到这种如下情况（<strong>夸张语法</strong>）👇</p><ul><li><strong>领导</strong>🤦‍♂️：这块代码究竟是谁写的代码，让公司赚了<code>50W</code>。</li><li><strong>小王</strong>🤷‍：我写的。</li><li><strong>小李</strong>🤷‍:好像是我写的吧，有点记不住了。</li><li><strong>小张</strong>🤷‍：我也忘了是不是我写的了我看一下<code>git</code>代码的提交记录吧。<br></li></ul><p>当我们遇到这种问题的时候，如果是去<code>git</code>上一点一点去查提交记录的话未免有点太浪费时间🤷‍♂️费了这次表扬的机会，包括如果有问题的话也可以找到对应的人👩‍🔧</p><ul><li><strong>gitlens</strong>安装</li></ul><p>在<code>vscode</code>拓展商店中找到<code>gitlens</code>安装。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d9dda1eaa19f4d73b04271ddcc1977c3~tplv-k3u1fbpfcp-zoom-1.image"></p><ul><li>查看方式<br>当我们的项目如果有<code>.git</code>文件的时候就自动解析出提交人的姓名,哪一行代码是谁在什么时间点提交的。</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/59e80b22ea21409f8baa04fa853d52d8~tplv-k3u1fbpfcp-zoom-1.image"></p><h3 id="快速查看git源码"><a href="#快速查看git源码" class="headerlink" title="快速查看git源码"></a>快速查看git源码</h3><p>当我们在浏览git项目的时候如果目录层级特别深的时候我们一层一层的去点击真的是很烦😒别耽误我们的时间，如果能在左侧有一个纵向的目录结构就好了😜</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/176e72daed7f47b89442fcd00ae6bfac~tplv-k3u1fbpfcp-zoom-1.image"></p><ul><li>安装<a href="https://chrome.google.com/webstore/search/Octotree?utm_source=chrome-ntp-icon">Octotree</a>插件,添加到谷歌浏览器扩展当中。</li></ul><blockquote><p>如果无法访问Google可以自行找一下已解压的扩展程序，如果没有找到的话可以评论找我要哦😁</p></blockquote><ul><li>重启谷歌浏览器，就会看到树状的项目可以快速浏览项目啦。</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/57cdd36289b24a6899c369b47dfaefae~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在工作的时候效率肯定是第一位，最短的时候干最多的事，才是赚钱利器🎨</p>]]></content>
    
    
    <categories>
      
      <category>代码人生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>Vscode</tag>
      
      <tag>Chrom</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nuxt3目录结构(二)</title>
    <link href="/2023/01/09/Nuxt3%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2023/01/09/Nuxt3%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>书接上回</p><ul><li>nuxt约定的目录结构如下👇<figure class="highlight axapta"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs axapta">├── app.vue <span class="hljs-meta"># Nuxt 3 应用程序中的主组件 入口组件</span><br>├── components <span class="hljs-meta"># 组件目录，支持自动导入</span><br>├── layouts <span class="hljs-meta"># 布局目录</span><br>├── composables <span class="hljs-meta"># 公共函数，支持自动导入</span><br>├── assets <span class="hljs-meta"># 静态资源目录 与vue项目的assets相同</span><br>├── middleware <span class="hljs-meta"># 路由中间件</span><br>├── nuxt.config.ts  <span class="hljs-meta"># Nuxt 配置文件，可以理解成vue.config.js 文件名必须是nuxt.config 后缀名可以是.js,.ts或.mjs</span><br>├── package.json<br>├── pages <span class="hljs-meta"># 基于文件的路由</span><br>├── plugins <span class="hljs-meta">#插件</span><br>├── <span class="hljs-keyword">public</span> <span class="hljs-meta"># 不会参与打包，与vue项目的public类似直接挂在服务器的根目录</span><br>├── README.md<br>├── <span class="hljs-keyword">server</span> <br>├── tsconfig.json<br>└── yarn.lock<br></code></pre></div></td></tr></table></figure></li></ul><h3 id="layout布局目录"><a href="#layout布局目录" class="headerlink" title="layout布局目录"></a>layout布局目录</h3><p><code>Nuxt</code>提供了一个可定制的布局框架<code>layout</code>，您可以在整个应用程序中使用，非常适合将常见的<code> UI</code> 或代码模式提取到可重用的布局组件中,可以把<code>layout</code>想象成嵌套路由最外层的父级,内部需要使用插槽。</p><blockquote><p><code>layout</code>目录下的布局文件，必须要有一个根元素进行包裹，并且根元素不能是<code>&lt;slot /&gt;</code></p></blockquote><ul><li>举个例子 <figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c">-<span class="hljs-string">| layouts/</span><br>---<span class="hljs-string">| default.vue</span><br>-<span class="hljs-string">| app.vue</span><br></code></pre></div></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--default.vue--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    我是布局模板，default.vue<br>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">NuxtLayout</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;default&quot;</span>&gt;</span><br>      内容<br><span class="hljs-tag">&lt;/<span class="hljs-name">NuxtLayout</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li></ul><p><img src="https://files.mdnice.com/user/10685/c2c3637f-5ab7-4d47-b6cc-c6497d7724ea.png"></p><ul><li>具名插槽接收<figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c">-<span class="hljs-string">| layouts/</span><br>---<span class="hljs-string">| default.vue</span><br>-<span class="hljs-string">| app.vue</span><br></code></pre></div></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    我是布局模板，default.vue<br>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;one&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;two&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">NuxtLayout</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;default&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">two</span>&gt;</span> 我是two中的内容 <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">one</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>        我是one中的内容<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">NuxtLayout</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li></ul><p><img src="https://files.mdnice.com/user/10685/186d9c26-670d-4f44-bc40-b7d5ce8de4ad.png"></p><ul><li><code>layout</code>与<code>pages</code><br>可以指定页面使用<code>layout</code>布局也可以所有页面均使用<code>layout</code><figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c">-<span class="hljs-string">| layouts/</span><br>---<span class="hljs-string">| default.vue</span><br>-<span class="hljs-string">| pages/</span><br>---<span class="hljs-string">| index.vue</span><br>-<span class="hljs-string">| app.vue</span><br></code></pre></div></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--default.vue--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    我是布局模板，default.vue<br>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--index.vue--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    我是布局模板，default.vue<br>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- app.vue--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">NuxtLayout</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;default&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">NuxtPage</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">NuxtPage</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">NuxtLayout</span>&gt;</span><br></code></pre></div></td></tr></table></figure><blockquote><p>如果在<code>NuxtLayout</code>中不定义<code>name</code>可以在pages中增加<code>&lt;script setup&gt; definePageMeta(&#123; layout: &quot;default&quot;, &#125;) &lt;/script&gt;</code>针对指定页面采用<code>layout</code>布局</p></blockquote></li></ul><h3 id="middleware"><a href="#middleware" class="headerlink" title="middleware"></a>middleware</h3><figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c">-<span class="hljs-string">| middleware/</span><br>---<span class="hljs-string">| test.js</span><br>---<span class="hljs-string">| test.global.js</span><br>-<span class="hljs-string">| pages/</span><br>---<span class="hljs-string">| router.vue</span><br></code></pre></div></td></tr></table></figure><p><code>middleware</code>路由中间件可以理解成vue路由的拦截器,当页面跳转某个页面的之前执行的函数,如果路由中间件的后缀名以.global结尾则是全局的路由守卫不需要在每个页面都引用。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// middleware/test.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineNuxtRouteMiddleware</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span></span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(to,<span class="hljs-keyword">from</span>)<br>  <span class="hljs-keyword">if</span> (to.<span class="hljs-property">params</span>.<span class="hljs-property">id</span> === <span class="hljs-string">&#x27;1&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">abortNavigation</span>()<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">navigateTo</span>(<span class="hljs-string">&#x27;/&#x27;</span>)<br>&#125;)<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// middleware/test.global.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineNuxtRouteMiddleware</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span></span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;每切换一次路由都会执行&#x27;</span>)<br>&#125;)<br></code></pre></div></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- router.vue--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    router<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123;&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="language-javascript"><span class="hljs-title function_">definePageMeta</span>(&#123;</span><br><span class="language-javascript">  <span class="hljs-attr">middleware</span>: [<span class="hljs-string">&quot;routenterception&quot;</span>]</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></div></td></tr></table></figure><blockquote><p>上述代码，当页面跳转到<code>/router</code>的时候会执行对应的中间件函数。</p></blockquote><h3 id="Plugins-目录"><a href="#Plugins-目录" class="headerlink" title="Plugins 目录"></a>Plugins 目录</h3><p><code>Nuxt</code>将自动读取<code>plugins</code>目录中的文件并加载它们。您可以在文件名中使用<code>.server</code>或<code>.client</code>后缀以仅在服务器或客户端加载插件,例如使用elementui需要在该目录下注册。</p><ul><li>引用<code>ElementPlus</code><figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c">plugins<br> <span class="hljs-string">| - myPlugin.ts</span><br></code></pre></div></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs livecodeserver">yarn <span class="hljs-built_in">add</span> <span class="hljs-keyword">element</span>-plus<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//myPlugin.ts</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ElementPlus</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-plus&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineNuxtPlugin</span>(<span class="hljs-function"><span class="hljs-params">nuxtApp</span> =&gt;</span> &#123;<br>  nuxtApp.<span class="hljs-property">vueApp</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">ElementPlus</span>)<br>&#125;)<br></code></pre></div></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- app.vue --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-keyword">@import</span> <span class="hljs-string">&#x27;element-plus/dist/index.css&#x27;</span>;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></div></td></tr></table></figure>这样在全局就可以使用<code>element-ui</code>了<h3 id="server目录"><a href="#server目录" class="headerlink" title="server目录"></a>server目录</h3></li></ul><p><a href="https://v3.nuxtjs.org/guide/features/server-routes">server</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>Nuxt3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nuxt3目录结构(一)</title>
    <link href="/2022/05/31/Nuxt3%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84(%E4%B8%80)/"/>
    <url>/2022/05/31/Nuxt3%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84(%E4%B8%80)/</url>
    
    <content type="html"><![CDATA[<h2 id="前言🥠"><a href="#前言🥠" class="headerlink" title="前言🥠"></a>前言🥠</h2><p>因为<code>Nuxt</code>是约定大于配置的一个框架，所对应的目录结构的名称基本都是规定的，所以有必要解释一下<code>Nuxt</code>对应的目录结构啦🦺</p><ul><li>脚手架生成目录结构👇<figure class="highlight csharp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs csharp">├── app.vue <span class="hljs-meta"># Nuxt 3 应用程序中的主组件 入口组件</span><br>├── components <span class="hljs-meta"># 组件目录，支持自动导入</span><br>|  └── helloWorld.vue <span class="hljs-meta"># 组件</span><br>├── nuxt.config.ts <span class="hljs-meta"># Nuxt 配置文件，可以理解成vue.config.js 文件名必须是nuxt.config 后缀名可以是.js,.ts或.mjs</span><br>├── package.json <span class="hljs-meta"># 项目包的配置文件和项目的启动调式命令配置</span><br>├── README.md <span class="hljs-meta"># 搭建 Nuxt 3脚手架之后的阅读文档</span><br>├── tsconfig.json <span class="hljs-meta"># ts配置</span><br>└── yarn.<span class="hljs-keyword">lock</span> <span class="hljs-meta"># yarn锁文件 锁定依赖包版本</span><br></code></pre></div></td></tr></table></figure><code>Nuxt</code>是约定式开发 白话就是你要按照<code>Nuxt</code>规定的模式进行开发🍕，约定大于配置,比如组件的自动导入🥩，你无需在定义<code>components</code>进行声明，如果定义<code>A</code>你就要定义<code>A</code>，不要定义成<code>B</code>🌯。</li></ul><p><code>Nuxt</code> 提供了一个可遵循的目录结构，专注于特定功能，让您专注于创建，而不是配置🥗。</p><ul><li>nuxt约定的目录结构如下👇<figure class="highlight axapta"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs axapta">├── app.vue <span class="hljs-meta"># Nuxt 3 应用程序中的主组件 入口组件</span><br>├── components <span class="hljs-meta"># 组件目录，支持自动导入</span><br>├── layouts <span class="hljs-meta"># 布局目录</span><br>├── composables <span class="hljs-meta"># 公共函数，支持自动导入</span><br>├── assets <span class="hljs-meta"># 静态资源目录 与vue项目的assets相同</span><br>├── middleware <span class="hljs-meta"># 路由中间件框架</span><br>├── nuxt.config.ts  <span class="hljs-meta"># Nuxt 配置文件，可以理解成vue.config.js 文件名必须是nuxt.config 后缀名可以是.js,.ts或.mjs</span><br>├── package.json<br>├── pages <span class="hljs-meta"># 基于文件的路由</span><br>├── plugins <span class="hljs-meta">#插件</span><br>├── <span class="hljs-keyword">public</span> <span class="hljs-meta"># 不会参与打包，与vue项目的public类似直接挂在服务器的根目录</span><br>├── README.md<br>├── <span class="hljs-keyword">server</span><br>├── tsconfig.json<br>└── yarn.lock<br></code></pre></div></td></tr></table></figure><h2 id="目录详解"><a href="#目录详解" class="headerlink" title="目录详解"></a>目录详解</h2><h3 id="app-vue"><a href="#app-vue" class="headerlink" title="app.vue"></a><code>app.vue</code></h3></li></ul><p>相信用过<code>vue</code>的小伙伴都知道<code>app.vue</code>🧀，在<code>nuxt</code>中的<code>app.vue</code>与<code>vue</code>中的功能是相同的，在<code>app.vue</code>中定义的<code>js</code>和<code>css</code>都是全局的并包含在每个页面中🍺。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--app.vue--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">NuxtWelcome</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><h3 id="components目录"><a href="#components目录" class="headerlink" title="components目录"></a><code>components</code>目录</h3><ul><li><strong>单层组件</strong></li></ul><p><code>components</code>目录中对应的是组件目录在使用组件的过程中是无需引用的。</p><figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c"><span class="hljs-string">| components/</span><br>--<span class="hljs-string">| TheHeader.vue</span><br>--<span class="hljs-string">| TheFooter.vue</span><br></code></pre></div></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- app.vue --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TheHeader</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TheFooter</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></div></td></tr></table></figure><blockquote><p><code>nuxt</code>对于组件的大小写是不敏感的即使在使用的时候开头字母小写也是可以的<code>&lt;theHeader /&gt;</code>。</p></blockquote><ul><li><strong>嵌套组件</strong><figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c"> <span class="hljs-string">| components/</span><br>--<span class="hljs-string">| base/</span><br>----<span class="hljs-string">| foo/</span><br>------<span class="hljs-string">| Button.vue</span><br></code></pre></div></td></tr></table></figure><blockquote><p>嵌套组件就是组件不是在<code>components</code>的目录下而是在<code>components</code>的子目录或者孙目录下，在使用的时候需要加上上级目录的文件名。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- app.vue --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">BaseFooButton</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><strong>特殊的嵌套组件</strong><figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c"> <span class="hljs-string">| components/</span><br>--<span class="hljs-string">| test/</span><br>----<span class="hljs-string">| test.vue</span><br></code></pre></div></td></tr></table></figure><blockquote><p>如果组件名和对应的目录名称是相同的就不需要增加文件名前缀了。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- app.vue --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Test</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><strong>动态组件</strong></li></ul><p>使用<code>vue</code>中动态组件的写法要使用<code>resolveComponent</code>语法</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;isHeader ? TheHeader : &#x27;div&#x27;&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> isHeader = <span class="hljs-title function_">ref</span>(<span class="hljs-number">1</span>)</span><br><span class="language-javascript"><span class="hljs-comment">// 组件</span></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">TheHeader</span> = <span class="hljs-title function_">resolveComponent</span>(<span class="hljs-string">&#x27;TheHeader&#x27;</span>)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li><strong>延迟加载组件</strong></li></ul><blockquote><p>您只需在组件名称中添加<code>Lazy</code>前缀即可，可以想象成路由的懒加载🥠，只有在组件显示的时候才进行加载,会大大减少打包之后的大小，如果某些组件不经常显示就可以采用组件的懒加载🧃。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">LazyTheHeader</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;show&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;!show&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;show = true&quot;</span>&gt;</span>ShowHeader<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li><strong>显式导入组件</strong></li></ul><blockquote><p>虽然<code>nuxt</code>提供了自动导入组件的功能，但是如果想要显式导入组件也是可以的，采用以下语法</p></blockquote><figure class="highlight dust"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">import</span> </span></span><span class="hljs-template-variable">&#123; TheHeader &#125;</span><span class="language-xml"><span class="language-javascript"> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;#components&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><blockquote><p>注意<br>显式导入的组件的方式由于是解构所有要个按照组件的标准首字母要<strong>大写</strong>，否则会导入失败。</p></blockquote><ul><li><strong>ClientOnly</strong></li></ul><p><code>Nuxt</code>提供了<ClientOnly>仅在客户端故意渲染组件的组件。要仅在客户端上导入组件，请在仅客户端插件中注册该组件，插槽作为后备</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">  <span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ClientOnly</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">TheHeader</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">fallback</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Loading comments...<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ClientOnly</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>以上代码会先显示<code>Loading comments...</code>当客户端将组件导入成功之后才会展示<code>TheHeader</code>的内容🍘，<br>当在<code>f12</code>查看网页源代码的时候是看不到<code>TheHeader</code>中定义的内容的，因为客户端渲染把内容都打包进<code>js</code>当中了🥡。</p><h3 id="composables目录"><a href="#composables目录" class="headerlink" title="composables目录"></a><strong>composables</strong>目录</h3><p>该目录与<code>components</code>目录类似，🍠但是这个目录下存放的一般是公共方法不是公共组件，当我们在开发<code>vue</code>程序的时候的<code>utils</code>目录，该目录也可以实现自动导入的功能，但是也有特殊情况👇。</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">composables<br> | - utils.ts <span class="hljs-regexp">//</span> 可以自动导入<br> | - utilsfun<br> | --- funtest.ts <span class="hljs-regexp">//</span> 不可以自动导入<br> | --- index.ts <span class="hljs-regexp">//</span> 可以自动导入<br></code></pre></div></td></tr></table></figure><p>如果导出函数的时候使用<code>export default</code> 则需要通过<strong>文件名</strong>的方式进行调用</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// utils.ts 文件</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">getTime</span>=(<span class="hljs-params"></span>)=&gt;&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();  <br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;默认导出&#x27;</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">  <span class="hljs-comment">&lt;!-- app.vue --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 成功</span></span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">getTime</span>())</span><br><span class="language-javascript"><span class="hljs-comment">// 成功 如果想使用test必须显示导入utils文件或者使用utils()进行调用，因为test是默认导出的</span></span><br><span class="language-javascript"><span class="hljs-title function_">utils</span>()</span><br><span class="language-javascript"><span class="hljs-comment">// 报错</span></span><br><span class="language-javascript"><span class="hljs-title function_">test</span>()</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="pages目录"><a href="#pages目录" class="headerlink" title="pages目录"></a>pages目录</h3><p>基于文件的路由，如果不创建该文件夹<code>nuxt</code>不会引用<code>vue-router</code>如果创建了<code>pages</code>文件夹<code>nuxt</code>将自动引入<code>vue-router</code>来管理路由。</p><ul><li><p>对应关系</p><p><code>pages/index.vue</code> 会自动映射<code>/</code>，如果是<code>pages/test.vue</code>会自动映射到<code>/test</code> 。</p><blockquote><p><strong>重点</strong><br>必须要保证<code>app.vue</code>中有<code>&lt;NuxtPage /&gt;</code>标签来展示路由下的内容，可以理解成<code>vue</code>中的<code>router-view</code>。</p></blockquote></li><li><p>动态路由<br><br>可以直接通过文件名的方式进行传递参数，要保证路由跳转时与文件名的结构一致。</p><ul><li>单参数传递✨: 只要在页面的文件名中用<code>[]</code>扩起来就可以了。</li><li>多参数传递✨: 需要建立一个父级文件夹进行接收也使用<code>[]</code>进行包裹。</li></ul></li><li><p>参数接收<br><br>参数接收的方式与<code>vue</code>接收的方式一致。</p></li><li><p>捕获所有路由<br><br>可以通过<code>[...xxx].vue</code>的方式定义路由,可以无限层级跳转。</p></li><li><p>嵌套路由<br/><br>类似<code>vue-router</code>中的<code>children</code>，并且需要在父级中增加<code>&lt;NuxtPage /&gt;</code>将其理解成<code>vue-router</code>中的嵌套路由就很好理解,当跳转到子路由中将含有父级中的内容🚝。</p></li><li><p>路由跳转<br></p><ul><li>标签导航🍺：路由跳转需要使用<code>&lt;NuxtLink to=&quot;/&quot;&gt;Home page&lt;/NuxtLink&gt;</code>进行跳转</li><li>编程式导航🍺: <code>navigateTo()</code>。</li></ul></li><li><p>举个例子最全👇</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7"><br>pages<br>├── demo2_<span class="hljs-comment">[id]</span>.vue<br>├── <span class="hljs-comment">[...catch]</span>.vue<br>├── goods-<span class="hljs-comment">[name]</span><br>|  └── demo3-<span class="hljs-comment">[id]</span>.vue<br>├── parent<br>   └── child.vue<br>├── parent.vue<br>├── index.vue<br></code></pre></div></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">  <span class="hljs-comment">&lt;!-- pages/index.vue --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;routerPush&quot;</span>&gt;</span>Index Page<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">NuxtLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/parent/child&quot;</span>&gt;</span>/parent/child<span class="hljs-tag">&lt;/<span class="hljs-name">NuxtLink</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">NuxtLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/catch/xxx/aaa/vvvv&quot;</span>&gt;</span>catch.vue<span class="hljs-tag">&lt;/<span class="hljs-name">NuxtLink</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">NuxtLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/demo2_38&quot;</span>&gt;</span>Demo2.vue<span class="hljs-tag">&lt;/<span class="hljs-name">NuxtLink</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">NuxtLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/goods-haha/demo3-test&quot;</span>&gt;</span>Demo3.vue<span class="hljs-tag">&lt;/<span class="hljs-name">NuxtLink</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123;&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">routerPush</span>= (<span class="hljs-params"></span>)=&gt;&#123;</span><br><span class="language-javascript">  <span class="hljs-title function_">navigateTo</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/goods-bar/demo3-foo&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">query</span>:&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">queryPms</span>:<span class="hljs-number">123</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">  <span class="hljs-comment">&lt;!--app.vue--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">NuxtPage</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">NuxtPage</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">  <span class="hljs-comment">&lt;!--demo3-[id].vue--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>获取的id:&#123;&#123; $route.params.id &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>获取的query参数:&#123;&#123; $route.query.queryPms &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> route = <span class="hljs-title function_">useRoute</span>();</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> id = <span class="hljs-title function_">ref</span>(route.<span class="hljs-property">params</span>.<span class="hljs-property">id</span>);</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> name = <span class="hljs-title function_">ref</span>(route.<span class="hljs-property">params</span>.<span class="hljs-property">name</span>)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">  <span class="hljs-comment">&lt;!-- parent.vue --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>Parent Page<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 子页面的出口--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">NuxtChild</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">NuxtChild</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123;&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">    <span class="hljs-comment">&lt;!-- child.vue --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>Child Page<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123;&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>Nuxt3</code>的目录结构非常重要且比较多，一节很难消化，所以打算分成两节，一起加油吧🚗</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2></li><li><p><a href="https://jspang.com/article/86">技术胖</a></p></li><li><p><a href="https://v3.nuxtjs.org/">Nuxt3</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>Nuxt3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初识Nuxt3</title>
    <link href="/2022/05/27/%E5%88%9D%E8%AF%86Nuxt3/"/>
    <url>/2022/05/27/%E5%88%9D%E8%AF%86Nuxt3/</url>
    
    <content type="html"><![CDATA[<h2 id="🎨前言"><a href="#🎨前言" class="headerlink" title="🎨前言"></a>🎨前言</h2><p>最近公司规模一点点的起来了，领导反馈可以考虑做一个企业官网了🧓，说起来比较简单都是一些静态的资源，但是毕竟是公司官网肯定要有很多的工作去做<code>seo</code>优化，所以就涉及到了技术栈的选型👩‍🔧。</p><h3 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h3><ul><li><a href="https://jz.fkw.com/model/?_ta=9240&kw=252130"><strong>凡科建站</strong></a></li></ul><p>当初打算直接在凡科上选择一个模板，直接就交给运营的同事去弄这些事情了，我们就不参与开发了🧵，但是由于某种原因需要我们自己参与开发🎃。</p><ul><li><a href="https://hexo.io/zh-cn/"><strong>hexo</strong></a></li></ul><p>了解了领导的意思之后发现都是一些静态的页面，所以当初在考虑是否可以用<code>hexo</code>来搭建一下🎨。去<code>hexo</code>官网找了一些主题发现只有这个主题<a href="https://acorn.imaging.xin/">acorn</a>比较适合做企业官网🦺，但是由于主题不够丰富后期扩展也是个麻烦事，就放弃了🎪。</p><ul><li><a href="https://v3.nuxtjs.org/"><strong>Nuxt</strong></a></li></ul><p>因为我们公司用到的技术栈是<code>vue</code>和<code>react</code>但是因为<code>SPA</code>应用这些多是在客户端的应用，不能进行<code>SEO</code>优化（搜索引擎优化），于是就想到了<code>vue ssr</code>(服务端渲染)🥙。 本身对<code>vue ssr</code>的了解也不是很深，这时发现了<code>Nuxt</code>框架打算研究一下🥠，因为之前对<code>Nuxt2</code>的也不太了解🍘，发现官网已经发布了更强大的<code>Nuxt3（beat版）</code>预计6月份就发布正式版了，莫不如先去尝尝鲜🍖。</p><h3 id="Nuxt简介"><a href="#Nuxt简介" class="headerlink" title="Nuxt简介"></a>Nuxt简介</h3><p><code>Nuxt3</code>是使用<code>Vue3</code>发布的<code>SSR</code>框架专注构建您的下一个应用程序，体验混合渲染、强大的数据获取和新功能。<br></p><p>下图不同Nuxt版本对比（引用官网）👇</p><table><thead><tr><th>功能 / 版本</th><th>Nuxt 2</th><th>Nuxt Bridge</th><th>Nuxt 3</th></tr></thead><tbody><tr><td>Vue</td><td>2</td><td>2</td><td>3</td></tr><tr><td>稳定性</td><td>😊 稳定</td><td>😌  半稳定</td><td>😬不稳定</td></tr><tr><td>性能</td><td>🏎 快</td><td>✈️ 更快</td><td>🚀 最快</td></tr><tr><td>Nitro Engine</td><td>❌</td><td>✅</td><td>✅</td></tr><tr><td>ESM support</td><td>🌙 Partial</td><td>👍 Better</td><td>✅</td></tr><tr><td>TypeScript</td><td>☑️ Opt-in</td><td>🚧 Partial</td><td>✅</td></tr><tr><td>组合式api</td><td>❌</td><td>🚧 Partial</td><td>✅</td></tr><tr><td>选项API</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>Components Auto Import</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td><code>&lt;script setup&gt;</code> 语法</td><td>❌</td><td>🚧 Partial</td><td>✅</td></tr><tr><td>自动导入组件</td><td>❌</td><td>✅</td><td>✅</td></tr><tr><td>Webpack</td><td>4</td><td>4</td><td>5</td></tr><tr><td>Vite</td><td>⚠️ Partial</td><td>🚧 Partial</td><td>🚧 Experimental</td></tr><tr><td>Nuxi CLI</td><td>❌ Old</td><td>✅ nuxi</td><td>✅ nuxi</td></tr><tr><td>静态部署</td><td>✅</td><td>✅</td><td>🚧 Experimental</td></tr></tbody></table><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><ul><li><a href="https://nodejs.org/en/download/">NodeJs</a>🍕：版本要大于14.16.0</li><li><a href="https://code.visualstudio.com/">vscode</a>编辑器🥯：提供了丰富的插件</li><li><code>TypeScript Vue</code> 插件🥓：在<code>vscode</code>中的扩展商店中就可以找到对<code>vue3</code>和<code>ts</code>的支持更加完善。</li></ul><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ul><li>创建项目<figure class="highlight csharp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs csharp">npx nuxi <span class="hljs-keyword">init</span> nuxt-app<br></code></pre></div></td></tr></table></figure></li><li>安装依赖 <figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span><br></code></pre></div></td></tr></table></figure><blockquote><p>在安装依赖的过程可能会报以下问题，注意要使用<code>npm/yarn/pnpm</code> 不要使用<code>cnpm</code>我通过<code>cnpm</code>安装了两次都报错了，感觉是依赖包的版本问题，使用<code>yarn</code>就可以了。</p></blockquote></li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e8b76efac39e40ac8414331979d26ba7~tplv-k3u1fbpfcp-zoom-1.image"></p><ul><li>运行项目</li></ul><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">npm <span class="hljs-built_in">run</span> dev <br></code></pre></div></td></tr></table></figure><p>第一次启动可能会报错，无需改动中断后再次启动就没有问题了，速度飞快👇。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/06bc9b7cdafb4ce9a078059ad03475de~tplv-k3u1fbpfcp-zoom-1.image"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/42a575354ddc49c58d2fcb1f2d6768f2~tplv-k3u1fbpfcp-zoom-1.image"></p><ul><li><strong>vscode</strong>查看项目<figure class="highlight clean"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs clean"><span class="hljs-keyword">code</span> nuxt-app<br></code></pre></div></td></tr></table></figure>脚手架安装之后发现目录很干净只是在<code>app.vue</code>中有这样一段话。<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">NuxtWelcome</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></div></td></tr></table></figure><code>NuxtWelcome</code>在哪里定义的，为什么没有引用，突然后我想起来<code>Nuxt</code>是自动引用组件的我用ctrl+鼠标左键点进了定义发现<code>NuxtWelcome</code>是Nuxt内部提供的显示组件。</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/21b396cfbc35403db980e3308118cb7a~tplv-k3u1fbpfcp-zoom-1.image"></p><p>我将<NuxtWelcome />替换成Hello World一个简单的Hello World就出现啦。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Nuxt能从2-&gt;3 就足以证明 Nuxt在服务端渲染还是有一定的定位的，并且开发的方式基本使用过vue都可以上手，希望我没有选错，继续加油。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>Nuxt3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue项目部署404总结🎨</title>
    <link href="/2022/05/19/vue%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2404%E6%80%BB%E7%BB%93/"/>
    <url>/2022/05/19/vue%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2404%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="🎨前言"><a href="#🎨前言" class="headerlink" title="🎨前言"></a>🎨前言</h2><p>不知道你们是不是经常说这样一句话，我本地都是好使的🤐，为什么打包之后就找不到页面呢？为什么找不到静态资源文件呢？为什么找不到public中的文件呢？😧我们会把这三个问题指给运维一口咬定是部署的问题，但其实确实有可能是咱们的问题哦🤦‍♂️</p><p>我们要明白一点，目前现在的开发都是前后端分离的模式🥞，我们每次打包之后的<code>dist</code>的文件夹是部署在<code>nginx</code>上，那就需要我们熟悉一下<code>nginx</code>的<a href="https://juejin.cn/post/6844903684967825421">相关配置</a>🍮</p><h3 id="部署在域名的根路径上"><a href="#部署在域名的根路径上" class="headerlink" title="部署在域名的根路径上"></a>部署在域名的根路径上</h3><p><code>Vue-cli</code>是默认您部署在域名的根路径，<code>publicPath</code>无需设置</p><ul><li><code>vue.config.js</code><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; defineConfig &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@vue/cli-service&#x27;</span>)<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">transpileDependencies</span>: <span class="hljs-literal">true</span>,<br>&#125;)<br></code></pre></div></td></tr></table></figure></li><li><code>nginx.conf</code>配置文件关键内容<figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span>  localhost;<br>    <span class="hljs-comment">#charset koi8-r;</span><br>    <span class="hljs-comment">#access_log  logs/host.access.log  main;</span><br>    <span class="hljs-section">location</span> / &#123;<br>        <span class="hljs-comment"># 打包之后的文件路径</span><br>        <span class="hljs-attribute">root</span>   E:\hsproject\mayor-daping-web\dist;<br>        <span class="hljs-attribute">try_files</span> <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ /index.html;<br>        <span class="hljs-attribute">index</span>  index.html index.htm;<br>    &#125;<br>    <span class="hljs-attribute">error_page</span>   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /50x.html;<br>    <span class="hljs-section">location</span> = /50x.html &#123;<br>        <span class="hljs-attribute">root</span>   html;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="部署在域名的子路径上"><a href="#部署在域名的子路径上" class="headerlink" title="部署在域名的子路径上"></a>部署在域名的子路径上</h3></li></ul><p>如果应用被部署在一个子路径上🥧，你就需要用这个选项指定这个子路径🍤。例如，如果你的应用被部署在<code>https://www.my-app.com/my-app/</code>，则设置 <code>publicPath</code> 为 <code>/my-app/</code>。</p><ul><li>vue.config.js<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; defineConfig &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@vue/cli-service&#x27;</span>)<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">transpileDependencies</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">publicPath</span>: <span class="hljs-string">&quot;/my-app&quot;</span>,<br>&#125;)<br></code></pre></div></td></tr></table></figure></li><li>nginx关键配置文件<figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span>  localhost;<br>    <span class="hljs-comment">#charset koi8-r;</span><br>    <span class="hljs-comment">#access_log  logs/host.access.log  main;</span><br>    <span class="hljs-section">location</span> /my-app &#123;<br>        <span class="hljs-comment"># 打包之后的文件路径</span><br>        <span class="hljs-attribute">root</span>   E:\hsproject\mayor-daping-web\dist;<br>        <span class="hljs-attribute">try_files</span> <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ /index.html;<br>        <span class="hljs-attribute">index</span>  index.html index.htm;<br>    &#125;<br>    <span class="hljs-attribute">error_page</span>   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /50x.html;<br>    <span class="hljs-section">location</span> = /50x.html &#123;<br>        <span class="hljs-attribute">root</span>   html;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>重启<code>nginx </code>访问<code>ip:port/my-app</code>发现返回的界面不是我的项目，可能其他小伙伴有可能是404👇。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d6f0f164f15d4ad392c333f863209d80~tplv-k3u1fbpfcp-zoom-1.image"></li></ul><p>针对这种问题基本上就是感觉路径没有找对需要我看了一下<code>nginx</code> <code>location</code>对应的文档发现了端倪</p><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-comment">#若用alias的话，则访问127.0.0.1/img/目录里面的文件时，ningx会自去/var/www/image/目录找文件</span><br><span class="hljs-section">location</span> /img/ &#123;<br>    <span class="hljs-attribute">alias</span> /var/www/image/;<br>&#125;<br><br><span class="hljs-comment">#若用root的话，则访问/127.0.0.1/img/目录下的文件时，nginx会自动去/var/www/image/img/目录下找文件</span><br><span class="hljs-section">location</span> /img/ &#123;<br>    <span class="hljs-attribute">root</span> /var/www/image;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>因此有两种解决方案 </p><ul><li>1.将root替换成alias </li><li>2.在dist文件夹中增加my-app目录将打包的内容全部拷贝到my-app中</li></ul></blockquote><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d5cc249ce3c84ba1bf3c6c84929daf24~tplv-k3u1fbpfcp-zoom-1.image"></p><p>但是上面这种情况需要在<code>vue.config.js</code>中指定一下子路径的名称🥠，如果项目是我们自己部署就没关系了🍳，但是如果是后台部署的话出现<code>404</code>找不到文件的情况增加沟通的时间😌。</p><h3 id="publicPath设置成相对路径部署在域名的子路径上"><a href="#publicPath设置成相对路径部署在域名的子路径上" class="headerlink" title="publicPath设置成相对路径部署在域名的子路径上"></a>publicPath设置成相对路径部署在域名的子路径上</h3><p>为了解决上面的问题我们可以把<code>publicPath</code>设置成相对路径<code>./</code>😊这样我们就不需要去管<code>nginx</code>部署在哪个目录下啦.👈。但是当我以为我要有所突破的时候测试部署的时候出现了这个问题控制台没有报错，页面。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/30a728331e034cdeb0d533ab4883b364~tplv-k3u1fbpfcp-zoom-1.image"></p><p>可能是因为我使用的是<code>histoty</code>路由可能会对其有些影响🤔，于是我将路由模式修改为<code>hash</code>重新打包，部署成功🍺。</p><h3 id="publicPath设置成相对路径部署在域名的根路径上"><a href="#publicPath设置成相对路径部署在域名的根路径上" class="headerlink" title="publicPath设置成相对路径部署在域名的根路径上"></a>publicPath设置成相对路径部署在域名的根路径上</h3><p>当<code>history</code>路由部署在根路径的时候是没有问题的。</p><blockquote><p>当我在官网看到了这句话:👇<br /><br>相对路径的 <code>publicPath</code> 有一些使用上的限制。在以下情况下，应当<strong>避免使用相对publicPath</strong>也就是说history路由的时候尽量不要使用相对路径:</p><ul><li>当使用基于 <code>HTML5</code> <code>history.pushState</code> 的路由时🎈；</li><li>当使用 <code>pages</code> 选项构建多页面应用时🎈；</li></ul></blockquote><h3 id="public中的文件"><a href="#public中的文件" class="headerlink" title="public中的文件"></a>public中的文件</h3><p>任何放置在 <code>public</code> 文件夹的静态资源都会被简单的复制，而不经过 <code>webpack</code>。因为我们有时可能会修改对应的接口地址以及一些配置，所有我们不想让某些文件参与打包，方便我们在服务器上直接修改配置</p><ul><li><code>public/configUrl.js</code><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">configInfo</span> = &#123;<br>  <span class="hljs-attr">serverUrl</span>: <span class="hljs-string">&#x27;http://ip:port&#x27;</span>,<br>&#125;;<br></code></pre></div></td></tr></table></figure></li><li>在index.html中引用configUrl.js<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 这部分要使用相对路径 如果使用的是绝对路径在部署到域名的子路径上会找不到该文件除非手动修改引用地址 --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./configUrl.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li>项目中使用<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">baseUrl = <span class="hljs-variable language_">window</span>.<span class="hljs-property">configInfo</span>.<span class="hljs-property">xxx</span><br></code></pre></div></td></tr></table></figure></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>当初确实没有想到<strong>路由模式</strong>,<strong>配置publicPath</strong>,<strong>nginx配置</strong>三者来共同定位这个问题👓，希望在看到这篇文章的时候，不会在遇到部署404的情况🧶。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://cli.vuejs.org/zh/config/#publicpath">publicPath</a></li><li><a href="https://blog.csdn.net/qq_42584411/article/details/105428926">root alias区别</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>让你的博客不在孤单🎨</title>
    <link href="/2022/05/18/%E8%AE%A9%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%B8%8D%E5%9C%A8%E5%AD%A4%E5%8D%95%F0%9F%8E%A8/"/>
    <url>/2022/05/18/%E8%AE%A9%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%B8%8D%E5%9C%A8%E5%AD%A4%E5%8D%95%F0%9F%8E%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>个人博客一定要够酷，够炫，才能显得更牛🍺，当然内容才是核心竞争力，再好的皮囊没有肉也是一堆空壳。🍳<br>如果你是使用<code>hexo</code>+<code>githubpages</code>主题，可以展开看看哦<a href="https://drinkwd.github.io/">博客地址</a>🍜。</p><h3 id="2d板娘"><a href="#2d板娘" class="headerlink" title="2d板娘"></a>2d板娘</h3><p>之前经常在其他的人的博客上看到一个萌萌的小妹子在右下角🥐，抱着好奇，想要在自己的博客中也把他加入进来，接下来就说一下集成的步骤🍤。</p><ul><li>下载代码</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/33e3c296e4a24e2897568d8fbf6af27a~tplv-k3u1fbpfcp-zoom-1.image"></p><ul><li>将下载之后的代码解压之后放在博客的<code>source</code>文件夹中</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0da04f4cc7ef4f2a88270756db77fba1~tplv-k3u1fbpfcp-zoom-1.image"></p><ul><li><p>修改<code>source/live2d-widget/autoload.js</code>中的<code>live2d_path</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 将下面的live2d_path替换成本地连接</span><br><span class="hljs-comment">// const live2d_path = &quot;https://cdn.jsdelivr.net/gh/drinkwd/live2d-widget@latest/&quot;;</span><br><span class="hljs-keyword">const</span> live2d_path = <span class="hljs-string">&quot;/live2d-widget/&quot;</span>;<br></code></pre></div></td></tr></table></figure></li><li><p>找到<code>fluid</code>主题的配置文件<code>_config.fluid.yml</code>在文件中搜索<code>custom_js</code>和<code>custom_css</code>如果没有就增加这两个变量👇</p></li></ul><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">custom_js:</span> <span class="hljs-string">&#x27;/live2d-widget/autoload.js&#x27;</span><br><span class="hljs-attr">custom_css:</span> <span class="hljs-string">&#x27;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/css/all.min.css&#x27;</span><br></code></pre></div></td></tr></table></figure><ul><li>重启博客 hexo s</li></ul><p>左侧的小公主就出现啦，还自带了右侧的工具栏自己去看看什么功能哦🍮。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/64123d3b9d7b4c6589e728bd270062e9~tplv-k3u1fbpfcp-zoom-1.image"></p><h3 id="文章加密"><a href="#文章加密" class="headerlink" title="文章加密"></a>文章加密</h3><p>当你有一些文章不想其他人看到的时候可以使用该插件。</p><ul><li><a href="https://github.com/D0n9X1n/hexo-blog-encrypt/blob/master/ReadMe.zh.md">安装hexo-blog-encrypt</a><figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada">npm install <span class="hljs-comment">--save hexo-blog-encrypt</span><br></code></pre></div></td></tr></table></figure></li><li>在文章的开头部分增加如下内容👇<figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">Hello</span> <span class="hljs-string">World</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2016-03-30 21:12:21</span><br><span class="hljs-attr">password:</span> <span class="hljs-string">hello</span> <span class="hljs-comment"># 密码</span><br><span class="hljs-attr">abstract:</span> <span class="hljs-string">这篇文章被人偷走了，您可能需要输入密码才能找回.</span> <span class="hljs-comment"># 摘要</span><br><span class="hljs-attr">message:</span> <span class="hljs-string">您好,</span> <span class="hljs-string">这里需要密码，按Enter键确认。</span> <span class="hljs-comment"># 提示内容</span><br><span class="hljs-attr">wrong_pass_message:</span> <span class="hljs-string">抱歉,</span> <span class="hljs-string">这个密码看着不太对,</span> <span class="hljs-string">请再试试.</span> <span class="hljs-comment"># 输入错误提示</span><br><span class="hljs-meta">---</span><br></code></pre></div></td></tr></table></figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7d0e7482d883454ebd32d46befad0230~tplv-k3u1fbpfcp-zoom-1.image"></li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3f65004d458949a08952cdd6bcbaa484~tplv-k3u1fbpfcp-zoom-1.image"></p><ul><li>更详细的配置看<a href="https://github.com/D0n9X1n/hexo-blog-encrypt/blob/master/ReadMe.zh.md">这里</a>👈</li></ul><h3 id="Aplayer"><a href="#Aplayer" class="headerlink" title="Aplayer"></a>Aplayer</h3><p>看文章怎么能少了音乐的，跟随我的脚步给你的博客增加一个播放器吧🎨，<code>hexo</code>提供了注入器的功能在编写注入代码🛒。</p><ul><li><p>在博客的根目录下创建<code>scripts</code>文件夹，然后在里面任意命名创建一个 <code>js</code> 文件即可，编写注入代码😙</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">injector</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;body_end&#x27;</span>, <span class="hljs-string">`</span><br><span class="hljs-string">  &lt;div id=&quot;aplayer&quot;&gt;&lt;/div&gt;</span><br><span class="hljs-string">  &lt;link defer rel=&quot;stylesheet&quot; href=&quot;https://cdn.staticfile.org/aplayer/1.10.1/APlayer.min.css&quot; /&gt;</span><br><span class="hljs-string">  &lt;script src=&quot;https://cdn.staticfile.org/aplayer/1.10.1/APlayer.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-string">  &lt;script defer src=&quot;/js/music.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-string">`</span>);<br></code></pre></div></td></tr></table></figure><p>在<code>source/js/music.js</code>中增加如下内容（需要新建<code>js</code>文件）</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">!(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> oldLoadAp = <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span>;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      oldLoadAp &amp;&amp; <span class="hljs-title function_">oldLoadAp</span>();<br>  <br>      <span class="hljs-keyword">new</span> <span class="hljs-title class_">APlayer</span>(&#123;<br>        <span class="hljs-attr">container</span>: <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;aplayer&#x27;</span>),<br>        <span class="hljs-attr">fixed</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">autoplay</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">loop</span>: <span class="hljs-string">&#x27;all&#x27;</span>,<br>        <span class="hljs-attr">order</span>: <span class="hljs-string">&#x27;random&#x27;</span>,<br>        <span class="hljs-attr">theme</span>: <span class="hljs-string">&#x27;#b7daff&#x27;</span>,<br>        <span class="hljs-attr">preload</span>: <span class="hljs-string">&#x27;none&#x27;</span>,<br>        <span class="hljs-attr">audio</span>: [<br>          &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;song1&#x27;</span>, <span class="hljs-comment">// 音频名称</span><br>            <span class="hljs-attr">artist</span>: <span class="hljs-string">&#x27;artist1&#x27;</span>, <span class="hljs-comment">// 音频艺术家</span><br>            <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/songs/song1.mp3&#x27;</span>, <span class="hljs-comment">// 音频链接</span><br>            <span class="hljs-attr">cover</span>: <span class="hljs-string">&#x27;/img/cover.jpg&#x27;</span> <span class="hljs-comment">// 音频封面</span><br>          &#125;<br>        ]<br>      &#125;);<br>    &#125;<br>  &#125;)();<br></code></pre></div></td></tr></table></figure><p>你会发现播放器与咱们的板娘位置重叠了，我们修改一下播放器的位置🎑<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2971f420b40f4dc698acc8d533829002~tplv-k3u1fbpfcp-zoom-1.image"></p></li><li><p>找到<code>waifu.css</code>进行如下修改将以下样式替换成下面的代码🍱。</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-id">#waifu-toggle</span> &#123;<br><span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fa0</span>;<br><span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;<br><span class="hljs-attribute">bottom</span>: <span class="hljs-number">66px</span>;<br><span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br><span class="hljs-attribute">cursor</span>: pointer;<br><span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;<br><span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br><span class="hljs-attribute">margin-right</span>: -<span class="hljs-number">100px</span>;<br><span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span> <span class="hljs-number">2px</span> <span class="hljs-number">5px</span> <span class="hljs-number">5px</span>;<br><span class="hljs-attribute">position</span>: fixed;<br><span class="hljs-attribute">transition</span>:margin-right <span class="hljs-number">1s</span>;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">60px</span>;<br><span class="hljs-attribute">writing-mode</span>: vertical-lr;<br>&#125;<br><br><span class="hljs-selector-id">#waifu-toggle</span><span class="hljs-selector-class">.waifu-toggle-active</span> &#123;<br><span class="hljs-attribute">margin-right</span>: -<span class="hljs-number">50px</span>;<br>&#125;<br><br><span class="hljs-selector-id">#waifu-toggle</span><span class="hljs-selector-class">.waifu-toggle-active</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br><span class="hljs-attribute">margin-right</span>: -<span class="hljs-number">30px</span>;<br>&#125;<br><br><span class="hljs-selector-id">#waifu</span> &#123;<br><span class="hljs-attribute">bottom</span>: -<span class="hljs-number">1000px</span>;<br><span class="hljs-attribute">right</span>: <span class="hljs-number">60px</span>;<br><span class="hljs-attribute">line-height</span>: <span class="hljs-number">0</span>;<br><span class="hljs-attribute">margin-bottom</span>: -<span class="hljs-number">10px</span>;<br><span class="hljs-attribute">position</span>: fixed;<br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(<span class="hljs-number">3px</span>);<br><span class="hljs-attribute">transition</span>: transform .<span class="hljs-number">3s</span> ease-in-out, bottom <span class="hljs-number">3s</span> ease-in-out;<br><span class="hljs-attribute">z-index</span>: <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p><a href="https://zhuanlan.zhihu.com/p/266060655">获取网易音乐外链</a></p><blockquote><p>有一个很难以接受的问题就是<code>fluid</code>目前是不支持<code>pjax</code>也就是说我们每次在切换文章的时候音乐会停止播放🥟。但是为了满足我的私欲，我还是加上🥠了。</p></blockquote></li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/048a9a1189e14e93b6495cbf9c212ebf~tplv-k3u1fbpfcp-zoom-1.image"></p><h3 id="加载网页速度"><a href="#加载网页速度" class="headerlink" title="加载网页速度"></a>加载网页速度</h3><p>这个简直太让人头痛了，如果网页加载的过慢就会导致🥞，别人刚进入到你的博客，就会退出，根本没人可以忍受慢的网址，我也一样😌。</p><ul><li>在博客目录下载<a href="https://github.com/chenzhutian/hexo-all-minifier">Hexo-all-minifier</a></li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cea1b89a991c444d82293e955f4b2240~tplv-k3u1fbpfcp-zoom-1.image"></p><ul><li>找到<code>hexo</code>的配置文件<code>_config.yml</code>增加如下内容👇</li></ul><p>这样每次在本地运行和上传的时候都会进行<code>html</code>,<code>css</code>,<code>js</code>压缩🤐</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">all_minifier:</span> <span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure><ul><li>问题报错<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1b23fa57e01c4054b0b96309bf62d222~tplv-k3u1fbpfcp-zoom-1.image"></li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4d0ac189d216419c99ce0ccc10505306~tplv-k3u1fbpfcp-zoom-1.image"></p><blockquote><p>不同平台安装这个包，可能会有点问题，我在家里的机器上装的时候就顺风顺水🛴，在公司的电脑上安装的时候就遇到了上面面的问题，<a href="https://archive.vincent0700.com/2019/12/31/034_Usage_of_hexo-all-minifier_copy/">解决方案</a> 执行如下命令👇</p></blockquote><figure class="highlight coffeescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> install jpegtran-bin<br><span class="hljs-built_in">npm</span> rebuild jpegtran-bin<br></code></pre></div></td></tr></table></figure><ul><li>重启项目</li></ul><p>运行的时候就会看到一些图片已经被压缩了。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b945916b49004e5399501658ce88550c~tplv-k3u1fbpfcp-zoom-1.image"></p><h3 id="网站seo优化-慎读，因为我自己也不太懂"><a href="#网站seo优化-慎读，因为我自己也不太懂" class="headerlink" title="网站seo优化(慎读，因为我自己也不太懂)"></a>网站seo优化(慎读，因为我自己也不太懂)</h3><p><code>hexo</code>和<code>fluid</code>的主题已经帮我们做了一些工作了🙆‍♂️，但是如果我们想要让更多的人看到我们的博客，还是需要添加站点地图🥧，搜索引擎是通过（<code>sitemap</code>）去抓取可供爬取的网页的🚖，虽然还是百度用的人比较多但是我发现在百度我从来就没有搜索到<code>githubpage</code>的相关内容，索性就不挣扎啦🍳。</p><ol><li>下载sitemap生成工具<figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> hexo-generator-sitemap —save<br></code></pre></div></td></tr></table></figure></li><li>配置_config.yml<figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-comment"># sitemap</span><br><span class="hljs-attr">sitemap:</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">sitemap.xml</span><br></code></pre></div></td></tr></table></figure>重新执行hexo g的时候就会在public下生成sitemap.xml</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/efacbe20c9e043969e589cc0579d01b3~tplv-k3u1fbpfcp-zoom-1.image"></p><p>博客的sitemap是为了告诉了搜索引擎可以爬取的内容，但是搜索引擎怎么知道你就是这个网站的主人呢？</p><ul><li><p><a href="https://search.google.com/search-console/sitemaps">谷歌验证工具</a><br>在下方的表格中输入你的网站例如我的<code>https://drinkwd.github.io/</code><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/12e23fae500645728abd7a5f90d47635~tplv-k3u1fbpfcp-zoom-1.image"><br>点击继续之后会让你选择验证方式，由于我已经验证通过了忘记截图了只能说一下流程。</p></li><li><p>使用html的验证方式，下载html文件</p></li><li><p>将下载的html文件放在博客的public文件夹中（如果没有public文件夹需要使用hexo g生成一下）</p></li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7d4e0524c2d24a10964639a9d648dc09~tplv-k3u1fbpfcp-zoom-1.image"></p><ul><li>运行hexo d（目的就是告诉谷歌我已经把你给我的地址上传到我的博客了，我就是这个网站的主人）</li><li>点击验证进行验证，不出意外一会出现一下以下界面</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ede526c5e0474951bcc174506e03e925~tplv-k3u1fbpfcp-zoom-1.image"></p><p>此时还需要上传站点地图<code>sitemap</code>到搜索引擎，下次让搜索引擎的爬虫来的光顾的时候就可以通过这个站点地图来爬取了相应的链接</p><ul><li>再次访问<a href="https://search.google.com/search-console/sitemaps">谷歌验证工具</a>就会是如下界面，将生成的<code>sitemap.xml</code>的文件路径放在这里就可以，因为我是在public下生成<code>sitemap.xml</code>，所以我就填写<code>sitemap.xml</code>就可以注意不需要填写<code>public</code><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/889a94347b184d0a97982df75bd96da0~tplv-k3u1fbpfcp-zoom-1.image"><br>提交成功之后过一段时间（一段时间可能会很长很长，我现在还在等）就可以发现博客被谷歌收录了。</li></ul><h3 id="部署Gitee"><a href="#部署Gitee" class="headerlink" title="部署Gitee"></a>部署Gitee</h3><p>无论怎么优化如果不<code>fq</code>还是很难访问到博客的😍，之前是在github中部署的速度感人，于是我打算在<code>gitee</code>上也部署一套博客😗，之前看大家都部署在<code>coding</code>中但是最近发现<code>coding</code>好像收费了，白嫖党的生活过的有滋有味🤗。</p><ul><li>在<code>gitee</code>中创建仓库，路径和用户名保一致</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eb084bd9a6164dc59f5c75d5a3bf9de5~tplv-k3u1fbpfcp-zoom-1.image"></p><ul><li>创建成功获取仓库链接</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b2aeede2b6e74bd4a12bd44c4cc8d102~tplv-k3u1fbpfcp-zoom-1.image"></p><ul><li>修改<code>hexo</code>配置文件（注意缩进，如果缩进不正确会提交失败）<figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">xxxx</span> <span class="hljs-comment"># github地址</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">xxxx</span> <span class="hljs-comment"># gitee地址</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></div></td></tr></table></figure></li><li>开启gitee page服务（如果没有实名认证需要进行实名认证）</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7d1dce76e1994442ae238c90227a081c~tplv-k3u1fbpfcp-zoom-1.image"></p><ul><li><p>如果没有实名认证的话需要进行一下实名认证<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d6c3445bfb08450b905221c78cfe6ab5~tplv-k3u1fbpfcp-zoom-1.image"></p></li><li><p>认证结束之后就可以看到gitee对应的博客地址了</p></li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dc0cb3dd414a42ee86fe75940c833b4a~tplv-k3u1fbpfcp-zoom-1.image"></p><h3 id="网站CDN加速"><a href="#网站CDN加速" class="headerlink" title="网站CDN加速"></a>网站CDN加速</h3><p>当我把博客部署到<code>gitee</code>之后发现国内的访问还是比较慢😣，我很难过的打开了控制台我发现了端倪有很多资源在国内访问都是超时的😮，于是我开始修改<code>cdn</code>资源😛。主要参考了<a href="http://www.julydate.com/post/60859300/">这篇文章</a>提供的思路。下面是我修改的资源👇</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">static_prefix:</span><br>  <span class="hljs-comment"># 内部静态</span><br>  <span class="hljs-comment"># Internal static</span><br>  <span class="hljs-attr">internal_js:</span> <span class="hljs-string">/js</span><br>  <span class="hljs-attr">internal_css:</span> <span class="hljs-string">/css</span><br>  <span class="hljs-attr">internal_img:</span> <span class="hljs-string">/img</span><br><br>  <span class="hljs-comment"># 图标库，包含了大量社交类图标，主题依赖的不包含在内，因此可自行修改，详见 https://hexo.fluid-dev.com/docs/icon/</span><br>  <span class="hljs-comment"># Icon library, which includes many social icons, does not include those theme dependent, so your can modify link by yourself. See: https://hexo.fluid-dev.com/docs/en/icon/</span><br>  <span class="hljs-attr">iconfont:</span> <span class="hljs-string">//at.alicdn.com/t/font_1736178_kmeydafke9r.css</span><br>  <span class="hljs-comment"># https://cdn.jsdelivr.net/npm/anchor-js@4.3.0/ 原有cdn</span><br>  <span class="hljs-attr">anchor:</span> <span class="hljs-string">https://lf6-cdn-tos.bytecdntp.com/cdn/expire-1-M/anchor-js/4.3.0/</span><br><br>  <span class="hljs-comment"># https://cdn.jsdelivr.net/npm/github-markdown-css@4.0.0/ 原有cdn</span><br><br>  <span class="hljs-attr">github_markdown:</span> <span class="hljs-string">https://cdn.staticfile.org/github-markdown-css/4.0.0/</span><br><br>  <span class="hljs-comment"># https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/ 原有cdn 外网快，内网加载不通</span><br>  <span class="hljs-attr">jquery:</span> <span class="hljs-string">http://cdn.staticfile.org/jquery/3.5.1/</span><br><br>  <span class="hljs-comment"># https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/ 原有cdn 外网快，内网加载不通</span><br><br>  <span class="hljs-attr">bootstrap:</span> <span class="hljs-string">https://cdn.staticfile.org/bootstrap/4.5.3/</span><br><br>  <span class="hljs-comment"># https://cdn.jsdelivr.net/npm/highlight.js@10.4.0/</span><br><br>  <span class="hljs-attr">highlightjs:</span> <span class="hljs-string">https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/highlight.js/10.4.0/</span><br><br>  <span class="hljs-comment"># https://cdn.jsdelivr.net/npm/prismjs@1.22.0/ </span><br><br>  <span class="hljs-attr">prismjs:</span> <span class="hljs-string">https://cdn.staticfile.org/prism/1.22.0/</span><br><br>  <span class="hljs-comment"># https://cdn.staticfile.org/tocbot/4.12.0/tocbot.min.css</span><br>  <span class="hljs-attr">tocbot:</span> <span class="hljs-string">https://cdn.staticfile.org/tocbot/4.12.0/</span><br><br>  <span class="hljs-comment"># https://cdn.jsdelivr.net/npm/typed.js@2.0.11/lib/</span><br>  <span class="hljs-attr">typed:</span> <span class="hljs-string">https://cdn.staticfile.org/typed.js/2.0.12/</span><br><br>  <span class="hljs-comment"># https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@3.5.7/dist/ </span><br>  <span class="hljs-attr">fancybox:</span> <span class="hljs-string">https://cdn.staticfile.org/fancybox/3.5.7/</span><br><br>  <span class="hljs-comment"># https://cdn.jsdelivr.net/npm/nprogress@0.2.0/</span><br>  <span class="hljs-attr">nprogress:</span> <span class="hljs-string">https://cdn.staticfile.org/nprogress/0.2.0/</span><br><br>  <span class="hljs-comment">#  https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/ </span><br>  <span class="hljs-attr">mathjax:</span> <span class="hljs-string">https://lf9-cdn-tos.bytecdntp.com/cdn/expire-1-M/mathjax/3.1.2/es5/</span><br><br>  <span class="hljs-comment"># https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/ </span><br>  <span class="hljs-attr">katex:</span> <span class="hljs-string">https://cdn.staticfile.org/KaTeX/0.12.0/</span><br><br>  <span class="hljs-attr">busuanzi:</span> <span class="hljs-string">https://busuanzi.ibruce.info/busuanzi/2.3/</span><br><br>  <span class="hljs-comment"># https://cdn.jsdelivr.net/npm/clipboard@2.0.6/dist/ </span><br>  <span class="hljs-attr">clipboard:</span> <span class="hljs-string">https://cdn.staticfile.org/clipboard.js/2.0.6/</span><br><br>  <span class="hljs-comment"># https://cdn.jsdelivr.net/npm/mermaid@8.8.3/dist/ </span><br>  <span class="hljs-attr">mermaid:</span> <span class="hljs-string">https://lf26-cdn-tos.bytecdntp.com/cdn/expire-1-M/mermaid/8.8.3/</span><br><br>  <span class="hljs-comment"># https://cdn.jsdelivr.net/npm/valine@1.4.14/dist/</span><br>  <span class="hljs-attr">valine:</span> <span class="hljs-string">https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/valine/1.4.14/</span><br><br>  <span class="hljs-attr">waline:</span> <span class="hljs-string">https://cdn.jsdelivr.net/npm/@waline/client@0.4.2/dist/</span><br><br>  <span class="hljs-attr">gitalk:</span> <span class="hljs-string">https://cdn.jsdelivr.net/npm/gitalk@1.7.0/dist/</span><br><br>  <span class="hljs-attr">disqusjs:</span> <span class="hljs-string">https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/</span><br><br>  <span class="hljs-attr">twikoo:</span> <span class="hljs-string">https://cdn.jsdelivr.net/npm/twikoo@0.1.15/dist/</span><br></code></pre></div></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>提高<code>githubpage</code>个人博客的美观程度比较容易，但是提升流量确实是很难很难🥐，就拿我现在的<a href="https://drinkwd.github.io/">博客</a>来说可以说是无人问津了🍜，如果不<code>fq</code>还有可能会访问失败，因为自己对<code>seo</code>的优化也不是很了解🤦‍♂️，如果有大佬可以提高这种个人博客的访问速度👼，以及流量欢迎来找我指点江山呀！🙆‍♂️</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://archive.vincent0700.com/2019/12/31/034_Usage_of_hexo-all-minifier_copy/">hexo-all-minifier</a></p><p><a href="https://hexo.fluid-dev.com/posts/hexo-injector/">板娘</a></p><p><a href="https://juejin.cn/post/6844904131266609165">hexo seo 优化</a></p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码人生</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>请求的那些事🙆‍♂️</title>
    <link href="/2022/05/17/%E8%AF%B7%E6%B1%82%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <url>/2022/05/17/%E8%AF%B7%E6%B1%82%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="前言💕"><a href="#前言💕" class="headerlink" title="前言💕"></a>前言💕</h2><ul><li><strong>前端</strong>🤦‍♂️：你的接口又报<code>400</code>了。</li><li><strong>后端</strong>😡：我的接口没问题，<code>postman</code>请求都是好使的，肯定是你传参的问题。</li><li><strong>前端</strong>🤷‍♀️:你出来,咱俩掰扯掰扯🤜。</li><li><strong>后端</strong>🕵️‍♀️：来来来🤛。</li></ul><p>拳脚相加的过程中问题解决了😅。上面的问题在工作当中肯定特别容易遇到，都是沟通上的问题今天就简单来说说，<strong>前端请求入参</strong>和<strong>后台接收参数</strong>🤞，让后端不在针对你🤣。</p><h2 id="前期准备🎶"><a href="#前期准备🎶" class="headerlink" title="前期准备🎶"></a>前期准备🎶</h2><p>在工作当中用的最多的请求方式应该就是<code>get</code>或者<code>post</code>了😜,我们先下载<a href="https://www.postman.com/downloads/">postman</a>或者<a href="https://www.apifox.cn/?utm_source=google_ads&gclid=Cj0KCQjw4PKTBhD8ARIsAHChzRLi_i948TjbLH-nk4ynjm_uwUdMpv1o_5HBtA3tQ_6Sy6b60k9-OvwaAvOnEALw_wcB">apifox</a>你不是说你用<code>psotman</code>发请求吗，我就按照<code>postman</code>的形式来模拟前端请求😉。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/18823d1cb98840689913190023f30d37~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="操练起来🏓"><a href="#操练起来🏓" class="headerlink" title="操练起来🏓"></a>操练起来🏓</h2><h3 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a><strong>GET请求</strong></h3><p>一般<code>GET</code>请求的传参是把参数包含在<code>URL</code>中。</p><ul><li>1.浏览器当前的实现是不允许<code>get</code>发送<code>body</code>,但后端应用可以发送。比如<code>nodejs</code>或<code>postman</code>。</li><li>2.特殊情况可以用后端服务转发一下, 因为前端不能使用<code>get</code>方法从浏览器里发送<code>body</code>。</li><li>3.<code>get</code>请求携带参数我们都采用<code>params</code>传参。</li></ul><h4 id="postman中发起一个带参数的get请求"><a href="#postman中发起一个带参数的get请求" class="headerlink" title="postman中发起一个带参数的get请求"></a><code>postman</code>中发起一个带参数的<code>get</code>请求</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0b6f038450c44f4b821563dee645166e~tplv-k3u1fbpfcp-zoom-1.image"><br>你可以看到我在<code>url</code>中拼接了参数但是下方的<code>params</code>中自动增加了<code>key</code>和<code>value</code>不管你信不信🤔,但是确实他是自动增加的👀，如果在<code>params</code>中拼写参数，<code>url</code>也会自动增加对应的<code>key</code>和<code>value</code>👏。</p><h4 id="在axios中模拟postman发送GET请求"><a href="#在axios中模拟postman发送GET请求" class="headerlink" title="在axios中模拟postman发送GET请求"></a>在<code>axios</code>中模拟<code>postman</code>发送<code>GET</code>请求</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 第一种方式</span><br>axios<br>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/api/wpfk/getEnterpriseInfo&#x27;</span>,<br>&#123;<br>  <span class="hljs-attr">params</span>:&#123;<br>      <span class="hljs-attr">qymc</span>:<span class="hljs-string">&quot;北京星巴克咖啡有限公司大庆万达店&quot;</span><br>  &#125;<br>&#125;)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>)&#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>&#125;)<br><span class="hljs-comment">// 第二种方式,多个参数通过&amp;连接 例:a=1&amp;b=2</span><br>axios<br>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/api/wpfk/getEnterpriseInfo?qymc=北京星巴克咖啡有限公司大庆万达店&#x27;</span>,<br>&#123;<br>  <span class="hljs-attr">params</span>:&#123;<br>     <br>  &#125;<br>&#125;)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>)&#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>&#125;)<br></code></pre></div></td></tr></table></figure><p>因为涉及到跨域问题,我需要在<code>vue.config.js</code>中做一个代理。</p><ul><li><code>vue.config.js</code><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; defineConfig &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@vue/cli-service&#x27;</span>)<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">transpileDependencies</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-comment">// 当访问/api/xxx时会被代理到127.0.0.1:3000/xxx</span><br>    <span class="hljs-attr">proxy</span>: &#123;<br>      <span class="hljs-string">&#x27;/api&#x27;</span>: &#123;<br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://127.0.0.1:3000/&#x27;</span>,<br>        <span class="hljs-attr">pathRewrite</span>: &#123;<span class="hljs-string">&#x27;^/api&#x27;</span> : <span class="hljs-string">&#x27;&#x27;</span>&#125;, <br>        <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">secure</span>: <span class="hljs-literal">false</span>,<br>      &#125;,<br>    &#125;<br>  &#125;<br>&#125;)<br><br></code></pre></div></td></tr></table></figure>如果后端不知道怎么接这些参数你告诉他可以下岗啦🤷‍♀️，我把我熟悉的列在下面，如果你们也是用以下语言做后台，可以直接甩给他😘。</li></ul><h4 id="nodeJs-express框架接收GET参数"><a href="#nodeJs-express框架接收GET参数" class="headerlink" title="nodeJs express框架接收GET参数"></a><code>nodeJs</code> <code>express</code>框架接收<code>GET</code>参数</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 第一步: 导入express</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-comment">// 第二步: 创建web服务器</span><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/wpfk/getEnterpriseInfo&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">query</span>)<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Hello world.&#x27;</span>)<br>&#125;)<br><span class="hljs-comment">// 第三步: 启动服务器</span><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-function">()=&gt;</span>&#123;<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-string">&#x27; 300服务启动了&#x27;</span> )<br> &#125;)<br></code></pre></div></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1a5db03130f848a7b87c9bf4e78b556b~tplv-k3u1fbpfcp-zoom-1.image"></p><h4 id="python-flask框架接收GET参数"><a href="#python-flask框架接收GET参数" class="headerlink" title="python flask框架接收GET参数"></a><code>python</code> <code>flask</code>框架接收<code>GET</code>参数</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,request<br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/wpfk/getEnterpriseInfo&#x27;</span>,methods=[<span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&quot;POST&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-comment"># 接收get请求参数</span><br>    params1 = request.args.get(<span class="hljs-string">&quot;qymc&quot;</span>)<br>    params2 = request.values.get(<span class="hljs-string">&quot;qymc&quot;</span>)<br>    <span class="hljs-built_in">print</span>(params1,params2)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;h1&gt;Hello World&lt;/h1&gt;&#x27;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run()<br></code></pre></div></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f8c299479e91447f94632900815ed036~tplv-k3u1fbpfcp-zoom-1.image"></p><h3 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a><strong>POST请求</strong></h3><p><code>POST</code>请求的消息主体放在<code>body</code>中🕵️‍♀️，服务端根据请求头中的<code>Content-Type</code>字段来获取消息主体的编码⽅式，进⽽进⾏解析数据，我主要来介绍比较常用的一下3种类型👇。</p><ul><li><code>application/x-www-form-urlencoded</code> 👀</li></ul><blockquote><p>最常见的<code>POST</code>提交数据的⽅式如果不设置 <code>content-type</code> 属性🥩，默认为<code>application/x-www-form-urlencoded</code>⽅式提交数据🥙，提交的表单数据会转换为键值对并按照 <code>key1=val1&amp;key2=val2</code> 的⽅式进⾏编码<code>key</code>和<code>val</code>都进⾏了<code>URL</code>转码🍞。</p></blockquote><ul><li><p><code>multipart/form-data</code> 👀</p><blockquote><p>另⼀个常见的<code>POST</code>数据提交的⽅式😊,<code>Form</code>表单的<code>Content-Type</code>设置为<code>multipart/form-data</code>🛴，它会将表单的数据处理为⼀条消息，以标签为单元，⽤分隔符分开🎑。由于这种⽅式将数据有很多部分🚖，它既可以上传键值对，也可以上传⽂件，甚⾄多个⽂件🐱‍👓。</p></blockquote></li><li><p><code>application/json</code> 👀</p><blockquote><p><code>Content-Type: application/json</code>作为响应头⽐较常见🍱。实际上，现在越来越多的⼈把它作为请求头🥚，⽤来告诉服务端,消息主体是序列化后的<code>JSON</code>字符串🍞，其中⼀个好处就是<code>JSON</code>格式⽀持⽐键值对复杂得多的结构化数据🥡。</p></blockquote></li></ul><blockquote><p><strong>注意</strong>：如果您有二进制（非字母数字）数据（或相当大的有效载荷）要传输🍙，请使用<code>multipart/form-data</code>，其他情况建议使用<code>application/x-www-form-urlencoded</code>或者<code>application/json</code>🍗。</p></blockquote><h4 id="postman中发起一个post请求-application-x-www-form-urlencoded"><a href="#postman中发起一个post请求-application-x-www-form-urlencoded" class="headerlink" title="postman中发起一个post请求(application/x-www-form-urlencoded)"></a><code>postman</code>中发起一个<code>post</code>请求(<code>application/x-www-form-urlencoded</code>)</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b0437dde8cb54eabb4008c3f6711a9f6~tplv-k3u1fbpfcp-zoom-1.image"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2f510ace3d9a4e48994367e98fc79e61~tplv-k3u1fbpfcp-zoom-1.image"><br>在<code>postman</code>中选择<code>body</code>下的<code>x-www-form-urlencoded</code>请求头会自动变成<code>Content-Type:application/x-www-form-urlencoded</code>,无需我们手动在去修改请求头🥞。</p><h4 id="在axios中模拟postman发送POST请求"><a href="#在axios中模拟postman发送POST请求" class="headerlink" title="在axios中模拟postman发送POST请求"></a>在<code>axios</code>中模拟<code>postman</code>发送<code>POST</code>请求</h4><ul><li>第一种方式<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 如果有多个参数用&amp;连接 但是如果参数过多我们使用这种方式就显得太傻了，建议采用第二种方式</span><br>axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/api/wpfk/getEnterpriseInfo&quot;</span>,<span class="hljs-string">&quot;qymc=xxxxx&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response.<span class="hljs-property">data</span>);<br>&#125;);<br></code></pre></div></td></tr></table></figure></li><li>第二种方式 引用<code>qs</code>库<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// npm install qs --save 安装qs库</span><br><span class="hljs-keyword">import</span> qs <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;qs&#x27;</span><br>axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/api/wpfk/getEnterpriseInfo&quot;</span>,qs.<span class="hljs-title function_">stringify</span>(&#123;<br>    <span class="hljs-attr">qymc</span>:<span class="hljs-string">&#x27;xxx&#x27;</span><br>&#125;)).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response.<span class="hljs-property">data</span>);<br>&#125;);<br><br></code></pre></div></td></tr></table></figure><h4 id="nodeJs-express框架接收POST参数"><a href="#nodeJs-express框架接收POST参数" class="headerlink" title="nodeJs express框架接收POST参数"></a><code>nodeJs</code> <code>express</code>框架接收<code>POST</code>参数</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 第一步: 导入express</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-comment">// 如果是post请求需要安装body-parser npm install body-parser --save</span><br><span class="hljs-keyword">var</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>)<br><span class="hljs-comment">// 第二步: 创建web服务器</span><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br><span class="hljs-comment">// parse application/x-www-form-urlencoded</span><br>app.<span class="hljs-title function_">use</span>(bodyParser.<span class="hljs-title function_">urlencoded</span>(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> &#125;))<br><br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/wpfk/getEnterpriseInfo&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">body</span>.<span class="hljs-property">qymc</span>)<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Hello world.&#x27;</span>)<br>&#125;)<br><span class="hljs-comment">// 第三步: 启动服务器</span><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-function">()=&gt;</span>&#123;<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-string">&#x27; 300服务启动了&#x27;</span> )<br> &#125;)<br></code></pre></div></td></tr></table></figure></li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2d7788b5d0d24f33add34d0cad89c8f2~tplv-k3u1fbpfcp-zoom-1.image"></p><h4 id="python-flask框架接收POST参数"><a href="#python-flask框架接收POST参数" class="headerlink" title="python flask框架接收POST参数"></a><code>python</code> <code>flask</code>框架接收<code>POST</code>参数</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,request<br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/wpfk/getEnterpriseInfo&#x27;</span>,methods=[<span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&quot;POST&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-comment"># 接收POST请求参数 Content-Type为application/x-www-form-urlencoded</span><br>    params1 = request.values.get(<span class="hljs-string">&quot;qymc&quot;</span>)<br>    <span class="hljs-built_in">print</span>(params1)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;h1&gt;Hello World&lt;/h1&gt;&#x27;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run()<br></code></pre></div></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/84d83d97810449cf9b07e5e92f23e35e~tplv-k3u1fbpfcp-zoom-1.image"></p><h4 id="postman中发起一个post请求-multipart-form-data"><a href="#postman中发起一个post请求-multipart-form-data" class="headerlink" title="postman中发起一个post请求(multipart/form-data)"></a><code>postman</code>中发起一个<code>post</code>请求(<code>multipart/form-data</code>)</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/739a18a386d1431aaafc02e86b51ce5f~tplv-k3u1fbpfcp-zoom-1.image"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/35df32fc37464773962d4d319182c06b~tplv-k3u1fbpfcp-zoom-1.image"></p><p><code>postman</code>中选择<code>body</code>下<code>form-data</code>请求头会自动变成<code>Content-Type:multipart/form-data</code>,无需我们手动在去修改请求头🍤。</p><h4 id="在axios中模拟postman发送POST请求-1"><a href="#在axios中模拟postman发送POST请求-1" class="headerlink" title="在axios中模拟postman发送POST请求"></a>在<code>axios</code>中模拟<code>postman</code>发送<code>POST</code>请求</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 需要手动设置请求头</span><br>axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/api/wpfk/getEnterpriseInfo&quot;</span>,&#123;<br>    <span class="hljs-attr">qymc</span>:<span class="hljs-string">&#x27;formdata&#x27;</span><br>&#125;,&#123;<br>  <span class="hljs-attr">headers</span>:&#123;<br>    <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;multipart/form-data&#x27;</span><br>  &#125;<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response.<span class="hljs-property">data</span>);<br>&#125;);<br></code></pre></div></td></tr></table></figure><h4 id="nodeJs-express框架接收POST参数-1"><a href="#nodeJs-express框架接收POST参数-1" class="headerlink" title="nodeJs express框架接收POST参数"></a><code>nodeJs</code> <code>express</code>框架接收<code>POST</code>参数</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 第一步: 导入express</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-comment">// 解析multipart/form-data需要使用express-formidable  </span><br><span class="hljs-comment">// 下载包 npm install express-formidable</span><br><span class="hljs-keyword">const</span> formidable = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express-formidable&#x27;</span>) <span class="hljs-comment">// 引入</span><br><span class="hljs-comment">// 第二步: 创建web服务器</span><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">formidable</span>());<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/wpfk/getEnterpriseInfo&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)&#123;<br>    <span class="hljs-comment">// req.fields; // 非文件项</span><br>  <span class="hljs-comment">// req.files; // 文件项</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">fields</span>.<span class="hljs-property">qymc</span>);<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Hello world.&#x27;</span>)<br>&#125;)<br><span class="hljs-comment">// 第三步: 启动服务器</span><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-function">()=&gt;</span>&#123;<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-string">&#x27; 300服务启动了&#x27;</span> )<br> &#125;)<br></code></pre></div></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6b927f40d85643a0a63a211bc295e049~tplv-k3u1fbpfcp-zoom-1.image"></p><h4 id="python-flask框架接收POST参数-1"><a href="#python-flask框架接收POST参数-1" class="headerlink" title="python flask框架接收POST参数"></a><code>python</code> <code>flask</code>框架接收<code>POST</code>参数</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,request<br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/wpfk/getEnterpriseInfo&#x27;</span>,methods=[<span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&quot;POST&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-comment"># 接收POST请求参数 Content-Type为multipart/form-data</span><br>    params1 = request.form.get(<span class="hljs-string">&quot;qymc&quot;</span>)<br>    <span class="hljs-built_in">print</span>(params1)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;h1&gt;Hello World&lt;/h1&gt;&#x27;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run()<br></code></pre></div></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c5b7979330b540adadda3762f785a346~tplv-k3u1fbpfcp-zoom-1.image"></p><h4 id="postman中发起一个post请求-application-json"><a href="#postman中发起一个post请求-application-json" class="headerlink" title="postman中发起一个post请求(application/json)"></a><code>postman</code>中发起一个<code>post</code>请求(<code>application/json</code>)</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1917d5ba583d4b65a1f338dafe09bb56~tplv-k3u1fbpfcp-zoom-1.image"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0b6de9786a394cacb46fe481145b5cf6~tplv-k3u1fbpfcp-zoom-1.image"><br>在<code>postman</code>中选择<code>body</code>下的<code>row </code>右侧类型选择<code>JSON</code>请求头会自动变成<code>Content-Type:application/json</code>,无需我们手动在去修改请求头🍬。</p><blockquote><p>注意：写内容的时候一定要是标准的<code>JSON</code>使用双引号。</p></blockquote><h4 id="在axios中模拟postman发送POST请求-2"><a href="#在axios中模拟postman发送POST请求-2" class="headerlink" title="在axios中模拟postman发送POST请求"></a>在<code>axios</code>中模拟<code>postman</code>发送<code>POST</code>请求</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/api/wpfk/getEnterpriseInfo&quot;</span>, &#123;<br>    <span class="hljs-attr">qymc</span>: <span class="hljs-string">&quot;applictionJSON&quot;</span>,<br>  &#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response.<span class="hljs-property">data</span>);<br>  &#125;);<br></code></pre></div></td></tr></table></figure><h4 id="nodeJs-express框架接收POST参数-2"><a href="#nodeJs-express框架接收POST参数-2" class="headerlink" title="nodeJs express框架接收POST参数"></a><code>nodeJs</code> <code>express</code>框架接收<code>POST</code>参数</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 第一步: 导入express</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-comment">// 解析application/json或者application/x-www-form-urlencoded</span><br><span class="hljs-keyword">var</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>)<br><span class="hljs-comment">// 第二步: 创建web服务器</span><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br><span class="hljs-comment">// parse application/x-www-form-urlencoded</span><br><span class="hljs-comment">// app.use(bodyParser.urlencoded(&#123; extended: false &#125;))</span><br><br><span class="hljs-comment">// 解析application/json</span><br>app.<span class="hljs-title function_">use</span>(bodyParser.<span class="hljs-title function_">json</span>())<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/wpfk/getEnterpriseInfo&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">body</span>.<span class="hljs-property">qymc</span>)<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Hello world.&#x27;</span>)<br>&#125;)<br><span class="hljs-comment">// 第三步: 启动服务器</span><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-function">()=&gt;</span>&#123;<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-string">&#x27; 300服务启动了&#x27;</span> )<br> &#125;)<br></code></pre></div></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/52817074df3a4850b82f8c53e287f8b0~tplv-k3u1fbpfcp-zoom-1.image"></p><h4 id="python-flask框架接收POST参数-2"><a href="#python-flask框架接收POST参数-2" class="headerlink" title="python flask框架接收POST参数"></a><code>python</code> <code>flask</code>框架接收<code>POST</code>参数</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,request<br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/wpfk/getEnterpriseInfo&#x27;</span>,methods=[<span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&quot;POST&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-comment"># 接收POST请求参数 Content-Type为application/json</span><br>    params1 = request.get_json()[<span class="hljs-string">&#x27;qymc&#x27;</span>]<br>    <span class="hljs-comment"># 或者</span><br>    params2 = request.json.get(<span class="hljs-string">&#x27;qymc&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(params1,params2)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;h1&gt;Hello World&lt;/h1&gt;&#x27;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run()<br></code></pre></div></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/728fa4ce9af94e0a9e026130a03aad0f~tplv-k3u1fbpfcp-zoom-1.image"></p><blockquote><ul><li>问：为什么不写一个<code>java</code>的接收参数😧。<br> </li><li>答：我不会😌!</li><li>问：为什么在发起请求的时候 请求类型<code>multipart/form-data</code>需要设置请求头而其他情况不需要设置请求头😧？</li><li>实际上在其他请求中设置请求头也是不会出错的🥠，但是由于智能的<code>axios</code>跟<code>postman</code>一样会自动设置不同的请求头，我们就不需要在重新设置啦😙。<code>axios</code>在传递<code>json</code>序列化参数的时候默认的请求头是<code>application/json</code>🥧，所以在请求类型是<code>multipart/form-data</code>的时候需要单独指定请求头🍮，否则就会变成<code>application/json</code>🍣。</li></ul></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上只是说了比较常用的几种方式，应该可以满足基本的日常工作了🦪，如果你的后端还质疑你的传参就把这篇文章甩过去，愿人间没有<code>400状态码</code>存在！🙏<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7d67dac3ad1749318ea3c684f79868c7~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://wenku.baidu.com/view/0f6a4e67fd4733687e21af45b307e87101f6f8cf.html">常见的Content-Type类型</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>NodeJS</tag>
      
      <tag>Axios</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>是时候学习一下NVM了</title>
    <link href="/2022/05/17/%E6%98%AF%E6%97%B6%E5%80%99%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%8BNVM%E4%BA%86/"/>
    <url>/2022/05/17/%E6%98%AF%E6%97%B6%E5%80%99%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%8BNVM%E4%BA%86/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在工作中我们肯定会接触到形形色色的项目，避免不了就可能会用到不同版本的<code>NodeJs</code>，如果你每次都是卸载重装反复循环简直是恶心的要命-如下图👇，这时候<code>nvm</code>就派到用场了。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8759753fd83745cca71adfa7881d5a69~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="nvm是什么？"><a href="#nvm是什么？" class="headerlink" title="nvm是什么？"></a>nvm是什么？</h2><p><code>Node Version Manager</code>，也就是说<code>NVM</code>是<code>Node.js</code>的版本管理器📞，通过<code>NVM</code>我们就可以安装多个不同版本的<code>Node.js</code>并在需要的时候进行切换🥙。</p><h2 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h2><p>如果之前你的电脑中有<code>NodeJs</code>🤣，网上有的说是不需要卸载,直接安装<code>nvm</code>就可以,在安装过程中会提示你将本地安装的<code>NodeJs</code>加入到<code>NVM</code>管理中✊。我尝试了很多次，安装<code>NVM</code>成功之后无法切换<code>NodeJS</code>版本，并且找不到之前安装的<code>NodeJs</code>😴，所以还是<strong>强烈建议</strong>大家在安装<code>nvm</code>之前<strong>卸载NodeJs</strong>😛，要不然会有很多坑，将所有版本的<code>NodeJs</code>都通过<code>NVM</code>来管理🎑。</p><h2 id="完整卸载NodeJs"><a href="#完整卸载NodeJs" class="headerlink" title="完整卸载NodeJs"></a>完整卸载NodeJs</h2><ul><li><p>从卸载程序卸载程序和功能。</p></li><li><p>寻找这些文件夹并删除它们。根据您安装的版本，<code>UAC</code>设置和<code>CPU</code>架构，这些可能或可能不存在(全局安装的依赖包无法使用均要删除)：</p></li></ul><blockquote><p><code>C:\Program Files (x86)\Nodejs</code> <br/><br><code>C:\Program Files\Nodejs</code> <br/><br><code>C:\Users\&#123;User&#125;\AppData\Roaming\npm（或%appdata%\npm）</code><br/><br><code>C:\Users\&#123;User&#125;\AppData\Roaming\npm-cache（或%appdata%\npm-cache）</code><br/></p></blockquote><ul><li><p>检查您的<code>%PATH%</code>环境变量以确保没有引用<code>Nodejs</code>或<code>npm</code>存在(高版本的<code>NodeJs</code>会自动清除环境变量)。</p></li><li><p>重新启动电脑。</p></li></ul><h2 id="安装NVM过程"><a href="#安装NVM过程" class="headerlink" title="安装NVM过程"></a>安装NVM过程</h2><ul><li><p><a href="https://github.com/coreybutler/nvm-windows/releases">github下载地址</a></p></li><li><p>下载安装版<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4654d3159a494ace9503caef0f9fa5fa~tplv-k3u1fbpfcp-zoom-1.image"></p></li><li><p>安装路径</p></li></ul><p><code>nvm</code>安装的时候需要选择两个路径，一个是<code>nvm</code>对应的路径以及通过<code>nvm</code>下载<code>NodeJs</code>的安装路径，然后一直下一步就可以🙂。</p><blockquote><p>注：路径中不能有空格和中文</p></blockquote><ul><li>安装成功之后就会变成下图，会自动生成动态的环境变量</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b4c5e5e3c1e94131bb284b39989f3ece~tplv-k3u1fbpfcp-zoom-1.image"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ca9290aef9b64b64b04d2c8b66edef61~tplv-k3u1fbpfcp-zoom-1.image"></p><ul><li>设置淘宝镜像 打开<code>settings.txt</code>增加下面两句话<figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">node_mirror: https:<span class="hljs-regexp">//</span>npm.taobao.org<span class="hljs-regexp">/mirrors/</span>node/<br>npm_mirror: https:<span class="hljs-regexp">//</span>npm.taobao.org<span class="hljs-regexp">/mirrors/</span>npm/<br></code></pre></div></td></tr></table></figure><blockquote><p><a href="https://www.jianshu.com/p/fae87fef8ad0">npm设置淘宝镜像和cnpm的区别</a></p></blockquote></li></ul><h2 id="nvm-语法"><a href="#nvm-语法" class="headerlink" title="nvm 语法"></a>nvm 语法</h2><ul><li><code>nvm list </code></li></ul><p>可以列出你在本地电脑通过<code>nvm</code>方式安装的<code>NodeJs</code>版本</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/726c80e0dcc1442783c77fe68e77de92~tplv-k3u1fbpfcp-zoom-1.image"></p><ul><li><code>nvm list available</code> </li></ul><p>可以列出远端可用的NodeJS版本<code>LTS</code>代表稳定版本<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9e7c68b722d54f97b765e820538f3a18~tplv-k3u1fbpfcp-zoom-1.image"></p><ul><li><code>nvm install 版本号</code></li></ul><p>下载远端指定的NodeJS版本，自动下载配套的<code>npm</code>包</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cc0f5662ea474a8190c94eabdf326f57~tplv-k3u1fbpfcp-zoom-1.image"></p><ul><li><code>nvm use 版本号</code></li></ul><p>切换<code>NodeJs</code>版本（一定要以管理员的身份打开cmd进行切换否则会报错🍤）</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/81d281dae1f547768a36ce63dff6bf0a~tplv-k3u1fbpfcp-zoom-1.image"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f8916e0988a241dd9235b73949c480a8~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="文件夹详解"><a href="#文件夹详解" class="headerlink" title="文件夹详解"></a>文件夹详解</h2><p>当你安装了多个版本的<code>NodeJS</code>之后在对应的<code>nvm</code>文件夹中就可以看到多个版本的<code>NodeJS</code>，每个版本都是相互隔离的。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/51eccf2e397f4fb1a439c1c47efc44b4~tplv-k3u1fbpfcp-zoom-1.image"></p><blockquote><p>疑问： 在安装nvm的时候不是选择了nvm下载NodeJs的安装路径吗？怎么全部跑到了nvm的目录下。<br/><br>解释： 可以看<a href="https://segmentfault.com/a/1190000038252763">这篇文章</a>后半部分nvm版本的切换实质。</p></blockquote><h2 id="全局安装依赖"><a href="#全局安装依赖" class="headerlink" title="全局安装依赖"></a>全局安装依赖</h2><p>全局安装依赖是根据当前正在使用的<code>nodejs</code>版本进行安装的比如在<code>NodeJs_14.16.0</code>中使用了如下命令</p><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> -g cnpm <br></code></pre></div></td></tr></table></figure><p><code>cnpm</code>只是在<code>NodeJS_14.16.0</code>的版本中使用,切换到其他版本的nodeJS还是会显示如下提示</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5e3ba886f06749d9a13a6b82d4a38e77~tplv-k3u1fbpfcp-zoom-1.image"></p><p>原因就是因为不同的<code>NodeJS</code>版本是相互独立的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>nvm</code>还有好多好用的点需要我们一点一点去探索，目前我只用到了这些，也已经可以满足日常的工作了🥠，喜欢研究的小伙伴可以在网上自行研究哦🤙🤙🤙</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.jianshu.com/p/fae87fef8ad0">cnpm与npm</a></p><p><a href="https://segmentfault.com/a/1190000038252763">NVM、NPM、Node.js的安装选择</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NPM</tag>
      
      <tag>NodeJS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>别再使用一套配置啦🤔</title>
    <link href="/2022/05/17/%E5%88%AB%E5%86%8D%E4%BD%BF%E7%94%A8%E4%B8%80%E5%A5%97%E9%85%8D%E7%BD%AE%E5%95%A6/"/>
    <url>/2022/05/17/%E5%88%AB%E5%86%8D%E4%BD%BF%E7%94%A8%E4%B8%80%E5%A5%97%E9%85%8D%E7%BD%AE%E5%95%A6/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为什么我们要区分开发环境和生成环境，有很多开发包括我在内也只采用一套的配置😢，公用一套配置文件会有很多弊端，包括性能隐患、不停的修改配置、等等🤢。</p><ul><li>配置文件比较冗余，有很多配置我们在不同环境对应的配置是不相同的👀。</li><li>每次提交测试的的时候每次都需要修改一下后台的链接地址🤔。<h2 id="开发环境与生产环境区别"><a href="#开发环境与生产环境区别" class="headerlink" title="开发环境与生产环境区别"></a>开发环境与生产环境区别</h2></li></ul><blockquote><p>开发环境配置</p><ul><li>模块热更新（本地开启服务，实时更新）</li><li>sourceMap (方便调试，定位问题)</li><li>接口代理(配置proxyTable解决开发环境中的跨域问题)</li><li>代码规范检查 (代码规范检查工具)</li></ul></blockquote><blockquote><p>生产环境配置</p><ul><li>提取公共代码</li><li>压缩混淆(压缩混淆代码，清除代码空格，注释等信息使其变得难以阅读)　　　</li><li>文件压缩/base64编码(压缩代码，减少线上环境文件包的大小)　　　</li><li>去除无用的代码　　　　</li></ul></blockquote><blockquote><p>开发环境和生产环境的共同配置</p><ul><li>同样的入口</li><li>同样的代码处理(loader处理)</li><li>同样的解析配置</li></ul></blockquote><p>综上：我们有必要抽离出两种环境，来避免上面情况的发生🤞，由于我们的项目用的是<code>@vue/cli 5.0.4</code>所以我下面的内容都是针对<code>@vue/cli</code>💋</p><h2 id="概念（引用官网）"><a href="#概念（引用官网）" class="headerlink" title="概念（引用官网）"></a>概念（引用官网）</h2><p>模式是 <code>Vue CLI</code>项目中一个重要的概念。默认情况下，一个 <code>Vue CLI </code>项目有三个模式👇</p><ul><li><code>development</code> 模式用于 <code>vue-cli-service serve</code>🎨</li><li><code>test</code> 模式用于 <code>vue-cli-service test:unit</code>🎨</li><li><code>production</code> 模式用于<code> vue-cli-service build</code> 和 <code>vue-cli-service test:e2e</code>🎨</li></ul><p>当运行 <code>vue-cli-service</code> 命令时🎑，所有的环境变量都从对应的<strong>环境文件</strong>(下文会提到)中载入。如果文件内部不包含 <code>NODE_ENV</code> 变量，它的值将取决于模式🎊。</p><blockquote><p>通俗的来说：<code>Vue CLI</code>已经默认帮助我们做了开发环境和生产环境的区分🤷‍♀️，当我们执行<code>vue-cli-service serve</code>的时候就是开发环境🏓。执行 <code>vue-cli-servie build</code>的时候就生产环境⚽。并且<code>NODE_ENV</code>会被指定成对应的值，也就代表我们在全局可以通过使用<code>process.env.NODE_ENV</code>来判断是生产环境还是开发环境👏。</p></blockquote><h2 id="环境文件"><a href="#环境文件" class="headerlink" title="环境文件"></a>环境文件</h2><p>你可以在你的项目根目录中放置下列文件来指定环境变量，如果在这些文件中指定了<code>NODE_ENV</code>会覆盖上方的<code>NODE_ENV</code>❤。</p><figure class="highlight c#"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c#"><span class="hljs-meta"># [mode]：development|test|production</span><br>.env                <span class="hljs-meta"># 在所有的环境中被载入</span><br>.env.local          <span class="hljs-meta"># 在所有的环境中被载入，但会被 git 忽略</span><br>.env.[mode]         <span class="hljs-meta"># 只在指定的模式中被载入</span><br>.env.[mode].local   <span class="hljs-meta"># 只在指定的模式中被载入，但会被 git 忽略</span><br></code></pre></div></td></tr></table></figure><ul><li><p>一个环境文件只包含环境变量的“键=值”对。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs env">NODE_ENV=development<br>VUE_APP_NOT_SECRET_CODE=some_value<br></code></pre></div></td></tr></table></figure><blockquote><p><strong>注意</strong>：只有 <code>NODE_ENV</code>，<code>BASE_URL</code> 和以<code> VUE_APP_</code> 开头的变量🎶将通过 <code>webpack.DefinePlugin</code> 静态地嵌入到客户端侧的代码中😜,可以在客户端进行使用。这是为了避免意外公开机器上可能具有相同名称的私钥✔。</p></blockquote></li><li><p>加载环境文件的优先级</p><figure class="highlight c#"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c#"><span class="hljs-meta"># development：</span><br> npm run serve: .env.development.local, .env.local, .env.development,.env<br><span class="hljs-meta"># production：</span><br> npm run build: .env.production.local, .env.local, .env.production,.env<br></code></pre></div></td></tr></table></figure></li></ul><h2 id="如何查看vue-config-js中生产环境和开发环境的配置"><a href="#如何查看vue-config-js中生产环境和开发环境的配置" class="headerlink" title="如何查看vue.config.js中生产环境和开发环境的配置"></a>如何查看vue.config.js中生产环境和开发环境的配置</h2><figure class="highlight c#"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c#"><span class="hljs-meta"># 开发环境：</span><br>npx vue-cli-service inspect --mode development &gt;&gt; webpack.config.development.js<br><span class="hljs-meta"># 生产环境：</span><br>npx vue-cli-service inspect --mode production &gt;&gt; webpack.config.production.js<br><span class="hljs-meta"># 在产生的 js 文件开头，添加：module.exports =然后格式化即可查看。</span><br></code></pre></div></td></tr></table></figure><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul><li><p>通过<code>vue-cli</code>搭建一个空项目</p><figure class="highlight cmd"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmd">vue create env_project<br></code></pre></div></td></tr></table></figure></li><li><p>在<code>app.vue</code>的<code>mounted</code>生命周期中增加如下代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> == <span class="hljs-string">&quot;development&quot;</span>) &#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;开发环境&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> == <span class="hljs-string">&quot;production&quot;</span>) &#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;生产环境&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>运行 <code>npm run serve</code><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6006316ad4fc439da7352cb444d07c66~tplv-k3u1fbpfcp-zoom-1.image"></p></li><li><p>生成<code>dist</code>打包文件 </p><figure class="highlight cmd"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmd">npm run build<br></code></pre></div></td></tr></table></figure></li><li><p>下载<a href="http://nginx.org/en/download.html">nginx</a></p></li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f0309a6005b14046a9a7808fa351cad1~tplv-k3u1fbpfcp-zoom-1.image"></p><ul><li>下载安装完成之后修改<code>nginx</code>配置文件<code>conf-&gt;nginx.conf </code>指定打包文件</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3ce0d91dbb254446a36bce8f3bde5fd5~tplv-k3u1fbpfcp-zoom-1.image"></p><ul><li>启动<code>nginx</code></li></ul><p>找到<code>nginx</code>的安装目录双击<code>nginx.exe</code></p><ul><li>访问<code>127.0.0.1</code></li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d141ccd041344897b19821120f2add4a~tplv-k3u1fbpfcp-zoom-1.image"></p><blockquote><p>综上：我们应该已经将生产环境和开发环境区分开了，可以根据不同环境修改不同的配置了🎈。</p></blockquote><h2 id="创建环境文件指定不同配置"><a href="#创建环境文件指定不同配置" class="headerlink" title="创建环境文件指定不同配置"></a>创建环境文件指定不同配置</h2><p>在与<code>vue.config.js</code>的同级目录创建<code>.env.development</code> 与 <code>.env.production</code>并在<code>.env.development</code>中写入如下内容👇</p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-comment"># 实际项目千万不要在development中定义NODE环境为production，我们是为了验证是否可以覆盖默认的环境</span><br><span class="hljs-attr">NODE_ENV</span> = production<br></code></pre></div></td></tr></table></figure><ul><li>重启项目</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7a10c95e3d5144439cc5711102ae1196~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p> 综上我们既然清楚了开发环境和生产环境的区分文中提到的问题也就迎刃而解啦🎨,生产环境和开发环境在每种语言中都是必须要知道的，希望你看完之后会有帮助哦🤣，如果使用的是vue-cli2.0可以看<a href="https://www.jianshu.com/p/dbf8ed21f39c">这里</a>✌。<br> <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/64d67dcaebdf434499eb06061b181678~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><p><a href="https://cli.vuejs.org/zh/guide/mode-and-env.html#%E6%A8%A1%E5%BC%8F%E5%92%8C%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">vueCLI</a></p></li><li><p><a href="https://www.jianshu.com/p/dbf8ed21f39c">vuecli2.x的配置</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码人生</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端埋点实现方案</title>
    <link href="/2022/05/17/%E5%89%8D%E7%AB%AF%E5%9F%8B%E7%82%B9%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88/"/>
    <url>/2022/05/17/%E5%89%8D%E7%AB%AF%E5%9F%8B%E7%82%B9%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>领导今天又来活了😣，要记录每个页面的停留时间，以及页面的操作，是由哪个页面跳转过来的，给每个页面生成<code>GUID</code>上报给服务端，并且需要携带设备型号和设备唯一标识🙄</p><h2 id="名称解释"><a href="#名称解释" class="headerlink" title="名称解释"></a>名称解释</h2><h4 id="UV（Unique-visitor）"><a href="#UV（Unique-visitor）" class="headerlink" title="UV（Unique visitor）"></a>UV（Unique visitor）</h4><p>是指通过互联网访问、浏览这个网页的自然人。访问您网站的一台电脑客户端为一个访客。<code>00:00-24:00</code>内相同的客户端只被计算一次。一天内同个访客多次访问仅计算一个<code>UV</code>。</p><h4 id="IP（Internet-Protocol）"><a href="#IP（Internet-Protocol）" class="headerlink" title="IP（Internet Protocol）"></a>IP（Internet Protocol）</h4><p>独立<code>IP</code>是指访问过某站点的<code>IP</code>总数，以用户的IP地址作为统计依据。<code>00:00-24:00</code>内相同<code>IP</code>地址之被计算一次。</p><p>UV与IP区别</p><blockquote><p>如：你和你的家人用各自的账号在同一台电脑上登录新浪微博，则<code>IP</code>数+1，<code>UV</code>数+2。由于使用的是同一台电脑，所以<code>IP</code>不变，但使用的不同账号，所以<code>UV</code>+2</p></blockquote><h4 id="PV（Page-View）"><a href="#PV（Page-View）" class="headerlink" title="PV（Page View）"></a>PV（Page View）</h4><p>即页面浏览量或点击量，用户每1次对网站中的每个网页访问均被记录1个<code>PV</code>。用户对同一页面的多次访问，访问量累计，用以衡量网站用户访问的网页数量。</p><h4 id="VV（Visit-View）"><a href="#VV（Visit-View）" class="headerlink" title="VV（Visit View）"></a>VV（Visit View）</h4><p>用以统计所有访客1天内访问网站的次数。当访客完成所有浏览并最终关掉该网站的所有页面时便完成了一次访问，同一访客1天内可能有多次访问行为，访问次数累计。</p><p> PV与VV区别</p><blockquote><p>如：你今天10点钟打开了百度，访问了它的三个页面；11点钟又打开了百度，访问了它的两个页面，则PV数+5，VV数+2.PV是指页面的浏览次数，VV是指你访问网站的次数。</p></blockquote><h2 id="埋点分类"><a href="#埋点分类" class="headerlink" title="埋点分类"></a>埋点分类</h2><h3 id="代码埋点"><a href="#代码埋点" class="headerlink" title="代码埋点"></a>代码埋点</h3><p>通过代码的方式在页面中嵌入逻辑🎨，比如捕获一个点击事件，在这个点击事件之前加入代码埋点⛑,上报给后台🥐。国内已经有很多成型的服务商了如友盟，百度统计等🌯，都提供了比较成型的方案🎨，并可以在后台管理系统中查看比较详细的数据分析🧵，但是肯定会有领导想要把这些事情掌握在自己的手中，我们就只能通过自身开发来实现代码埋点🍞。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/071c7d15aebe422aa02bbbab3d62c0f1~tplv-k3u1fbpfcp-zoom-1.image"></p><ul><li><p>优点：</p><blockquote><ul><li>控制精准，可以非常精确地选择什么时候发送数据。</li><li>传递多样化自定义属性、自定义事件，传递比较丰富的数据到服务端。</li></ul></blockquote></li><li><p>缺点：</p><blockquote><ul><li>埋点代价比较大，每一个控件的埋点都需要添加相应的代码，不仅工作量大，必须是技术人员才能完成。</li><li>更新的代价比较大，每一次更新埋点方案，都必须改代码。</li></ul></blockquote></li></ul><h3 id="可视化埋点"><a href="#可视化埋点" class="headerlink" title="可视化埋点"></a>可视化埋点</h3><p>个人理解的可视化埋点应该是肯定需要第三方的服务商支持🍜，不会有做专门业务的公司去做可视化埋点的解决方案。可视化埋点开发人员除集成采集可视化<code>SDK </code>外👜，不需要额外去写埋点代码🍠，而是由业务人员或运营人员通过访问分析平台的圈选功能🤔，来“圈”出需要对用户行为进行捕捉的控件🎪，并给出事件命名🚘。圈选完毕后，这些配置会同步到各个用户的终端上😮，由采集<code>SDK</code>按照圈选的配置自动进行用户行为数据的采集和发送🚇。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/556f975e2f224dad9e8012c70801a1a5~tplv-k3u1fbpfcp-zoom-1.image"><br>优点：</p><blockquote><ul><li>埋点代价小，更新代价小</li><li>埋点只需业务同学接入，开发只需对接可视化<code>SDK</code></li></ul></blockquote><p>缺点：</p><blockquote><ul><li>无法做到自定义获取数据</li><li>可视化埋点覆盖的功能有限</li><li>仅支持客户端行为</li></ul></blockquote><h3 id="无痕埋点"><a href="#无痕埋点" class="headerlink" title="无痕埋点"></a>无痕埋点</h3><p>无痕埋点又叫全埋点🥪，网上又很多文章写的都是无痕埋点是将所有事件的操作全部上报😀，但是我们在实现的过程中肯定是不会监听那么多的事件吧😋，但是好像也有第三方服务商sdk集成了所有事件😏。</p><blockquote><p><strong>我的个人理解</strong>无痕埋点是针对某一个单一事件，在全局实现监听达到上报，而不是全部事件上报才叫无痕埋点🥙。只要有某个事件在全局实现监听，针对这个事件的埋点方式就称为无痕埋点🌯</p></blockquote><p>优点：</p><blockquote><ul><li>由于采集的是全量数据，所以产品迭代过程中是不需要关注埋点逻辑的，也不会出现漏埋、误埋等现象。</li><li>无埋点方式因为收集的是全量数据，可以大大减少运营和产品的试错成本</li><li>如果集成sdk之后无需埋点，方便快捷</li></ul></blockquote><p>缺点：</p><blockquote><ul><li>缺点与可视化埋点相同，未解决个性化自定义获取数据的问题，缺乏数据获取的灵活性；</li><li>数据量过大，如果不使用第三方服务商，针对自身的服务器是个考验</li></ul></blockquote><h2 id="实现方案步骤（uni-app，其他项目逻辑相同）"><a href="#实现方案步骤（uni-app，其他项目逻辑相同）" class="headerlink" title="实现方案步骤（uni-app，其他项目逻辑相同）"></a>实现方案步骤（uni-app，其他项目逻辑相同）</h2><h4 id="两方面上报-1-事件上报-目前只有点击事件埋点-，2-停留时间上报"><a href="#两方面上报-1-事件上报-目前只有点击事件埋点-，2-停留时间上报" class="headerlink" title="两方面上报: 1.事件上报(目前只有点击事件埋点)，2.停留时间上报"></a>两方面上报: 1.事件上报(目前只有点击事件埋点)，2.停留时间上报</h4><ul><li><strong>事件上报</strong>：通过给元素绑定自定义指令的方式实现(减少对原有代码的侵入)🍜，将信息存储在缓存池中定时上报，上报之后清空之前的上报信息🥠。</li><li><strong>停留时间上报</strong>：需要重新封装路由，创建路由拦截在跳转之前记录来源,以及上一个页面的停留时间，当拦截器捕获成功之后🌯，如果发现停留时间大于xx秒进行上报🥙。</li></ul><p><em>优点</em>：清晰合理，比较适合新项目。</p><p><em>缺点</em>：针对老项目需要与产品和运营对接埋点方案绑定自定义事件🤪，如果是老项目需要对<code>uni.navigateTo</code>,<code>uni.redirectTo</code>,<code>uni.reLaunch</code>,<code>uni.switchTab</code> 进行二次封装。</p><blockquote><p>问：为什么何将信息存储，而不是实时上报？<br /><br>答：考虑到服务器的压力，采用了定时上报的方式。<br /><br /><br>问：为什么监听停留时长大于XX秒才进行上报？<br /><br>答：1.服务器的压力问题。2考虑到用户可能做一些没意义的操作，所以停留时长大于XX秒才属于有效页面。</p></blockquote><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><p><strong>事件埋点上报</strong></p><ul><li>在<code>common</code>文件夹下创建自定义指令文件，在<code>main.js</code>中引用该文件。<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-comment">// 自定义埋点指令</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">directive</span>(<span class="hljs-string">&quot;buried&quot;</span>, &#123;<br>  <span class="hljs-attr">bind</span>: <span class="hljs-function">(<span class="hljs-params">el, binding</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (binding.<span class="hljs-property">value</span>) &#123;<br>      <span class="hljs-comment">//这里参数是根据自己业务可以自己定义</span><br>      <span class="hljs-keyword">let</span> params = &#123;<br>        <span class="hljs-attr">currentUrl</span>: binding.<span class="hljs-property">value</span>.<span class="hljs-property">currentUrl</span>,<br>        <span class="hljs-attr">triggerType</span>: binding.<span class="hljs-property">value</span>.<span class="hljs-property">triggerType</span>,<br>        <span class="hljs-attr">title</span>: binding.<span class="hljs-property">value</span>.<span class="hljs-property">title</span>,<br>        <span class="hljs-attr">frontTriggerType</span>: binding.<span class="hljs-property">value</span>.<span class="hljs-property">triggerType</span>,<br>        <span class="hljs-attr">behavior</span>: binding.<span class="hljs-property">value</span>.<span class="hljs-property">behavior</span>,<br>      &#125;;<br>      <span class="hljs-comment">//如果是浏览类型，直接保存,目前只考虑点击类型</span><br>      <span class="hljs-keyword">if</span> (binding.<span class="hljs-property">value</span>.<span class="hljs-property">triggerType</span> == <span class="hljs-string">&quot;browse&quot;</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;browse&quot;</span>, params);<br>        <span class="hljs-comment">//调用后台接口保存数据</span><br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (binding.<span class="hljs-property">value</span>.<span class="hljs-property">triggerType</span> == <span class="hljs-string">&quot;click&quot;</span>) &#123;<br>        <span class="hljs-comment">//如果是click类型，监听click事件</span><br>        el.<span class="hljs-title function_">addEventListener</span>(<br>          <span class="hljs-string">&quot;click&quot;</span>,<br>          <span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-comment">// 将操作和内容存储在缓存中定时上报</span><br>            <span class="hljs-keyword">let</span> buriedArray = uni.<span class="hljs-title function_">getStorageSync</span>(<span class="hljs-string">&#x27;buriedArray&#x27;</span>) <span class="hljs-comment">//获取埋点集合</span><br>            buriedArray.<span class="hljs-title function_">push</span>(params)  <span class="hljs-comment">// 将埋点集合存入缓存中</span><br>            uni.<span class="hljs-title function_">setStorageSync</span>(<span class="hljs-string">&#x27;buriedArray&#x27;</span>, buriedArray)<br>          &#125;,<br>          <span class="hljs-literal">false</span><br>        );<br>      &#125;<br>    &#125;<br>  &#125;,<br>&#125;);<br></code></pre></div></td></tr></table></figure>在<code>app.vue</code>中的<code>onLaunch</code>生命周期中创建定时任务与缓存池,在<code>onHide</code>生命周期中销毁定时任务<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> timeInterval = <span class="hljs-literal">null</span><br><span class="hljs-title function_">onLaunch</span>(<span class="hljs-params"></span>)&#123;<br>  uni.<span class="hljs-title function_">setStorageSync</span>(<span class="hljs-string">&#x27;buriedArray&#x27;</span>, [])<br><span class="hljs-comment">// 定时上报埋点数据</span><br>timeInterval = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-keyword">if</span> (uni.<span class="hljs-title function_">getStorageSync</span>(<span class="hljs-string">&#x27;buriedArray&#x27;</span>).<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-comment">// 上报逻辑，根据需求自行完善</span><br><span class="hljs-title function_">upLoadBuriedInfo</span>(uni.<span class="hljs-title function_">getStorageSync</span>(<span class="hljs-string">&#x27;buriedArray&#x27;</span>))<br><span class="hljs-comment">// 上报成功之后清空埋点数据重新上报</span><br>uni.<span class="hljs-title function_">setStorageSync</span>(<span class="hljs-string">&#x27;buriedArray&#x27;</span>, [])<br>&#125;<br>&#125;, time)<br>&#125;<br><span class="hljs-attr">onHide</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>timeInterval &amp;&amp; <span class="hljs-built_in">clearInterval</span>(timeInterval)<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul><p><strong>停留时间上报</strong></p><ul><li>首先读取<code>page.json</code>中的文件获取<code>path</code>和<code>title</code>(<a href="https://www.yezipi.net/article/detail/10086">原文链接</a>)，先在项目根目录创建一个<code>router</code>文件夹🍞，在<code>vue.config.js</code>里面加入如下代码,这样每次打包之后<code>router</code>文件夹下的<code>index.js</code>中就会生成一个 <code>title</code>和<code>path</code>的对应表。😚<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br><span class="hljs-keyword">const</span> fromFile = path.<span class="hljs-title function_">join</span>(__filename, <span class="hljs-string">&#x27;../pages.json&#x27;</span>)<br><span class="hljs-keyword">const</span> toFile = path.<span class="hljs-title function_">join</span>(__filename, <span class="hljs-string">&#x27;../router/index.js&#x27;</span>)<br><span class="hljs-keyword">const</span> buffPrefix = <span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">from</span>(<span class="hljs-string">&#x27;export default &#x27;</span>)<br><br><span class="hljs-keyword">const</span> fileData = fs.<span class="hljs-title function_">readFileSync</span>(fromFile)<br><br><span class="hljs-comment">// 转成可读的js, 正则删除注释， 不然JSON.parse会报错</span><br><span class="hljs-keyword">const</span> fileObj = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(fileData.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\/\/.*/g</span>, <span class="hljs-string">&#x27;&#x27;</span>))<br><br><span class="hljs-comment">// 遍历，只取路径和标题，其他的不要，已减小文件体积</span><br><span class="hljs-keyword">const</span> routes = fileObj.<span class="hljs-property">pages</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br><span class="hljs-keyword">return</span> &#123;<br><span class="hljs-attr">title</span>: e.<span class="hljs-property">style</span> ? e.<span class="hljs-property">style</span>.<span class="hljs-property">navigationBarTitleText</span> ? e.<span class="hljs-property">style</span>.<span class="hljs-property">navigationBarTitleText</span> : e.<span class="hljs-property">name</span> : <span class="hljs-string">&#x27;未知&#x27;</span>,<br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>+e.<span class="hljs-property">path</span>,<br>&#125;<br>&#125;)<br>fs.<span class="hljs-title function_">writeFileSync</span>(toFile, buffPrefix + <span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">from</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(routes)))<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br><span class="hljs-attr">configureWebpack</span>: &#123;<br><span class="hljs-attr">plugins</span>: []<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li>在common中创建routeGuards.js 监听路由拦截，进行上报，在main.js中引用该文件<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">import</span> v5 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;uuid/v5&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">UniRouteGuard</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/js_sdk/pocky-route-gurads/lib&#x27;</span>;<br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/router&#x27;</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">UniRouteGuard</span>);<br><br><span class="hljs-keyword">const</span> guard = <span class="hljs-keyword">new</span> <span class="hljs-title class_">UniRouteGuard</span>();<br><br><span class="hljs-keyword">let</span> startTime = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>();<br>guard.<span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">let</span> currentTime = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>();<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">from</span>.<span class="hljs-property">url</span> &amp;&amp; <span class="hljs-keyword">from</span>.<span class="hljs-property">url</span> == <span class="hljs-string">&#x27;/pages/first/index&#x27;</span>) &#123;<br><span class="hljs-title function_">next</span>()<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(router)<br><span class="hljs-keyword">if</span> (to.<span class="hljs-property">url</span>) &#123;<br><span class="hljs-keyword">if</span> (to.<span class="hljs-property">url</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;?&#x27;</span>) &gt; -<span class="hljs-number">1</span>) &#123;<br>to.<span class="hljs-property">url</span> = to.<span class="hljs-property">url</span>.<span class="hljs-title function_">substr</span>(<span class="hljs-number">0</span>, to.<span class="hljs-property">url</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;?&#x27;</span>))<br>&#125;<br>&#125;<br><span class="hljs-keyword">let</span> fromName = router.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.<span class="hljs-property">path</span> == <span class="hljs-keyword">from</span>.<span class="hljs-property">url</span>) ? router.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.<span class="hljs-property">path</span> == <span class="hljs-keyword">from</span>.<span class="hljs-property">url</span>).<span class="hljs-property">title</span> : <span class="hljs-string">&#x27;未知&#x27;</span><br><span class="hljs-keyword">let</span> toName = router.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.<span class="hljs-property">path</span> == to.<span class="hljs-property">url</span>) ? router.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.<span class="hljs-property">path</span> == to.<span class="hljs-property">url</span>).<span class="hljs-property">title</span> : <span class="hljs-string">&#x27;未知&#x27;</span><br>  <span class="hljs-keyword">const</span> stayTime=  <span class="hljs-built_in">parseInt</span>((currentTime - startTime) / <span class="hljs-number">1000</span>)<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">MY_NAMESPACE</span> = <span class="hljs-string">&#x27;1b671a64-40d5-491e-99b0-da01ff1f3341&#x27;</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`由<span class="hljs-subst">$&#123;fromName&#125;</span>跳转到<span class="hljs-subst">$&#123;toName&#125;</span>并在<span class="hljs-subst">$&#123;fromName&#125;</span>中停留了<span class="hljs-subst">$&#123;stayTime&#125;</span>秒钟`</span>);<br><span class="hljs-keyword">let</span> params = &#123;<br><span class="hljs-attr">fromUrl</span>: <span class="hljs-keyword">from</span>.<span class="hljs-property">url</span>, <span class="hljs-comment">//来源地址</span><br><span class="hljs-attr">toUrl</span>: to.<span class="hljs-property">url</span>, <span class="hljs-comment">// 目的地址</span><br><span class="hljs-attr">fromName</span>: fromName, <span class="hljs-comment">// 来源名称</span><br><span class="hljs-attr">toName</span>: toName, <span class="hljs-comment">// 目的名称</span><br><span class="hljs-attr">stayTime</span>: stayTime, <span class="hljs-comment">// 停留时长</span><br><span class="hljs-attr">guid</span>: <span class="hljs-title function_">v5</span>(<span class="hljs-keyword">from</span>.<span class="hljs-property">url</span>, <span class="hljs-variable constant_">MY_NAMESPACE</span>), <span class="hljs-comment">//页面uuid</span><br><span class="hljs-attr">appUuid</span>: uni.<span class="hljs-title function_">getStorageSync</span>(<span class="hljs-string">&#x27;appUuid&#x27;</span>) ? uni.<span class="hljs-title function_">getStorageSync</span>(<span class="hljs-string">&#x27;appUuid&#x27;</span>) : <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-comment">// app唯一标识</span><br><span class="hljs-attr">model</span>: uni.<span class="hljs-title function_">getStorageSync</span>(<span class="hljs-string">&quot;model&quot;</span>)? uni.<span class="hljs-title function_">getStorageSync</span>(<span class="hljs-string">&#x27;model&#x27;</span>) : <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-comment">// 手机型号</span><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(params)<br>  <span class="hljs-keyword">if</span>(stayTime&gt;<span class="hljs-number">10</span>)&#123;<br>   <span class="hljs-comment">// 上报逻辑</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;停留的时间大于10秒钟了，可以进行上报&#x27;</span>)<br>  &#125;<br>  startTime = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>();<br><span class="hljs-title function_">next</span>();<br>&#125;);<br></code></pre></div></td></tr></table></figure><blockquote><p>因为<code>uni-app </code>没有提供自身的路由拦截插件🥠，所以需要我们手动去封装🚘。这种方案针对新项目比较合适，但是针对老项目路由跳转的逻辑都已经通过原生的方式写完了😣，我们在进行封装的话修改的点太多了🤔，所以在网上找到了这个插件不用修改跳转<code>api</code>并且可以获取到上一个页面的路由(<a href="https://ext.dcloud.net.cn/plugin?id=1955">全局路由守卫</a>)，原文介绍的是通过<code>npm</code>的方式进行安装，我采用的是<code>hbuilderX</code>导入的方式（有需要的同学可以自行查找）🤙。</p></blockquote><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><blockquote><ul><li>事件埋点:将需要埋点的元素绑定改指令<code>v-buried</code>绑定参数</li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">triggerType: 事件类型</span><br><span class="hljs-comment">title: 页面标题</span><br><span class="hljs-comment">currentUrl: 页面路由</span><br><span class="hljs-comment">behavior: 操作行为</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">v-buried</span>=<span class="hljs-string">&quot;&#123;</span></span><br><span class="hljs-string"><span class="hljs-tag">triggerType:&#x27;click&#x27;,</span></span><br><span class="hljs-string"><span class="hljs-tag">title:&#x27;我的&#x27;,</span></span><br><span class="hljs-string"><span class="hljs-tag">currentUrl: currentPath,</span></span><br><span class="hljs-string"><span class="hljs-tag">behavior:&#x27;点击我的收藏按钮&#x27;&#125;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></div></td></tr></table></figure><blockquote><p>页面跳转</p><ul><li><strong><span style="color:red">需要在<code>page.json</code>中进行修改如果使用的是自定义导航条或者没有使用导航条需要进行命名</span></strong></li><li><strong><span style="color:red">需要将页面中跳转路径修改成绝对路径否则路由会匹配不到</span></strong></li></ul></blockquote></li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eee650f8901e46b4bf2d91959d12dfd8~tplv-k3u1fbpfcp-zoom-1.image"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ce20f15c81f04a8c829570903785c07c~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="uni-app集成友盟统计"><a href="#uni-app集成友盟统计" class="headerlink" title="uni-app集成友盟统计"></a>uni-app集成友盟统计</h2><ul><li>首先在<a href="https://www.umeng.com/">友盟</a>上创建一个应用获取其对应的appkey</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8a6c0312a506479aa2b5701cb02fd7f2~tplv-k3u1fbpfcp-zoom-1.image"></p><ul><li>在uni-app的App模块配置中勾选友盟统计并填写对应的key（渠道id随意填写就可以）<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d8ba932112484748bbe51bc08d8d8d01~tplv-k3u1fbpfcp-zoom-1.image"></li><li>这样实际上就在uni-app中集成了友盟统计，如果想看到详细的上报数据可以在友盟后台进行查看（注：<strong>必须打包之后或者采用自定义基座的方式才能够进行上报，上报结果可能第二天才会生效，具体上报规则可以查看友盟官网解释</strong>）。</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c1596886f6664d259ba6f1a258ecdf11~tplv-k3u1fbpfcp-zoom-1.image"><br>这样最基本的集成就完成了。</p><blockquote><p>那我们如何埋入我们的自定义事件呢，比如我将一个燃气罩加入了购物车把他当成一个事件，并且能在友盟后台查看到我加入商品的属性以及加入空气炸锅或者加入电饼铛的一些数量对比</p></blockquote><ul><li>1.在友盟后台注册相应的自定义事件 （我的应用-&gt;设置-&gt;添加事件）<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/89326fce60d740bf8fd499283e4c7174~tplv-k3u1fbpfcp-zoom-1.image"></li><li>2.创建事件完毕之后在代码中进行上报的代码的编写（步骤一和步骤二谁先谁后都可以）<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// https://www.html5plus.org/doc/zh_cn/statistic.html 文档链接</span><br><span class="hljs-comment">// 第一个参数: 在友盟后台注册的事件id，第二个参数：业务数据</span><br>plus.<span class="hljs-property">statistic</span>.<span class="hljs-title function_">eventTrig</span>(<span class="hljs-string">&quot;purchase&quot;</span>, &#123;<span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;book&quot;</span>,<span class="hljs-string">&quot;quantity&quot;</span>:<span class="hljs-string">&quot;3&quot;</span>&#125;);<br></code></pre></div></td></tr></table></figure></li><li>上报可能会有延迟，发行过一段时间之后就可以在友盟后台查看到相关数据。</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8a33f98011694e14ac9b128a14a1ebdf~tplv-k3u1fbpfcp-zoom-1.image"></p><ul><li>点击查看按钮可以看到更详细的数据，以及上报的业务数据对比</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e0c6efaab72a4e84830787f6c01cbff8~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="uni-app-自带统计"><a href="#uni-app-自带统计" class="headerlink" title="uni-app 自带统计"></a>uni-app 自带统计</h2><ul><li>无需集成其他相关sdk只需在manifest.json中勾选uni统计配置即可注：<strong>必须打包之后才能够进行上报，上报结果可能第二天才会生效，具体上报规则可以查看uni-app官网解释</strong>）<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/128eb5aed151400caa8cb74c744e4dae~tplv-k3u1fbpfcp-zoom-1.image"></li><li><a href="https://tongji.dcloud.net.cn/">查看上报后台</a></li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/16aaaab3b182478c94daf0b8747f7f04~tplv-k3u1fbpfcp-zoom-1.image"></p><ul><li>uni统计也支持<a href="https://ask.dcloud.net.cn/article/36304">自定义埋点事件</a>的上报</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 注意如果第一个参数是title第二个参数必须是字符串</span><br>uni.<span class="hljs-title function_">report</span>(<span class="hljs-string">&quot;upload&quot;</span>,&#123;<br><span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;上报数据&#x27;</span>,<br><span class="hljs-attr">content</span>: <span class="hljs-string">&#x27;上报内容&#x27;</span><br>&#125;)<br></code></pre></div></td></tr></table></figure><ul><li>可在事件和转化模块中进行查看</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a8e44fa5d16c40bcac87b7fcce0101bb~tplv-k3u1fbpfcp-zoom-1.image"></p><p>在测试uni-app自带的统计中也遇到了一些问题，如果有朋友能够解决的话也可以帮助顶顶帖，我在进行完善<a href="https://ask.dcloud.net.cn/question/143724">问题贴</a>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>针对埋点的方案，自己也是不太熟悉，没有实战经验，找了很多途径，文中可能会有不对的地方，希望小伙伴们可以多多指点。一起加油！🤪<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c81e2a9622b5431e82e1bf427e27f0d5~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><p><a href="https://www.yezipi.net/article/detail/10086">获取Page.json</a></p></li><li><p><a href="https://www.zhihu.com/question/20448467">如何清楚易懂的解释“UV和PV＂的定义？</a></p></li><li><p><a href="https://www.jianshu.com/p/37cbb7607ca4">埋点区别</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>uni-app</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>🎈我求求你写个博客吧🎈</title>
    <link href="/2022/05/17/%E6%88%91%E6%B1%82%E6%B1%82%E4%BD%A0%E5%86%99%E4%B8%AA%E5%8D%9A%E5%AE%A2%E5%90%A7/"/>
    <url>/2022/05/17/%E6%88%91%E6%B1%82%E6%B1%82%E4%BD%A0%E5%86%99%E4%B8%AA%E5%8D%9A%E5%AE%A2%E5%90%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="今天是开工后的第一天-先祝愿各位掘友牛年大吉吧-这是纯纯的认真脸😊-接下来咱们言归正传。"><a href="#今天是开工后的第一天-先祝愿各位掘友牛年大吉吧-这是纯纯的认真脸😊-接下来咱们言归正传。" class="headerlink" title="今天是开工后的第一天,先祝愿各位掘友牛年大吉吧(这是纯纯的认真脸😊). 接下来咱们言归正传。"></a>今天是开工后的第一天,先祝愿各位掘友牛年大吉吧(这是纯纯的认真脸😊). 接下来咱们言归正传。</h2><h2 id="1-为啥要写博客😦"><a href="#1-为啥要写博客😦" class="headerlink" title="1 为啥要写博客😦"></a>1 为啥要写博客😦</h2><p>不知道你们有没有遇到过这几个问题?</p><ul><li><p>上班无事做正好看到了一篇<code>好的理财文章</code>突然你的领导来说找你和茶水🤩你眼疾手快且无奈的关闭这个书签页,等喝完茶之后回来只能<code>在浏览器记录</code>当中疯狂的<code>找啊找啊</code>。</p></li><li><p>话接上文,这时你突然找到了这篇文章<code>下定决心</code>,我一定要给他<code>收藏</code>过来.于是你用你的鼠标左键点击了一下浏览器地址栏的<code>五角星图标</code>,打算放入到你的书签夹,回家再看。</p></li><li><p>好巧不巧的你说奇怪不奇怪,老王（这篇文章的博主）心情不好把<code>服务器给停了</code>.你<code>恼羞成怒骂</code>了两句.这时你又开始根据你上午的记忆去地址栏搜索的<code>类似的文章</code>,但是怎么找不到那篇写的那么完整这时<code>痛恨</code>自己当初没有好好珍惜。</p></li></ul><p><img src="https://s3.ax1x.com/2021/02/18/yWVwin.jpg" alt="我好累，但是我要坚强"></p><p>PS：以上经历都是我的苦逼经历,于是我决定开始写自己的博客😁</p><h2 id="2-博客选型😬"><a href="#2-博客选型😬" class="headerlink" title="2 博客选型😬"></a>2 博客选型😬</h2><p>  接下来我陷入了沉思,我是应该是博客园,csdn.写还是找一个可以装逼的地方写呢，正所谓<code>无装逼,不程序</code>,经过我多方打听最终还是选择了git-page和hexo结合的方式👾.写博客的同时还能掌握点技术~~如果我成功了，我会写在我的博客里面哒。<br><img src="https://s3.ax1x.com/2021/02/18/yWEvKU.png"></p><hr><h2 id="3-写博客的好处😏"><a href="#3-写博客的好处😏" class="headerlink" title="3 写博客的好处😏"></a>3 写博客的好处😏</h2><p>  接下来我又陷入了沉思(我老沉思个🐔啊),又不是所有的大佬都跟上文说到的老王一样心情不好把服务器给停了。总结那么多已经有的东西是不是在浪费网络环境和自己的时间,就在这个期间我看到了阮一峰大佬的博客,受益颇深😻,就是下图。<br><img src="https://s3.ax1x.com/2021/02/18/yWV6LF.png"></p><hr><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h2><p>  不太清楚搬运其他大佬博主的文章算不算得上侵权😟,我都会标明出处。并且用自身的理解再次编辑一下.这篇文章就算是新年的一个flag吧。希望可以一周两更🤩.加油吧.也希望各位掘友都有一个属于自己的博客.我后期也会把我搭建的过程一点点的发出来。实现资源共享,我辈义不容辞。这是第一次在网络上逼逼赖赖，希望大家都可以有一个属于自己的博客。</p><h2 id="5-你们可能会问的？"><a href="#5-你们可能会问的？" class="headerlink" title="5 你们可能会问的？"></a>5 你们可能会问的？</h2><blockquote><ul><li>文章中的小表情是怎么出来的？windows <code>win+句号</code>（mac本自己去查吧，我也不清楚😭）</li><li>文章是用什么写的？<a href="https://www.mdnice.com/">mdnice(非常好用的排版工具，我也还在变弄边学。)</a></li><li>你自己的博客地址呢？还没弄嘤嘤嘤😥，不过今天晚上我就要弄出来😻。</li><li>阮一峰大佬的博客地址 <a href="https://www.ruanyifeng.com/blog/2006/12/why_i_keep_blogging.html">为什么要写blog</a></li><li>这篇文章的图片我用的是<a href="https://imgchr.com/">过路图床</a>贼好用🎨强烈推荐，再也不用臃肿的base64了。</li></ul></blockquote><p>PS： 第一次发文章，弄了一下午😥。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码人生</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>electron调用第三方dll</title>
    <link href="/2022/05/17/electron%E8%B0%83%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9dll/"/>
    <url>/2022/05/17/electron%E8%B0%83%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9dll/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://juejin.cn/post/7090088327260569630">上一篇文章</a>有说到过我们可能会遇到使用<code>Electron</code>调用第三方提供的<code>dll</code>，今天就来详细的说一下如何调用<code>dll</code>库，坑巨多，让我娓娓道来😣，如果对<code>Electron</code>还不太熟悉的小伙伴可以看我的上一篇文章，下面的内容可能会多次提到。建议看完<a href="(https://juejin.cn/post/7090088327260569630)">上一篇</a>，再来看这一篇会更加清晰哦🤣。</p><h2 id="依赖库选择"><a href="#依赖库选择" class="headerlink" title="依赖库选择"></a>依赖库选择</h2><p>当收到这个需求的时候，肯定也是一脸蒙😌，我一个前端也没写过<code>dll</code>，我怎么来调用啊?做过<code>nodejs</code>的同学应该能清楚它提供了这样的能力🤙，如果是用<code>c++</code>生成的<code>dll</code>可能会用到<a href="https://github.com/node-ffi-napi/node-ffi-napi"><code>ffi-napi</code></a>这个库,如果是<code>c#</code>生成的<code>dll</code>就会使用到<a href="https://github.com/tjanczuk/edge"><code>edge</code></a>这个库😄,因为我们公司都是用<code>c#</code>编写的<code>dll</code>，所以我会主要介绍一下<code>edge</code>,<code>c++</code>调用<code>dll</code>的文章可以看<a href="https://www.jianshu.com/p/dd9463dead8c">这篇</a>我有好多坑都是看了这篇文章才清楚，抱拳了✊。</p><h2 id="NodeJs调用dll"><a href="#NodeJs调用dll" class="headerlink" title="NodeJs调用dll"></a>NodeJs调用dll</h2><ul><li>创建demo项目<figure class="highlight coffeescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coffeescript"><span class="hljs-comment">#找到一个空目录执行</span><br><span class="hljs-built_in">npm</span> init --<span class="hljs-literal">yes</span><br></code></pre></div></td></tr></table></figure></li><li>安装edge<figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada">npm install edge <span class="hljs-comment">--save</span><br></code></pre></div></td></tr></table></figure></li><li>创建index.js<figure class="highlight livescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs livescript"><span class="hljs-comment"># 官网示例</span><br><span class="hljs-keyword">var</span> edge = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;edge&#x27;</span>);<br><span class="hljs-keyword">var</span> helloWorld = edge.func(`<br>    <span class="hljs-keyword">async</span> (input) =&gt; &#123; <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;.NET Welcomes &quot;</span> + input.ToString(); <br>    &#125;<br>`);<br>helloWorld(<span class="hljs-string">&#x27;JavaScript&#x27;</span>, <span class="hljs-keyword">function</span> (error, result) &#123;<br>    <span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">throw</span> error;<br>    console.log(result);<br>&#125;);<br></code></pre></div></td></tr></table></figure></li><li>运行（噩梦降临👇）<figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">index</span>.js<br></code></pre></div></td></tr></table></figure>不出意外它报错了，报错内容如下。</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0aaf955dae344688ae41d7f4ea298283~tplv-k3u1fbpfcp-zoom-1.image"><br>根据报错内容我们可以发现，<code>edge</code>尚未针对 <code>node.js </code>版本<code>v16.14.0</code>进行预编译🍺，我第一点想的就是是不是我的<code>nodejs</code>版本太高了🎥，但是它有没说让我降到哪个版本我应该怎么改啊😣，于是我就去<code>Google</code>🦠,发现<code>edge</code>只支持低版本的<code>nodejs</code>并且作者已经好久不维护了，如果使用的是<code>12.x</code>以上版本的nodejs需要使用<a href="https://github.com/agracio/edge-js"><code>edge-js</code></a>这个库(我滴个亲娘嘞🤦‍♀️)。</p><blockquote><p>好的地方就是它的用法与<code>edge</code>只需要将引用的<code>edge</code>改成<code>edge-js</code>就可以了</p></blockquote><ul><li>修改之后，大功告成</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6010166c998e4c2188d9cff14d6d0903~tplv-k3u1fbpfcp-zoom-1.image"></p><ul><li>找你的<code>c#</code>同时去开发一个<code>dll</code>，告诉她只输出一句话就行，分分钟搞定😄，如果不好意思找的同事，我也分享一下我的<code>Demo.dll</code>,具体内容可以查看下方👇。<blockquote><p>链接：<a href="https://pan.baidu.com/s/1K6teI3la2sBDkKNpAPjAPA">https://pan.baidu.com/s/1K6teI3la2sBDkKNpAPjAPA</a><br>提取码：z3s0</p></blockquote></li><li>在项目的根目录引入dll文件</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9f48702942db4f249627202691d169b4~tplv-k3u1fbpfcp-zoom-1.image"></p><ul><li>修改index.js<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> edge = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;edge-js&#x27;</span>);<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">var</span> invoke1=edge.<span class="hljs-title function_">func</span>(&#123;<br>    <span class="hljs-attr">assemblyFile</span>:path.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&quot;Demo.dll&quot;</span>), <span class="hljs-comment">//找到对应的dll文件</span><br>    <span class="hljs-attr">typeName</span>:<span class="hljs-string">&quot;Demo.Startup&quot;</span>, <span class="hljs-comment">// C#中class的名字就是StartUp</span><br>    <span class="hljs-attr">methodName</span>: <span class="hljs-string">&quot;Invoke&quot;</span> <span class="hljs-comment">// 导出dll的方法名</span><br>&#125;)<br><span class="hljs-title function_">invoke1</span>(<span class="hljs-string">&quot;入参&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">err,result</span>)<br>&#123;<br>    <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">throw</span> err;   <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<br>&#125;); <br></code></pre></div></td></tr></table></figure></li><li>运行(噩梦再次降临👇)<figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">index</span>.js<br></code></pre></div></td></tr></table></figure>你可能会遇到如下错误<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d8479ac9d3a7493e8525ff67f3dff4d3~tplv-k3u1fbpfcp-zoom-1.image"></li></ul><p>解决方案（联系的<code>dll</code>开发同事，将下面的话转述给他）</p><blockquote><p>引入<code>C#</code>类库时不要使用<code>netcore</code>版本🥩,需要使用<code>.net framework 4.x</code>版本的类库（解决办法简单，找办法的经历实在太过痛苦🎍）</p></blockquote><ul><li>重新引入dll，大功告成</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0aaaed944795495b8219ff5eae59e5a2~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="Electron中调用dll"><a href="#Electron中调用dll" class="headerlink" title="Electron中调用dll"></a>Electron中调用dll</h2><p>在<code>edge-js</code>官网中要是看的仔细的小伙伴可以发现如果在<code>Electron</code>中调用<code>dll</code>需要使用<a href="https://github.com/agracio/electron-edge-js"><code>electron-edge-js</code></a>库而不是<code>edge-js</code>在<a href="https://juejin.cn/post/7090088327260569630">上一篇文章</a>已经说过了怎么创建<code>Electron</code>项目这里就不再赘述了，只把新增的代码在这里说一下。</p><ul><li>在上一章的<code>render-&gt;index.js</code>中增加如下代码<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 调用dll</span><br><span class="hljs-keyword">const</span> edge = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;electron-edge-js&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(path.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&quot;Demo.dll&quot;</span>))<br><span class="hljs-keyword">var</span> invoke1 = edge.<span class="hljs-title function_">func</span>(&#123;<br>  <span class="hljs-attr">assemblyFile</span>: path.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&quot;Demo.dll&quot;</span>),<br>  <span class="hljs-attr">typeName</span>: <span class="hljs-string">&quot;Demo.Startup&quot;</span>,<br>  <span class="hljs-attr">methodName</span>: <span class="hljs-string">&quot;Invoke&quot;</span><br>&#125;)<br><span class="hljs-title function_">invoke1</span>(<span class="hljs-string">&quot;入参&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">err, result</span>) &#123;<br>  <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">throw</span> err;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<br>&#125;);<br></code></pre></div></td></tr></table></figure></li><li>运行（噩梦第三次降临👇）<figure class="highlight coffeescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> start <br></code></pre></div></td></tr></table></figure>同样的问题，这次说的是<code>electron</code>的版本太高了（我本地的nodejs版本是16.14.0）还是没有告诉我<code>Electron</code>应该降到什么版本🥙。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/628ebc3c9de44579abe9226a0b92a898~tplv-k3u1fbpfcp-zoom-1.image"><br>在官网我看到了这样一张图。</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/79bd8552515440b3b805935d70c67b61~tplv-k3u1fbpfcp-zoom-1.image"></p><p>我抱着试试看的态度把<code>electron</code>的版本降低到了<code>13.0.0</code>（它成功了，但其实我没有降低<code>nodejs</code>的版本）<br><code>electron：13.0.0</code> <code>NodeJs：16.14.0</code></p><ul><li>重新运行<figure class="highlight coffeescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> start <br></code></pre></div></td></tr></table></figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/19e57355f1be43909e72b8db24d02fe1~tplv-k3u1fbpfcp-zoom-1.image"></li></ul><h2 id="在集成Electron的vue项目中调用dll"><a href="#在集成Electron的vue项目中调用dll" class="headerlink" title="在集成Electron的vue项目中调用dll"></a>在集成Electron的vue项目中调用dll</h2><blockquote><p>可能有的小伙伴会问了，上面的案例已经在<code>Electron</code>中调用<code>dll</code>了为什么还要在单独列出来一个类目啊？</br><br> 答：我也不想啊，你试试就知道了，他是真的不一样呀😥</p></blockquote><ul><li>在上一章创建的<code>vue</code>项目的根目录增加<code>resources</code>目录将<code>dll</code>文件拷贝过去。</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4023f25c161640a3944783889eb99020~tplv-k3u1fbpfcp-zoom-1.image"></p><ul><li>给项目中的某个元素增加一个点击事件，内容如下，其实跟上面的代码都是一样的<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> edge = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;electron-edge-js&#x27;</span>);<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-keyword">var</span> invoke1 = edge.<span class="hljs-title function_">func</span>(&#123;<br>    <span class="hljs-attr">assemblyFile</span>: path.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&quot;resources/Demo.dll&quot;</span>),<br>    <span class="hljs-attr">typeName</span>: <span class="hljs-string">&quot;Demo.Startup&quot;</span>,<br>    <span class="hljs-attr">methodName</span>: <span class="hljs-string">&quot;Invoke&quot;</span><br>  &#125;)<br><span class="hljs-title function_">invoke1</span>(<span class="hljs-string">&quot;shuchuneirong&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">err, result</span>) &#123;<br>      <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">throw</span> err;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<br>&#125;);<br></code></pre></div></td></tr></table></figure></li><li>运行(噩梦他说来就来啊👇)<figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">npm <span class="hljs-built_in">run</span> electron:serve<br></code></pre></div></td></tr></table></figure>还是同样的错误！！！！我是真的蒙了，我刚刚不是解决了吗？我是解决个寂寞吗？，我已经出现自我怀疑了</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8cbbc7eb54ec4cf5887d479a70b1cd93~tplv-k3u1fbpfcp-zoom-1.image"></p><p>我又想起了官网的那种图是不是因为我的<code>nodejs</code>版本太高了🚞。因为官网写的是<code>electron13.x</code>对应的<code>nodejs14.16.0</code>🚔，于是我又开始降低<code>nodejs</code>的版本这块也有很多坑🛸，后面会专门写一篇使用<code>nvm</code>管理多版本<code>nodeJs</code>，果然上天这次没有眷顾我 我失败了,我下了三个版本的<code>node</code>都是同样的问题🤶。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f5b04d81a3c24090b46e62dfff03cfc6~tplv-k3u1fbpfcp-zoom-1.image"></p><p>经过一天的浏览我看到文章开头的那篇<a href="">文章</a>找到了办法，实际办法就在官网。</p><ul><li>需要在<code>vue.config.js</code>中增加红框的代码</li></ul><blockquote><p>因为<code>electron-edge-js</code>模块中包含原生<code>C代码</code>，所以要在运行的时候再获取，而不是被<code>webpack</code>打包到<code>bundle</code>中（解决办法简单，找办法的过程好苦哦）</p></blockquote><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bd959793b84a4559ad3cb6123076f8c8~tplv-k3u1fbpfcp-zoom-1.image"></p><ul><li>重新运行,大功告成</li></ul><h2 id="Electron带dll打包"><a href="#Electron带dll打包" class="headerlink" title="Electron带dll打包"></a>Electron带dll打包</h2><p>运行时正常，打包之后异常，报如下错误</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fb61f4a8b81f46288d6c245f6f288918~tplv-k3u1fbpfcp-zoom-1.image"><br>看描述应该是找不到我们的<code>Demo.dll</code>文件了，因为打包的时候👩‍🏫，没有将项目中的<code>dll</code>文件拷贝到最终生成的<code>dist_electron\win-unpacked</code> 文件夹中🛀。</p><ul><li>解决方案</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a81eff4c4ca541a0b423a14b18f105a1~tplv-k3u1fbpfcp-zoom-1.image"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4592e5acc4c84ffdbe810baab28c25de~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>Electron</code>调用dll的坑确实很多，相同的问题采用的是不同的解决办法，还是需要一点一点去摸索，反复切换nodeJs版本的时候也尝尽了苦头，下次再说吧。非常感谢参考链接下的作者👇，争做分享先锋，不做白嫖党。加油！🙋‍♂️</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f89dd4b334394cf8a1427e43649a22b3~tplv-k3u1fbpfcp-zoom-1.image"></p><h5 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h5><ul><li><p><a href="https://cxybb.com/article/kyq0417/111310539#5EdgeC__35">VUE+Electron+Edge开发中遇到的坑</a></p></li><li><p><a href="https://segmentfault.com/a/1190000019402908">如何在Electron中调用Dll</a></p></li><li><p><a href="https://www.jianshu.com/p/dd9463dead8c">Electron9.x +vue+ffi-napi 调用Dll动态链接库</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Electron</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>uni-app拿捏🤏</title>
    <link href="/2022/05/17/uni-app%E6%8B%BF%E6%8D%8F/"/>
    <url>/2022/05/17/uni-app%E6%8B%BF%E6%8D%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="我付出了这么多，你怎么超越我啊👨‍🔧"><a href="#我付出了这么多，你怎么超越我啊👨‍🔧" class="headerlink" title="我付出了这么多，你怎么超越我啊👨‍🔧"></a>我付出了这么多，你怎么超越我啊👨‍🔧</h1><h2 id="前言（为什么要使用uni-app）"><a href="#前言（为什么要使用uni-app）" class="headerlink" title="前言（为什么要使用uni-app）"></a>前言（为什么要使用uni-app）</h2><ul><li>一套代码可以发布到小程序,<code>app</code>,<code>h5</code>等。目前支持几乎所有平台的小程序😏</li><li>只需掌握<code>Vue</code>语法即可，上手极快🤔</li><li>不需要app原生开发程序员了，减少成本。</li></ul><h2 id="前期准备工作"><a href="#前期准备工作" class="headerlink" title="前期准备工作"></a>前期准备工作</h2><ul><li> 创建项目和打包尽量使用<code>HbuilderX</code>开发工具 <code>HubilderX</code>自带了<code>uni-app</code>的运行环境🌮，包括后续如果<code>uni-app</code>升级了 你只需要更新编辑器就可以了始终保持编辑器是最新的✨。然后代码逻辑的编写建议还是使用自己熟悉的编辑器🍤。</li><li>创建项目，熟悉目录结构🍵。 </li><li>详细了解 manifest.json文件中每一个参数的意义🍐（下文有视频讲解哦🖼）</li></ul><h2 id="组件-插件引入以及使用"><a href="#组件-插件引入以及使用" class="headerlink" title="组件/插件引入以及使用"></a>组件/插件引入以及使用</h2><h3 id="早期组件的引用方式"><a href="#早期组件的引用方式" class="headerlink" title="早期组件的引用方式"></a>早期组件的引用方式</h3><p>这种的引用方式其实已经足够清晰了🎏，但是总有小伙伴觉得麻烦🎍。</p><ul><li><code>import</code>导入组件</li><li><code>components</code>里注册组件</li><li>   <code>template</code>中使用组件</li></ul><h3 id="现在的引用方式"><a href="#现在的引用方式" class="headerlink" title="现在的引用方式"></a>现在的引用方式</h3><blockquote><p>只要组件安装在项目的<code>components</code>目录下或<code>uni_modules</code>目录下，并符合<code>components</code>/组件名称/组件名称.<code>vue</code>目录结构✨。就可以不用引用、注册，直接在页面中使用(<code>easycom</code>组件规范<code>HBuilderX 2.5.5</code>起支持)</p></blockquote><h2 id="UI组件"><a href="#UI组件" class="headerlink" title="UI组件"></a>UI组件</h2><p>  <a href="https://www.uviewui.com/components/layout.html">uview</a>👓</p><blockquote><h6 id="安装方式有两种选择"><a href="#安装方式有两种选择" class="headerlink" title="安装方式有两种选择!"></a>安装方式有两种选择!</h6><ul><li><a href="https://ext.dcloud.net.cn/">插件市场进行安装</a> (提供了丰富的插件)</li><li>通过<code>npm</code>进行安装(尽量使用插件市场进行安装插件包，有可能有一些<code>npm</code>提供的包，<code>uni-app</code>支持的不是很好)</li></ul></blockquote><p>  <a href="https://uniapp.dcloud.io/component">原生组件</a> 原生组件也提供很多好用的组件👓</p><h2 id="开发中遇到的问题"><a href="#开发中遇到的问题" class="headerlink" title="开发中遇到的问题"></a>开发中遇到的问题</h2><h5 id="路由跳转"><a href="#路由跳转" class="headerlink" title="路由跳转"></a><a href="https://uniapp.dcloud.io/api/router">路由跳转</a></h5><blockquote><ul><li>页面之间跳转 : <code>uni.navigateTo </code></li><li><code>tabBar</code>之间跳转: <code>uni.switchTab</code><br>由<code>A</code>页面填写表单跳转到<code>B</code>页面，再由<code>B</code>页面跳转到<code>A</code>页面 填写的表单消失了原因是使用了<code>uni.navigateTo</code>应该使用<code>uni.navigateBack</code> 路由跳转建议使用<a href="https://www.uviewui.com/js/route.html">uview中提供的路由跳转</a></li></ul></blockquote><h5 id="任意组件通信"><a href="#任意组件通信" class="headerlink" title="任意组件通信"></a><a href="https://ask.dcloud.net.cn/article/36010">任意组件通信</a></h5> <figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">uni.$emit(<span class="hljs-string">&#x27;事件名&#x27;</span>,&#123;params&#125;) <span class="hljs-comment">// 发起事件</span><br>uni.$on(<span class="hljs-string">&#x27;事件名&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">params</span>)=&gt;</span>&#123;&#125;) <span class="hljs-comment">// 监听事件</span><br>uni.$once(<span class="hljs-string">&#x27;事件名&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">params</span>)=&gt;</span>&#123;&#125;) <span class="hljs-comment">// 只监听事件一次 </span><br>uni.$off(<span class="hljs-string">&#x27;移除事件&#x27;</span>) <span class="hljs-comment">// 移除事件</span><br></code></pre></div></td></tr></table></figure><h5 id="版本兼容问题"><a href="#版本兼容问题" class="headerlink" title="版本兼容问题"></a>版本兼容问题</h5><p><img src="https://s1.ax1x.com/2022/04/11/LExfqH.png"><br>app打包之后或者在编辑器上运行时可能遇到上图中的问题，有两种解决办法`🎐。</p><ul><li>升级HubilderX的版本🎊(保证本地环境的版本与线上打包的版本一致)</li><li>使用版本忽略🎃（不推荐,因为毕竟是版本不统一，可能会造成异常）<br>在manifest.json文件的源码视图中配置忽略这个提醒，在“app-plus”-&gt;”compatible” 节点下添加配置<figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">&#123;<br>  <span class="hljs-string">&quot;app-plus&quot;</span>: &#123;  <br>      <span class="hljs-string">&quot;compatible&quot;</span>: &#123;  <br>          <span class="hljs-string">&quot;ignoreVersion&quot;</span>: true <span class="hljs-regexp">//</span>true表示忽略版本检查提示框，HBuilderX1.<span class="hljs-number">9.0</span>及以上版本支持  <br>      &#125;,  <br>  <span class="hljs-regexp">//</span>....  <br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="移动端的启动动画，如何兼容各种手机分辨率的适配。"><a href="#移动端的启动动画，如何兼容各种手机分辨率的适配。" class="headerlink" title="移动端的启动动画，如何兼容各种手机分辨率的适配。"></a>移动端的启动动画，如何兼容各种手机分辨率的适配。</h5><blockquote><p>使用<a href="https://ask.dcloud.net.cn/article/35527">.9png</a>里面有具体制作方法<br>也可以让设计部帮咱们出.9png的图片。</p></blockquote></li></ul><h5 id="plus-is-not-defined"><a href="#plus-is-not-defined" class="headerlink" title="plus is not defined"></a><a href="https://www.html5plus.org/doc/h5p.html"><code>plus is not defined</code></a></h5><blockquote><p><code>plus</code>是<code>5+Runtime</code>的内部对象。只有在手机端才能使用·进行调用 解决办法: 在系统中判断版本 <code>uni.getSystemInfoSync().platform</code>如果不用考虑网页端不加该判断也可以</p></blockquote><h5 id="为什么要使用本地打包"><a href="#为什么要使用本地打包" class="headerlink" title="为什么要使用本地打包?"></a>为什么要使用本地打包?</h5><blockquote><p>包名规范 (打包的作用就是帮助我们生成<code>APK</code>、<code>IPA</code>文件)</p><ul><li>包名必须包含至少两个段，由一个或多个点隔开。例如：<code>com.abc</code>，<code>tencent.qq.mm</code>；</li><li>每个段的字符必须是小写字母、数字或下划线<code>[a-z0-9_]</code>组成；<br>每个段必须以字母开头</li></ul></blockquote><p>  <a href="https://ask.dcloud.net.cn/article/35777">Android证书</a><br> <figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-number">1.</span>安装<span class="hljs-variable constant_">JRE</span>环境<br><span class="hljs-number">2.</span>keytool -genkey -alias testalias -keyalg <span class="hljs-variable constant_">RSA</span> -keysize <span class="hljs-number">2048</span> -validity <span class="hljs-number">36500</span> -keystore test.<span class="hljs-property">keystore</span><br><span class="hljs-number">3.</span>testalias是证书别名，可修改为自己想设置的字符，建议使用英文字母和数字<br><span class="hljs-number">4.</span>test.<span class="hljs-property">keystore</span>是证书文件名称，可修改为自己想设置的文件名称，也可以指定完整文件路径<br><span class="hljs-number">5.</span><span class="hljs-number">36500</span>是证书的有效期，表示<span class="hljs-number">100</span>年有效期，单位天，建议时间设置长一点，避免证书过期<br><span class="hljs-number">6.</span>keytool -list -v -keystore test.<span class="hljs-property">keystore</span>   <span class="hljs-comment">//查看证书信息</span><br><span class="hljs-number">7.</span><span class="hljs-title class_">Enter</span> keystore <span class="hljs-attr">password</span>: <span class="hljs-comment">//输入密码，回车</span><br></code></pre></div></td></tr></table></figure><br> 为什么要使用本地打包？如果某一天 你需要对接一个第三方的<code>sdk</code> 比如说一个<code>NFC</code>扫描身份证的功能🧵，对方提供的<code>sdk</code>是<code>jar</code>包的这种形式在<code>uni-app</code>中是无法进行实现的（当然也可能是因为我水平不够🤦‍♂️），只能通过本地打包的形式在原生<code>android</code>中进行实现。其余情况使用云打包是非常方便的🛒。</p><h6 id="uni-app和jar包之间的通信如何实现？"><a href="#uni-app和jar包之间的通信如何实现？" class="headerlink" title="uni-app和jar包之间的通信如何实现？"></a>uni-app和jar包之间的通信如何实现？</h6><ul><li>在离线打包的项目中新建一个实现类</li><li>在实现类中调用第三方的jar包提供的sdk</li><li>在uni-app中调用实现类的方法实现通信<figure class="highlight csharp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs csharp">安卓端：<br>package com.hji.test;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">AddCount</span> &#123;  <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">androidAdd</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> a, <span class="hljs-built_in">int</span> b</span>)</span> &#123;  <br>    <span class="hljs-comment">// 这块就是安卓调用第三方sdk的方法</span><br>        <span class="hljs-keyword">return</span> a + b;  <br>    &#125;  <br>&#125;  <br>Uni-app端:<br> addUniApp()&#123;  <br>     <span class="hljs-keyword">var</span> AddCount = plus.android.importClass(<span class="hljs-string">&#x27;com.hji.test.AddCount&#x27;</span>);  <br>     <span class="hljs-keyword">var</span> addCount = <span class="hljs-keyword">new</span> AddCount();  <br>     <span class="hljs-keyword">this</span>.result1 = androidAdd.<span class="hljs-keyword">add</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);  <br>&#125;<br></code></pre></div></td></tr></table></figure><a href="https://ask.dcloud.net.cn/article/88">Native.js</a><blockquote><p>如果跟原生安卓有交互是一定要用到<code>native.js</code>的就像官网说的一样🎯;如果说<code>Node.js</code>把<code>js</code>扩展到服务器世界🚘，那么<code>Native.js</code>则把<code>js</code>扩展到手机<code>App</code>的原生世界,所以想要精通uni-app Native.js还是要有一定的了解的🍣。</p></blockquote></li></ul><h4 id="获取中文的地理位置信息（使用高德地图）-高德地图开放平台，app手机通知uniPush，后台常驻。"><a href="#获取中文的地理位置信息（使用高德地图）-高德地图开放平台，app手机通知uniPush，后台常驻。" class="headerlink" title="获取中文的地理位置信息（使用高德地图） 高德地图开放平台，app手机通知uniPush，后台常驻。"></a>获取中文的地理位置信息（使用高德地图） 高德地图开放平台，app手机通知uniPush，后台常驻。</h4><blockquote><p>以上东西用起来还是有很多坑的，一一描述起来还是很困难的🎃，如果有小伙伴感兴趣，可以留言我们一起进步🙆‍♂️</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p> 其实<code>uni-app</code>提供的是一种框架实际上内部大多是都是vue的语法所以大家学习<strong>uni-app</strong>的前提一定要有vue的基础🍗，听说现在已经支持<code>vue3.0</code>了 大佬们都在努力，我们有什么资格不努力呀🎨。 加油！🍝</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>uni-app</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>keep-alive与router-view的相爱相杀</title>
    <link href="/2022/05/17/keep-alive%E4%B8%8Erouter-view%E7%9A%84%E7%9B%B8%E7%88%B1%E7%9B%B8%E6%9D%80/"/>
    <url>/2022/05/17/keep-alive%E4%B8%8Erouter-view%E7%9A%84%E7%9B%B8%E7%88%B1%E7%9B%B8%E6%9D%80/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>由于目前做的项目都是基于<code>tab</code>导航的项目，目的就是要在页面跳转时实现记住上一个页面的搜索项或者表单值，减少请求，增加效率，第一反应就是<code>keep-alive</code>,紧接着我的噩梦就来了😫。<code>ps</code>:看封面图进来的记得收藏哦🍭</p></blockquote><h2 id="keep-alive概念"><a href="#keep-alive概念" class="headerlink" title="keep-alive概念"></a>keep-alive概念</h2><h6 id="属性："><a href="#属性：" class="headerlink" title="属性："></a>属性：</h6><ul><li><code>include</code> 只有<strong>名称</strong>匹配的组件会被缓存🙄(名称指的是组件中定义的name)。</li><li><code>exclude</code>。任何名称匹配的组件都不会被缓存🧵。</li><li><code>max</code>。最多可以缓存多少组件实例🥙。</li></ul><h6 id="用法："><a href="#用法：" class="headerlink" title="用法："></a>用法：</h6><p><code>&lt;keep-alive&gt;</code> 包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。和 <code>&lt;transition&gt;</code> 相似，<code>&lt;keep-alive&gt;</code> 是一个抽象组件🍤：它自身不会渲染一个 <code>DOM</code> 元素，也不会出现在组件的父组件链中🥧。</p><p>当组件在 <code>&lt;keep-alive&gt;</code> 内被切换，它的 <code>activated</code> 和 <code>deactivated</code> 这两个生命周期钩子函数将会被对应执行🚃，因为我们可能会需要将整个路由页面缓存下来所以就要将<code>&lt;router-view&gt;</code>进行缓存🛴。</p><h6 id="执行顺序："><a href="#执行顺序：" class="headerlink" title="执行顺序："></a>执行顺序：</h6><ul><li>页面第一次进入，钩子的触发顺序<code>created-&gt; mounted-&gt; activated</code>，退出时触发<code>deactivated</code>。当再次进入（前进或者后退）时，只触发<code>activated</code>🦼。</li></ul><h2 id="router-view概念"><a href="#router-view概念" class="headerlink" title="router-view概念"></a>router-view概念</h2><blockquote><ul><li><code>&lt;router-view&gt;</code>组件是一个功能组件，它为给定路径呈现匹配的组件🎨。渲染的组件<code>&lt;router-view&gt;</code>也可以包含自己的<code>&lt;router-view&gt;</code>，这将为嵌套路径渲染组件🤴。</li></ul></blockquote><p><code>router-view</code> <strong>key</strong>属性（每个组件都有一个<code>key</code>属性，<code>vue</code>会复用相同组件如果需要重新渲染可以使用不同的<code>key</code>进行）🛒</p><blockquote><ol><li><strong>不设置 <code>router-view</code> 的 <code>key</code> 属性</strong><br>由于 Vue 会复用相同组件, 即 <code>/page/1 =&gt; /page/2</code> 或者 <code>/page?id=1 =&gt; /page?id=2</code> 这类链接跳转时, 🍆将不在执行<code>created</code>, <code>mounted</code>之类的钩子, 🍱这时候你需要在路由组件中, 添加<code>beforeRouteUpdate</code>钩子来执行相关方法拉去数据🥯。</li></ol></blockquote><blockquote><ol start="2"><li><strong>设置 <code>router-view</code> 的 <code>key</code> 属性值为 <code>$route.path</code></strong><br>从<code>/page/1 =&gt; /page/2</code>, 由于这两个路由的<code>$route.path</code>并不一样, 🍵所以组件被强制不复用, 相关钩子从<code>/page?id=1 =&gt; /page?id=2</code>,🍦 由于这两个路由的<code>$route.path</code>一样, 所以和没设置 <code>key</code> 属性一样, 会复用组件🥡。</li></ol></blockquote><blockquote><ol start="3"><li> <strong>设置 <code>router-view</code> 的 <code>key</code> 属性值为 <code>$route.fullPath</code></strong><br>从<code>/page/1 =&gt; /page/2</code>, 由于这两个路由的<code>$route.fullPath</code>并不一样, 所以组件被强制不复用🥙,<br>从<code>/page?id=1 =&gt; /page?id=2</code>, 由于这两个路由的<code>$route.fullPath</code>并不一样, 所以组件被强制不复用🥪。</li></ol></blockquote><h2 id="写法"><a href="#写法" class="headerlink" title="写法"></a>写法</h2><h3 id="vue2-0的写法"><a href="#vue2-0的写法" class="headerlink" title="vue2.0的写法"></a>vue2.0的写法</h3><figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elixir"><span class="hljs-comment"># 包裹组件</span><br><span class="hljs-comment"># currentTabComponent 代表组件名</span><br><span class="hljs-comment"># 例如一个项目引用了多个组件通过相应事件修改currentTabComponent的值达到动态组件缓存的功能</span><br>&lt;keep-alive&gt;<br>   &lt;component v-<span class="hljs-symbol">bind:</span>is=<span class="hljs-string">&quot;currentTabComponent&quot;</span>&gt;&lt;/component&gt;<br>&lt;/keep-alive&gt;<br><span class="hljs-comment"># 包裹路由</span><br><span class="hljs-comment"># a,b 代表组建名称</span><br>&lt;keep-alive <span class="hljs-symbol">:include=</span>[a,b]&gt;<br>    &lt;router-view <span class="hljs-symbol">:key=<span class="hljs-string">&quot;$route.fullPath&quot;</span>&gt;&lt;/router-view&gt;</span><br>&lt;/keep-alive&gt;<br></code></pre></div></td></tr></table></figure><h3 id="vue3-0的写法"><a href="#vue3-0的写法" class="headerlink" title="vue3.0的写法"></a>vue3.0的写法</h3><figure class="highlight dust"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dust"><span class="language-xml"> 包裹组件</span><br><span class="language-xml"># currentTabComponent 代表组件名</span><br><span class="language-xml"># 例如一个项目引用了多个组件通过相应事件修改currentTabComponent的值达到动态组件缓存的功能</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">v-bind:is</span>=<span class="hljs-string">&quot;currentTabComponent&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">keep-alive</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"># 包裹路由（3.0的写法有变更）key需要绑定到component中</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123; Component &#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span> <span class="hljs-attr">:include</span>=<span class="hljs-string">[a,b]</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;Component&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;$route.fullPath&quot;</span>/&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">keep-alive</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h2 id="项目实战"><a href="#项目实战" class="headerlink" title="项目实战"></a>项目实战</h2><p>无图言卵🤒，简单看一下我们最终实现的效果<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/95bb65d3b7664cedb3cd2688bb392482~tplv-k3u1fbpfcp-zoom-1.image"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e7df2f366db94b77b8660030345758a6~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="不使用keep-alive的效果"><a href="#不使用keep-alive的效果" class="headerlink" title="不使用keep-alive的效果"></a>不使用<code>keep-alive</code>的效果</h2><ul><li>所有的页面都不会缓存，凡是涉及到路由的跳转都会执行当前组件的<code>mounted</code>，🎏这样就会有一些性能上的消耗，导致加载过的数据还会重新加载进行渲染在进行上方导航切换的时候不会缓存之前填写的数据🧧。</li></ul><h2 id="所有都使用了keep-alive的效果"><a href="#所有都使用了keep-alive的效果" class="headerlink" title="所有都使用了keep-alive的效果"></a>所有都使用了<code>keep-alive</code>的效果</h2><ul><li>每个页面的第一次都会执行<code>mounted</code>，🧤之后再次访问该页面会进入缓存,导致我们在关闭的时候不会执行组件的销毁，加载的都是第一次加载的数据，新数据一直无法渲染🦺。</li></ul><h2 id="使用了keep-alive-通过include和vuex控制缓存"><a href="#使用了keep-alive-通过include和vuex控制缓存" class="headerlink" title="使用了keep-alive 通过include和vuex控制缓存"></a>使用了<code>keep-alive</code> 通过<code>include</code>和<code>vuex</code>控制缓存</h2><blockquote><p>通过这种方式当我们可以动态控制缓存的组件。</p><ul><li>当页面关闭的时候我们将不需要缓存的组件移除🍱，移除之后会执行组件的销毁生命周期🥂，在打开之前的页面会重新渲染有些时候这样就已经完美了🍟。</li><li>但是事情总是事与愿违，比如上图中的编辑😴，他们是不同的路由但是指向的组件是同一个（组件<code>name</code>肯定是相同的）🤢，这样就会导致我们同时打开两个编辑页面的时候,每次加载都是第一次的数据😣。</li></ul></blockquote><h2 id="最终方案：keep-alive-中的include-router-view中key"><a href="#最终方案：keep-alive-中的include-router-view中key" class="headerlink" title="最终方案：keep-alive 中的include + router-view中key"></a>最终方案：keep-alive 中的<strong>include</strong> + router-view中<strong>key</strong></h2><blockquote><p>我们在上面已经提到了<code>router-view</code>中<code>key</code>的作用🍊，所以我们只需要在<code>router-view</code>绑定<code>key</code>为<code>&quot;$route.fullPage&quot;</code>🥂<strong>如果是vue3.x需要将key值绑定至component上</strong>🥂 这样我们在点击列表不同项的编辑的时候每次走的都是最新的数据🍯，同时我们使用了<code>keep-alive</code>中的<code>include</code> 上方两个编辑页进行切换的时候就会走缓存🍻，不进行页面的加载🍵。</p></blockquote><h2 id="vue3-x-设置name"><a href="#vue3-x-设置name" class="headerlink" title="vue3.x 设置name"></a><code>vue3.x</code> 设置<code>name</code></h2><p><code>&lt;script setup&gt; </code>是在单文件组件 <code>(SFC) </code>中使用组合式<code> API</code> 的编译时语法糖。</p><blockquote><ul><li>我们在定义变量的时候不需要在使用data </li><li>方法不需要在使用methods可以直接在标签内定义变量和方法。</li></ul></blockquote><p><code>kepp-alive</code>中<code>include</code>需要组件<code>name</code>，在vue3.x中如何定义<code>name</code>变量呢?</p><blockquote><p>在<code>Vue3.x </code>会根据文件名推断组件的 <code>name</code>也就是说组件的文件名对应的就是<code>name</code>😘，如果你特别倔🤣，我就是想定义组件的名称也不是没有办法的🌯。</p><ol><li>写两个 <code>script</code> 标签</li><li>如果是通过vite构建的项目可以通过插件的方式（<code>vite-plugin-vue-setup-extend</code>）。</li></ol></blockquote><p>1.多个<code>script</code>标签</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;demo&#x27;</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// do something...</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ol start="2"><li><code>vite</code>构建插件引用</li></ol><figure class="highlight coffeescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coffeescript"><span class="hljs-comment"># 安装</span><br><span class="hljs-built_in">npm</span> i vite-plugin-vue-setup-extend -D<br><span class="hljs-comment"># 配置 vite.config.ts </span><br><span class="hljs-keyword">import</span> &#123; defineConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite&#x27;</span><br><span class="hljs-keyword">import</span> VueSetupExtend <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite-plugin-vue-setup-extend&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> defineConfig(&#123;<br>  plugins: [ VueSetupExtend()]<br>&#125;)<br><span class="hljs-comment"># 使用</span><br>&lt;script lang=<span class="hljs-string">&quot;ts&quot;</span> setup name=<span class="hljs-string">&quot;demo&quot;</span>&gt;<br><br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>当初就是因为对<code>keep-alive</code>的掌握不够透彻只是知道是什么东西🍄，在真正的项目中使用才会发现有很多问题,兄弟们告辞下次见🥤，稍微有点作用就三连一下哦🤑，有错误的地方尽管在评论区展示语言😏。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2e35c0c3a3b445edbbffb7fc80d3c305~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.zhihu.com/question/500937713">vue3.2 script setup定义的组件如何命名？</a></p><p><a href="https://cn.vuejs.org/index.html">Vue2官网</a></p><p><a href="https://v3.cn.vuejs.org/guide/introduction.html">Vue3官网</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>uni-app</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>App的开发方式如何拿捏🤏</title>
    <link href="/2022/05/17/App%E7%9A%84%E5%BC%80%E5%8F%91%E6%96%B9%E5%BC%8F%E5%A6%82%E4%BD%95%E6%8B%BF%E6%8D%8F%F0%9F%A4%8F/"/>
    <url>/2022/05/17/App%E7%9A%84%E5%BC%80%E5%8F%91%E6%96%B9%E5%BC%8F%E5%A6%82%E4%BD%95%E6%8B%BF%E6%8D%8F%F0%9F%A4%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="工欲善其事必先利其器📞"><a href="#工欲善其事必先利其器📞" class="headerlink" title="工欲善其事必先利其器📞"></a>工欲善其事必先利其器📞</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如果你之前一直都没用过移动端，只是有个细微的了解，这时候领导让你开发app📱你会咋办呢？😥，网上的技术超多(跨平台，原生，混合，PWA，webApp)怎么才能快速的选出来哪个是你上手最快的呢？😫这篇我把我选型道路上的总结分享给还在选型的小伙伴😁<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b034046a1ab546d9a0a1f9fb6206c9ab~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="招聘网站"><a href="#招聘网站" class="headerlink" title="招聘网站"></a>招聘网站</h2><p>这招简直无敌，适用于领导让你预言各种技术🤣，你就直接去招聘网站上面搜索对应的技术如果有很多大厂在用就证明你选择的技术还是可以的，毕竟能入大厂的法眼，这时你也会，无比的骄傲，这技术不就选完了吗。🍕其实这也只是第一步上面的信息只是能让你缩小范围🤔，还是要根据上级的需求以及上手的复杂程度来决定，还需要你自己多斟酌斟酌的哈~~接下来我们聊聊众多的App开发方式😄。</p><h3 id="安卓原生开发"><a href="#安卓原生开发" class="headerlink" title="安卓原生开发"></a>安卓原生开发</h3><p>对于Android移动应用程序开发，示例可以是<code>Kotlin</code>或<code>Java</code>前端的同学还是不要上手尝试了容易离职🙃。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8557017565714c3590baddb25f423ddc~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><blockquote><ul><li>很多更好的功能在离线环境</li><li>支持设备API，这意味着更高的可用性</li><li>针对每个平台定制的UI组件，可提升用户体验</li><li>可以访问所需的硬件-更容易防止错误</li><li>无需依赖开源库</li></ul></blockquote><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><blockquote><ul><li>如果您需要用于更多操作系统的本机移动应用程序，则需要更长的时间(比如微信小程序，支付宝小程序等等)</li><li>上手比较困难，特别是我们这种没有<code>java</code>开发经验的。</li></ul></blockquote><h3 id="WebApp"><a href="#WebApp" class="headerlink" title="WebApp"></a>WebApp</h3><p><code>Web App </code>是使用网页做的应用程序，必须在浏览器中使用，主要使用的就是<code>HTML</code>，<code>javascript</code>，<code>css</code>😝。2008年，<code>w3c</code> 组织发布了 <code>HTML</code> 第5版，简称 <code>HTML5 </code>，该版本大大增强了网页的功能，使得网页可以当作应用程序使用，而不仅仅是展示文字和图片，这就是 Web App 的由来🥨。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/90859a8692fa410291c514977333862a~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h2><blockquote><ul><li>不需要下载安装，打开浏览器就能使用，而且总是使用最新版本</li><li>对于开发者来说，Web App 写起来比较快，调试容易，不需要应用商店的批准就能发布。</li></ul></blockquote><h2 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h2><blockquote><ul><li>Web App 需要打开浏览器才能使用，这意味着，用户必须记住如何导航到它，要么直接输入网址，要么翻找书签,特别不方便,不能从手机的首屏直接进入。</li><li>缺乏手机状态栏和锁屏时的通知推送能力。</li><li>不支持脱机访问（即断网也能使用）</li></ul></blockquote><h3 id="渐进式-Web-App-PWA"><a href="#渐进式-Web-App-PWA" class="headerlink" title="渐进式 Web App(PWA)"></a>渐进式 Web App(PWA)</h3><p><code>webApp</code>的升级版它可以把网站缓存在手机里面，供离线时使用，还能在手机首屏生成图标，直接点击进入，并且有通知推送能力，也不带有浏览器的地址栏和状态栏，跟原生 <code>App</code> 的使用体验非常接近。也有很多网站提供了PWA的功能🍤。</p><ul><li><a href="https://github.com/lavas-project/lavas">lavas</a>(基于<code> Vue</code> 的 <code>PWA</code> 解决方案，帮助开发者快速搭建 <code>PWA</code> 应用)这个框架是基于<code>vue</code>的之前研究过一阵不过由于工作的原因最近也没有关注今天突然发现官网打不开了也不知道是什么原因。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/471654ac30e1413baed4368bbf0ecba5~tplv-k3u1fbpfcp-zoom-1.image"></li></ul><h3 id="混合应用（hybrid-App）"><a href="#混合应用（hybrid-App）" class="headerlink" title="混合应用（hybrid App）"></a>混合应用（hybrid App）</h3><p>混合 <code>App （hybrid App）</code>顾名思义就是原生 <code>App</code> 与<code> Web App</code> 的结合（Web 技术栈 + 容器技术栈）。它的壳是<code>原生 App</code>，但是里面放的是网页🎥。 可以理解成，混合 <code>App</code> 里面隐藏了一个浏览器，用户看到的实际上是这个隐藏浏览器渲染出来的网页。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/53615e03e070466f9277807b8cf931f6~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="相关技术"><a href="#相关技术" class="headerlink" title="相关技术"></a>相关技术</h2><ul><li><a href="http://www.phonegap100.com/">PhoneGap</a></li><li><a href="http://cordova.axuer.com/">Cordova</a></li><li><a href="https://www.runoob.com/ionic/ionic-tutorial.html">Ionic</a><h2 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h2></li></ul><blockquote><ul><li>Web 技术是跨平台的，开发者只写一次页面，就能支持多个平台。</li><li>Web 页面的调试和构建，远比原生控件简单省时（毕竟前端还是喜欢chrome的console）。</li><li>混合 App 的灵活性大，很容易集成多种功能。</li></ul></blockquote><h2 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h2><blockquote><ul><li>其实上手还是需要点门槛的，特别的容器栈学习如何调用硬件的API</li><li>复杂的应用程序无法通过此解决方案完美运行，更多功能会降低其运行速度</li></ul></blockquote><h3 id="跨平台应用程序开发"><a href="#跨平台应用程序开发" class="headerlink" title="跨平台应用程序开发"></a>跨平台应用程序开发</h3><p>跨平台技术栈指的是使用一种技术，同时支持多个手机平台。它与混合技术栈的区别是，不使用 <code>Web</code> 技术，即它的页面不是 <code>HTML5</code> 页面，而是使用自己的语法写的 <code>UI</code> 层🎊，然后编译成各平台的原生 App。<br>这个技术栈就是纯粹的容器技术栈,学习时，除了学习容器的 <code>API Bridge</code>，还要学习容器提供的 <code>UI</code> 层，即怎么写页面🧶。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/85a0ef77114c4f7992619bf9c7dbd540~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="相关技术-1"><a href="#相关技术-1" class="headerlink" title="相关技术"></a>相关技术</h2><ul><li><a href="https://reactnative.cn/docs/getting-started">React Native</a></li><li><a href="https://flutterchina.club/">Flutter</a>（适合后端）</li><li><a href="https://uniapp.dcloud.io/">uni-app</a>（适合前端）</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我猜你们应该知道选择什么作为你们的开发移动<code>app</code>的框架了吧🎈，其实各有各的好处，也各有各的缺点，还是要考虑到你们需求和成本🎡。因为我就是个单纯的前端开发 在网上一顿查找之后还是觉得<code>uni-app</code>比较适合我们的项目，前端上手也非常快🎨。只要你会<code>vue</code>我保证你当天就开发出一个简单的<code>app</code>，其实随着学习的深入也会感觉到有难处必须调用厂家给的安卓原生<code>sdk</code>（一堆<code>jar</code>包和<code>so</code>文件）我需要用uni-app离线打包，在写原生的代码其实也是很难的。还是各取所需吧😎。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://www.ruanyifeng.com/blog/2019/12/hybrid-app-concepts.html">H5手机App开发入门</a></p><p><a href="https://dzone.com/articles/native-vs-hybrid-vs-cross-platform-how-and-what-to">Native vs. Hybrid vs. Cross-Platform: How and What to Choose?</a></p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码人生</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Electron入门</title>
    <link href="/2022/05/17/Electron%E5%85%A5%E9%97%A8/"/>
    <url>/2022/05/17/Electron%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近公司要做<code>windows</code>客户端，但是公司还缺少<code>C#</code>的开发人员🎫，网上很早就有了<code>electron</code>实现<code>windows</code>客户端，于是就需要前端的同事通过<code>electron</code>来实现一款应用替代<code>C# winform </code>窗体🎨。</p><h2 id="什么是electron"><a href="#什么是electron" class="headerlink" title="什么是electron?"></a>什么是electron?</h2><blockquote><p>官网解释：使用 <code>JavaScript</code>，<code>HTML</code> 和 <code>CSS</code> 构建跨平台的桌面应用程序，每一个窗体就是对应的一个<code>html</code>页面</p></blockquote><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><p>官网也提供了快速入门的方案，相关代码如下。</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-comment">#克隆这个仓库</span><br>git 克隆 https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/electron/</span>electron-quick-start<br><span class="hljs-comment">#进入仓库</span><br>cd electron-quick-start<br><span class="hljs-comment">#安装依赖</span><br>npm 安装<br><span class="hljs-comment">#运行应用程序</span><br>npm start<br></code></pre></div></td></tr></table></figure><p>不出意外的情况下，你就会弹出如下窗口💚</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6cd773e915b44b01979405d92779c58e~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="自己实现hello-World"><a href="#自己实现hello-World" class="headerlink" title="自己实现hello World"></a>自己实现<code>hello World</code></h2><h4 id="全局安装Electron"><a href="#全局安装Electron" class="headerlink" title="全局安装Electron"></a>全局安装<code>Electron</code></h4><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake"><span class="hljs-comment"># 如果安装失败可以使用cnpm或者改用淘宝源进行安装(可以全局安装也可以局部安装)</span><br>npm <span class="hljs-keyword">install</span> -g electron<br></code></pre></div></td></tr></table></figure><h4 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h4><p>新建一个文件夹尽量使用英文，在该目录下执行</p><figure class="highlight coffeescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> init --<span class="hljs-literal">yes</span><br></code></pre></div></td></tr></table></figure><h4 id="创建入口文件也就是主进程文件（下文会提什么是主进程）要与package-json中main对应的文件名一致"><a href="#创建入口文件也就是主进程文件（下文会提什么是主进程）要与package-json中main对应的文件名一致" class="headerlink" title="创建入口文件也就是主进程文件（下文会提什么是主进程）要与package.json中main对应的文件名一致"></a>创建入口文件也就是主进程文件（下文会提什么是主进程）要与<code>package.json</code>中<code>main</code>对应的文件名一致</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * @Author: drinkwd</span><br><span class="hljs-comment"> * @Date: 2022-04-11 17:38:08</span><br><span class="hljs-comment"> * @LastEditors: drinkwd</span><br><span class="hljs-comment"> * @LastEditTime: 2022-04-12 14:25:18</span><br><span class="hljs-comment"> * @Description: 主进程入口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> &#123;app, <span class="hljs-title class_">BrowserWindow</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;electron&#x27;</span>)<br><span class="hljs-keyword">let</span> mainWindow = <span class="hljs-literal">null</span> <span class="hljs-comment">// 主窗口</span><br><span class="hljs-comment">// app代表electron的引用，BrowserWindow代表窗体</span><br><span class="hljs-comment">// 当app准本就绪之后创建一个800*600的窗体</span><br>app.<span class="hljs-title function_">whenReady</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 创建窗体</span><br>  mainWindow = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BrowserWindow</span>(&#123;<br>    <span class="hljs-attr">width</span>: <span class="hljs-number">800</span>,<br>    <span class="hljs-attr">height</span>: <span class="hljs-number">800</span>,<br>  &#125;)<br>  <span class="hljs-comment">// 加载渲染进程文件</span><br>  mainWindow.<span class="hljs-title function_">loadFile</span>(<span class="hljs-string">&#x27;index.html&#x27;</span>)<br>  <span class="hljs-comment">// 监听窗口关闭回调，减少资源占用</span><br>  mainWindow.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;closed&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    mainWindow = <span class="hljs-literal">null</span><br>  &#125;)<br>&#125;)<br></code></pre></div></td></tr></table></figure><h4 id="创建渲染进程文件（下文会提什么是渲染进程）"><a href="#创建渲染进程文件（下文会提什么是渲染进程）" class="headerlink" title="创建渲染进程文件（下文会提什么是渲染进程）"></a>创建渲染进程文件（下文会提什么是渲染进程）</h4><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Security-Policy&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;default-src &#x27;self&#x27;; script-src &#x27;self&#x27;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-Content-Security-Policy&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;default-src &#x27;self&#x27;; script-src &#x27;self&#x27;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    hello World<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="查看效果"><a href="#查看效果" class="headerlink" title="查看效果"></a>查看效果</h4><figure class="highlight coffeescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> start <span class="hljs-comment"># 不出意外的话会出现一个hello World窗体</span><br></code></pre></div></td></tr></table></figure><blockquote><p>如果报这个<code>Cannot find module &#39;fs/promises&#39;</code>错误，需要升级一下<code>nodejs</code>的版本</p></blockquote><h4 id="Electron中主进程与渲染进程的关系"><a href="#Electron中主进程与渲染进程的关系" class="headerlink" title="Electron中主进程与渲染进程的关系"></a>Electron中主进程与渲染进程的关系</h4><ul><li>一般一个程序只有一个主进程也就是package.json中对应的入口文件💨。</li><li>渲染进程就是在主进程中加载的html文件，一个程序可以有多个渲染进程，并由主进程读取控制💫。</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/752bfb8d048048d68a264192ce9d51b8~tplv-k3u1fbpfcp-zoom-1.image"></p><p>这个时候在回过头看上面的代码是不是眼前一亮，更加清晰明了🍺。</p><h4 id="基础案例"><a href="#基础案例" class="headerlink" title="基础案例"></a>基础案例</h4><blockquote><p>注：不同版本的<code>electron</code>有些语法可能会有区别，如果有效果没有生效，先查看版本在进行排错，可能会减少很多坑。</p></blockquote><h5 id="案例1-读取文件内容"><a href="#案例1-读取文件内容" class="headerlink" title="案例1 读取文件内容"></a>案例1 读取文件内容</h5><ul><li>在文件根目录创建<code>file.txt</code>文件<figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs applescript"><span class="hljs-comment"># file.txt</span><br><span class="hljs-built_in">file</span>中的文件内容测试<br></code></pre></div></td></tr></table></figure></li><li>在index.html的body中加入相关元素，触发读取事件，展示读取内容<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span><br>      读取文件<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--展示读取内容--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;render/index.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li>编写读取代码，在根目录下新建目录及文件<code>render-&gt;index.js</code><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>)<br><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">this</span>.<span class="hljs-property">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#btn&#x27;</span>)<br>  <span class="hljs-keyword">var</span> content = <span class="hljs-variable language_">this</span>.<span class="hljs-property">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#content&#x27;</span>)<br>  btn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;file.txt&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,data</span>) =&gt;</span>&#123;<br>      content.<span class="hljs-property">innerHTML</span> = data<br>    &#125;)<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li>运行<code>npm start </code>表面上看是没有什么问题但是你可能会得到如下错误信息</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c704d009bae24085bb86c6f72675a7c5~tplv-k3u1fbpfcp-zoom-1.image"></p><p>原因：如果想在项目中使用<code>nodejs</code>中的内容必须在创建窗口时引用如下代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * @Author: drinkwd</span><br><span class="hljs-comment"> * @Date: 2022-04-11 17:38:08</span><br><span class="hljs-comment"> * @LastEditors: drinkwd</span><br><span class="hljs-comment"> * @LastEditTime: 2022-04-12 14:25:18</span><br><span class="hljs-comment"> * @Description: 主进程入口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> &#123;app, <span class="hljs-title class_">BrowserWindow</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;electron&#x27;</span>)<br><span class="hljs-keyword">let</span> mainWindow = <span class="hljs-literal">null</span> <span class="hljs-comment">// 主窗口</span><br><span class="hljs-comment">// app代表electron的引用，BrowserWindow代表窗体</span><br><span class="hljs-comment">// 当app准本就绪之后创建一个800*600的窗体</span><br>app.<span class="hljs-title function_">whenReady</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 创建窗体</span><br>  mainWindow = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BrowserWindow</span>(&#123;<br>    <span class="hljs-attr">width</span>: <span class="hljs-number">800</span>,<br>    <span class="hljs-attr">height</span>: <span class="hljs-number">800</span>,<br>    <span class="hljs-attr">webPreferences</span>: &#123;<br>      <span class="hljs-comment">// 为了使用node</span><br>      <span class="hljs-attr">nodeIntegration</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">contextIsolation</span>: <span class="hljs-literal">false</span>,<br>    &#125;,<br>  &#125;)<br>  <span class="hljs-comment">// 加载渲染进程文件</span><br>  mainWindow.<span class="hljs-title function_">loadFile</span>(<span class="hljs-string">&#x27;index.html&#x27;</span>)<br>  <span class="hljs-comment">// 监听窗口关闭回调，减少资源占用</span><br>  mainWindow.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;closed&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    mainWindow = <span class="hljs-literal">null</span><br>  &#125;)<br>&#125;)<br></code></pre></div></td></tr></table></figure><p>这时在运行<code>npm start</code>就可以正常运行了。</p><h5 id="案例2-在渲染进程中打开新窗口"><a href="#案例2-在渲染进程中打开新窗口" class="headerlink" title="案例2 在渲染进程中打开新窗口"></a>案例2 在渲染进程中打开新窗口</h5><p>当我们知道了<code>Electron</code>有主进程和渲染进程后，我们还要知道一件事😶，就是<code>Electron</code>的<code>API</code>方法和模块也是分为可以在主进程和渲染进程中使用的，具体<a href="https://www.electronjs.org/docs/latest/api/app">参考文档</a>👀。那如果我们想在渲染进程中使用主进程中的模块方法时，可以使用<code>Electron Remote</code>解决🍠。</p><ul><li>安装<code>@electron/remote</code>包<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">npm install --save @electron/remote<br></code></pre></div></td></tr></table></figure></li><li>在<code>index.html</code>的<code>body</code>中增加如下代码<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn_open&quot;</span>&gt;</span><br>      打开新窗口<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li>创建新窗口文件<code>newOpen.html</code> 内容如下<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>新窗口<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure></li><li>在<code>render-&gt;index.js</code>中增加如下代码<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> btn_open = <span class="hljs-variable language_">this</span>.<span class="hljs-property">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#btn_open&#x27;</span>)<br><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">BrowserWindow</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@electron/remote&#x27;</span>)<br>btn1.<span class="hljs-property">onclick</span> = <span class="hljs-function">()=&gt;</span>&#123;<br>  <span class="hljs-keyword">var</span> newWin = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BrowserWindow</span>(&#123;<br>    <span class="hljs-attr">width</span>: <span class="hljs-number">500</span>,<span class="hljs-attr">height</span>: <span class="hljs-number">500</span>,<br>    <span class="hljs-attr">webPreferences</span>:&#123;<br>      <span class="hljs-attr">nodeIntegration</span>:<span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">contextIsolation</span>: <span class="hljs-literal">false</span><br>    &#125;<br>  &#125;)<br>  newWin.<span class="hljs-title function_">loadFile</span>(<span class="hljs-string">&#x27;newOpen.html&#x27;</span>)<br>  newWin.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;close&#x27;</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>    newWin = <span class="hljs-literal">null</span><br>  &#125;)<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li>在主进程中加载渲染进程的下方一定要加入如下内容否则是无法使用<code>remote</code>的<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 开始 为了在渲染线程使用remote</span><br><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@electron/remote/main&#x27;</span>).<span class="hljs-title function_">initialize</span>()<br><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@electron/remote/main&#x27;</span>).<span class="hljs-title function_">enable</span>(mainWindow.<span class="hljs-property">webContents</span>)<br></code></pre></div></td></tr></table></figure></li></ul><h5 id="案例3-创建菜单以及快捷键"><a href="#案例3-创建菜单以及快捷键" class="headerlink" title="案例3 创建菜单以及快捷键"></a>案例3 创建菜单以及快捷键</h5><p>我们可以看到在<code>Electron</code>的左上角有一些菜单，那我们如何在<code>Electron</code>中自定义这些菜单呢。</p><ul><li><p>在根目录中新建<code>menu.js</code> 代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123;<span class="hljs-title class_">Menu</span>,<span class="hljs-title class_">BrowserWindow</span>&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;electron&#x27;</span>)<br><span class="hljs-keyword">var</span> template = [&#123;<br>  <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;菜单1&#x27;</span>,<br>  <span class="hljs-attr">submenu</span>:[&#123;<br>    <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;子菜单1&#x27;</span>, <span class="hljs-comment">// 菜单名称</span><br>    <span class="hljs-attr">accelerator</span>: <span class="hljs-string">&#x27;ctrl+n&#x27;</span>, <span class="hljs-comment">//快捷键</span><br>    <span class="hljs-attr">click</span>: <span class="hljs-function">() =&gt;</span>&#123;<br>      为菜单增加点击事件<br>      <span class="hljs-keyword">var</span> win = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BrowserWindow</span>(&#123;<br>        <span class="hljs-attr">width</span>: <span class="hljs-number">500</span>,<br>        <span class="hljs-attr">height</span>: <span class="hljs-number">500</span>,<br>        <span class="hljs-attr">webPreferences</span>:&#123;<br>          <span class="hljs-attr">nodeIntegration</span>: <span class="hljs-literal">true</span>,<br>          <span class="hljs-attr">contextIsolation</span>: <span class="hljs-literal">false</span><br>        &#125;<br>      &#125;)<br>      win.<span class="hljs-title function_">loadFile</span>(<span class="hljs-string">&#x27;newOpen.html&#x27;</span>)<br>      win.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;closed&#x27;</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>        win = <span class="hljs-literal">null</span><br>      &#125;)<br>    &#125;<br>  &#125;]<br>&#125;,&#123;<br>  <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;菜单2&#x27;</span>,<br>  <span class="hljs-attr">submenu</span>:[&#123;<br>    <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;子菜单2&#x27;</span><br>  &#125;]<br>&#125;]<br><span class="hljs-comment">// 构建菜单</span><br><span class="hljs-keyword">var</span> m = <span class="hljs-title class_">Menu</span>.<span class="hljs-title function_">buildFromTemplate</span>(template)<br><span class="hljs-comment">// 设置菜单</span><br><span class="hljs-title class_">Menu</span>.<span class="hljs-title function_">setApplicationMenu</span>(m)<br></code></pre></div></td></tr></table></figure></li><li><p>在主进程中引用该文件</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./menu.js&#x27;</span>) <span class="hljs-comment">//渲染菜单</span><br></code></pre></div></td></tr></table></figure><h5 id="案例4-打开调试面板"><a href="#案例4-打开调试面板" class="headerlink" title="案例4 打开调试面板"></a>案例4 打开调试面板</h5><p>当我们在没有自定义导航菜单的时候可以通过上方导航的<code>View-&gt;Toggle DevTools</code> 🐇打开控制台方便调试，那如果我们自定义菜单之后应该怎么打开调试控制台呢🙋‍♂️?。</p></li><li><p>在主进程中增加如下代码，在程序启动的时候自动打开控制台</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">mainWindow.<span class="hljs-property">webContents</span>.<span class="hljs-title function_">openDevTools</span>()<br></code></pre></div></td></tr></table></figure><h5 id="案例5-创建右键菜单"><a href="#案例5-创建右键菜单" class="headerlink" title="案例5 创建右键菜单"></a>案例5 创建右键菜单</h5><p>右键菜单是在渲染进程中进行编辑的所以我们要在渲染进程中编写如下代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// render-&gt;index.js</span><br>  <span class="hljs-keyword">const</span> &#123;<span class="hljs-title class_">Menu</span>, getCurrentWindow &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@electron/remote&#x27;</span>)<br>  <span class="hljs-comment">// 创建右键菜单内容，与导航菜单逻辑相同</span><br>  <span class="hljs-keyword">var</span> rightTemplate = [&#123;<br>    <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;右键菜单1&#x27;</span>,<br>  &#125;,&#123;<br>    <span class="hljs-attr">label</span>:<span class="hljs-string">&#x27;右键菜单2&#x27;</span><br>  &#125;]<br>  <span class="hljs-keyword">var</span> m = <span class="hljs-title class_">Menu</span>.<span class="hljs-title function_">buildFromTemplate</span>(rightTemplate)<br>  <span class="hljs-comment">// 监听鼠标右键事件</span><br>  <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;contextmenu&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>    <span class="hljs-comment">// 阻止默认事件</span><br>    e.<span class="hljs-title function_">preventDefault</span>()<br>    <span class="hljs-comment">//把菜单模板添加到右键菜单</span><br>    m.<span class="hljs-title function_">popup</span>(&#123;<br>      <span class="hljs-attr">window</span>: <span class="hljs-title function_">getCurrentWindow</span>()<br>    &#125;)<br>  &#125;)<br></code></pre></div></td></tr></table></figure><h5 id="案例6-通过链接打开浏览器，嵌入网页，打开子窗口"><a href="#案例6-通过链接打开浏览器，嵌入网页，打开子窗口" class="headerlink" title="案例6 通过链接打开浏览器，嵌入网页，打开子窗口"></a>案例6 通过链接打开浏览器，嵌入网页，打开子窗口</h5><p>通过链接打开浏览器</p><ul><li>在<code>index.html</code>的<code>body</code>中增加<code>a</code>标签<figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">&lt;a <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;aHref&quot;</span> <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;https://drinkwd.github.io/&quot;</span>&gt;打开博客&lt;/a&gt;<br></code></pre></div></td></tr></table></figure></li><li>如果什么都不写这时运行程序，该网址会在窗口内打开🎨，我们想要的时候通过浏览器来打开该网址在<code>render-&gt;index.js</code>中增加如下代码👇<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123;shell&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;electron&#x27;</span>)<br><span class="hljs-keyword">var</span> aHref = <span class="hljs-variable language_">this</span>.<span class="hljs-property">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#aHref&#x27;</span>)<br>aHref.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>  e.<span class="hljs-title function_">preventDefault</span>()<br>  <span class="hljs-keyword">var</span> href = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&#x27;href&#x27;</span>)<br>  shell.<span class="hljs-title function_">openExternal</span>(href)<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li>这样在运行的时候就会通过默认浏览器打开该链接🛹</li></ul><p>嵌入网页</p><ul><li>在主进程中添加如下代码<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 实例化View</span><br><span class="hljs-keyword">const</span> view = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BrowserView</span>()<br><span class="hljs-comment">// 主窗口中引用类似iframe</span><br>mainWindow.<span class="hljs-title function_">setBrowserView</span>(view)<br><span class="hljs-comment">// 设置位置与宽高</span><br>view.<span class="hljs-title function_">setBounds</span>(&#123; <span class="hljs-attr">x</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">50</span>, <span class="hljs-attr">width</span>: <span class="hljs-number">500</span>, <span class="hljs-attr">height</span>: <span class="hljs-number">600</span> &#125;)<br><span class="hljs-comment">// 加载内嵌网页地址</span><br>view.<span class="hljs-property">webContents</span>.<span class="hljs-title function_">loadURL</span>(<span class="hljs-string">&#x27;https://electronjs.org&#x27;</span>)<br></code></pre></div></td></tr></table></figure></li><li>执行npm start就会在指定位置显示出你引入的网页</li></ul><p>创建子窗口，传值（与网页的传值相同）</p><ul><li><p>我们之前提到过在渲染进程中使用<code>remote</code>打开一个窗口🧶，实际上就是一个新窗口，但是创建子窗口需要使用<code>window.open</code>来实现🎣</p></li><li><p>在<code>index.html</code>增加打开子窗口按钮元素</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sonWindow&quot;</span>&gt;</span>打开子窗口<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-comment">&lt;!--赋值--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mytext&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>在<code>render-&gt;index.js</code>中打开子窗口</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> sonWindow = <span class="hljs-variable language_">this</span>.<span class="hljs-property">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#sonWindow&#x27;</span>)<br>sonWindow.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>  e.<span class="hljs-title function_">preventDefault</span>()<br>  <span class="hljs-comment">// 打开子窗口</span><br>  <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;./test.html&quot;</span>)<br>&#125;<br><span class="hljs-comment">// 监听子窗口传过来的值</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;message&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">msg</span>)=&gt;</span>&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(msg)<br>  <span class="hljs-keyword">var</span> mytext= <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#mytext&#x27;</span>)<br>  mytext.<span class="hljs-property">innerHTML</span> = msg.<span class="hljs-property">data</span><br>&#125;)<br></code></pre></div></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--test.html--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>子窗口<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;popbtn&quot;</span>&gt;</span>向父窗口传递信息<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// render-&gt;index.js</span><br><span class="hljs-keyword">var</span> popbtn = <span class="hljs-variable language_">this</span>.<span class="hljs-property">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#popbtn&#x27;</span>)<br>popbtn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">window</span>.<span class="hljs-property">opener</span>.<span class="hljs-title function_">postMessage</span>(<span class="hljs-string">&#x27;我是子窗口传递过来的信息&#x27;</span>)<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li></ul><h5 id="案例7-打开各种对话框与桌面通知-在渲染进程实现"><a href="#案例7-打开各种对话框与桌面通知-在渲染进程实现" class="headerlink" title="案例7 打开各种对话框与桌面通知,在渲染进程实现"></a>案例7 打开各种对话框与桌面通知,在渲染进程实现</h5><ul><li>在<code>index.html</code>中增加如下代码👇<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;opendialog&quot;</span>&gt;</span>打开文件框<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;savedialog&quot;</span>&gt;</span>保存文件对话框<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;messagedialog&quot;</span>&gt;</span>消息对话框<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;postpush&quot;</span>&gt;</span>桌面消息通知<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;render/demo5.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li>在<code>render-&gt;index.js</code>中进行实现<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> opendialog = <span class="hljs-variable language_">this</span>.<span class="hljs-property">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#opendialog&#x27;</span>)<br><span class="hljs-keyword">var</span> savedialog = <span class="hljs-variable language_">this</span>.<span class="hljs-property">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#savedialog&#x27;</span>)<br><span class="hljs-keyword">var</span> messagedialog = <span class="hljs-variable language_">this</span>.<span class="hljs-property">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#messagedialog&#x27;</span>)<br><span class="hljs-keyword">var</span> postpush = <span class="hljs-variable language_">this</span>.<span class="hljs-property">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#postpush&#x27;</span>)<br><span class="hljs-keyword">const</span> &#123;dialog&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@electron/remote&#x27;</span>)<br><span class="hljs-comment">// 打开文件框</span><br>opendialog.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-comment">// 选择文件</span><br>  dialog.<span class="hljs-title function_">showOpenDialog</span>(&#123;<br>    <span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;请选择图片&#x27;</span>, <span class="hljs-comment">// 左上角标题</span><br>    <span class="hljs-attr">defaultPath</span>:<span class="hljs-string">&#x27;file.txt&#x27;</span>, <span class="hljs-comment">//默认路径</span><br>    <span class="hljs-attr">filters</span>:[&#123; <span class="hljs-comment">// 过滤 </span><br>      <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;text&#x27;</span>,<br>      <span class="hljs-attr">extensions</span>:[<span class="hljs-string">&#x27;txt&#x27;</span>] <span class="hljs-comment">//过滤文件后缀 保留的</span><br>    &#125;],<br>    <span class="hljs-attr">buttonLabel</span>:<span class="hljs-string">&#x27;打开文本&#x27;</span> <span class="hljs-comment">//自定义打开按钮</span><br>  &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">filePaths</span>[<span class="hljs-number">0</span>]) <span class="hljs-comment">//获取文件信息</span><br>  &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err) <span class="hljs-comment">// 错误信息</span><br>  &#125;)<br>&#125;<br><span class="hljs-comment">// 保存文件</span><br>savedialog.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  dialog.<span class="hljs-title function_">showSaveDialog</span>(&#123;<br>    <span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;保存文件&#x27;</span>, <span class="hljs-comment">// 左上角标题</span><br>  &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res) <span class="hljs-comment">//获取文件信息</span><br>  &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err) <span class="hljs-comment">// 错误信息</span><br>  &#125;)<br>&#125;<br><span class="hljs-comment">// 消息对话框</span><br>messagedialog.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  dialog.<span class="hljs-title function_">showMessageBox</span>(&#123;<br>    <span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;warning&#x27;</span>,<br>    <span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;消息对话框&#x27;</span>,<br>    <span class="hljs-attr">message</span>:<span class="hljs-string">&#x27;消息对话框内容&#x27;</span>,<br>    <span class="hljs-attr">buttons</span>:[<span class="hljs-string">&#x27;按钮1&#x27;</span>,<span class="hljs-string">&#x27;按钮2&#x27;</span>]<br>  &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">// 点击按钮之后的回调函数</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>  &#125;)<br>&#125;<br><span class="hljs-comment">// 桌面通知</span><br>postpush.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">let</span> option = &#123;<br>    <span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;通知标题&#x27;</span>,<br>    <span class="hljs-attr">body</span>: <span class="hljs-string">&#x27;通知内容&#x27;</span><br>  &#125;<br>  <span class="hljs-keyword">new</span> <span class="hljs-variable language_">window</span>.<span class="hljs-title class_">Notification</span>(option.<span class="hljs-property">title</span>,option)<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul><h5 id="案例8-断网检测（应该是html5的功能），复制文字，注册全局快捷键"><a href="#案例8-断网检测（应该是html5的功能），复制文字，注册全局快捷键" class="headerlink" title="案例8 断网检测（应该是html5的功能），复制文字，注册全局快捷键"></a>案例8 断网检测（应该是<code>html5</code>的功能），复制文字，注册全局快捷键</h5><ul><li>断网检测：在<code>render-&gt;index.js</code>中监听该事件如果触发相应事件进行相应操作</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 断网之后再次链接会显示该对话框</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;online&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;链接成功&#x27;</span>)<br>&#125;)<br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;offline&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;断网了,请检查网络连接&#x27;</span>)<br>&#125;)<br></code></pre></div></td></tr></table></figure><ul><li>复制文字 引用clipboard模块，因为这个模块主进程和渲染进程中都有所以就不需要用到<code>remote</code><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>想要复制的内容<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btnCopy&quot;</span>&gt;</span>复制<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;render/demo7.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// render-&gt;index.js</span><br><span class="hljs-comment">//const &#123; clipboard &#125; = require(&quot;electron&quot;) 两种引用方式都可以</span><br><span class="hljs-keyword">const</span> &#123; clipboard &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@electron/remote&quot;</span>)<br><span class="hljs-keyword">var</span> content = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#content&#x27;</span>)<br><span class="hljs-keyword">var</span> btnCopy =  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#btnCopy&#x27;</span>)<br>btnCopy.<span class="hljs-property">onclick</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  clipboard.<span class="hljs-title function_">writeText</span>(content.<span class="hljs-property">innerHTML</span>)<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;复制成功&#x27;</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>注册全局快捷键： 引用<code>globalShortcut</code>模块<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// index.js 主进程文件</span><br><span class="hljs-keyword">const</span> &#123;app, <span class="hljs-title class_">BrowserWindow</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;electron&#x27;</span>)<br><span class="hljs-keyword">let</span> mainWindow = <span class="hljs-literal">null</span> <span class="hljs-comment">// 主窗口</span><br><span class="hljs-comment">// app代表electron的引用，BrowserWindow代表窗体</span><br><span class="hljs-comment">// 当app准本就绪之后创建一个800*600的窗体</span><br>app.<span class="hljs-title function_">whenReady</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 创建窗体</span><br>  mainWindow = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BrowserWindow</span>(&#123;<br>    <span class="hljs-attr">width</span>: <span class="hljs-number">800</span>,<br>    <span class="hljs-attr">height</span>: <span class="hljs-number">800</span>,<br>    <span class="hljs-attr">webPreferences</span>: &#123;<br>      <span class="hljs-comment">// 为了使用node</span><br>      <span class="hljs-attr">nodeIntegration</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">contextIsolation</span>: <span class="hljs-literal">false</span>,<br>    &#125;,<br>  &#125;)<br>  <span class="hljs-comment">// 加载渲染进程文件</span><br>  mainWindow.<span class="hljs-title function_">loadFile</span>(<span class="hljs-string">&#x27;index.html&#x27;</span>)<br>    <span class="hljs-comment">// 快捷键打开网址,内部</span><br>  globalShortcut.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;ctrl+e&#x27;</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>    mainWindow.<span class="hljs-title function_">loadURL</span>(<span class="hljs-string">&#x27;http://www.baidu.com&#x27;</span>)<br>  &#125;)<br>  <span class="hljs-keyword">let</span> isRegister = globalShortcut.<span class="hljs-title function_">isRegistered</span>(<span class="hljs-string">&#x27;ctrl+e&#x27;</span>)?<span class="hljs-string">&#x27;success&#x27;</span>: <span class="hljs-string">&#x27;fail&#x27;</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;---&gt;&#x27;</span>,isRegister)<br>  <span class="hljs-comment">// 监听窗口关闭回调，减少资源占用</span><br>  mainWindow.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;closed&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    mainWindow = <span class="hljs-literal">null</span><br>  &#125;)<br>&#125;)<br>app.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;will-quit&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-comment">// 注销全局快捷键</span><br>  globalShortcut.<span class="hljs-title function_">unregister</span>(<span class="hljs-string">&#x27;ctrl+e&#x27;</span>)<br>  <span class="hljs-comment">// 注销全局快捷键</span><br>  <span class="hljs-comment">// globalShortcut.unregisterAll()</span><br>&#125;)<br></code></pre></div></td></tr></table></figure></li></ul><h4 id="Vue项目中集成Electron"><a href="#Vue项目中集成Electron" class="headerlink" title="Vue项目中集成Electron"></a>Vue项目中集成Electron</h4><p>通过上面的案例我们已经简单了解了<code>Electron</code>的基本用法和使用😝，但是我们在实际的工作当中大多都是使用<code>vue</code>或者<code>react</code>进行项目开发🍤，下面就说一下如果在<code>vue</code>项目中集成<code>Electron</code>🎈</p><ul><li><p>创建一个<code>vue</code>的项目，通过<code>vue-cli</code>脚手架搭建就可以，这里就不过多叙述了，前端开发肯定都会这一步📞。</p></li><li><p>引用<a href="https://nklayman.github.io/vue-cli-plugin-electron-builder/guide/">vue-cli-plugin-electron-builder</a>插件</p><figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-comment"># 这里使用vue add 不使用npm install的原因是因为vue add会对脚手架有一些修改</span><br><span class="hljs-comment"># 会自动帮助我们生成主进程文件，scripts脚本安装相关依赖。</span><br>vue <span class="hljs-keyword">add </span>electron-<span class="hljs-keyword">builder </span><br></code></pre></div></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/46a5a4eda05b499abf93d1669b9444e5~tplv-k3u1fbpfcp-zoom-1.image"></p></li><li><p>这时只需要运行<code> npm run electron:serve</code>就会将前端项目运行至<code>Electron</code>中生成一个桌面程序🤣。</p></li></ul><p>如果你的启动非常慢可以将<code>background.js</code>中的这段代码注释👇</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 安装vue开发者插件</span><br> <span class="hljs-keyword">if</span> (isDevelopment &amp;&amp; !process.<span class="hljs-property">env</span>.<span class="hljs-property">IS_TEST</span>) &#123;<br>    <span class="hljs-comment">// Install Vue Devtools</span><br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">await</span> <span class="hljs-title function_">installExtension</span>(<span class="hljs-title class_">VUEJS3</span>_DEVTOOLS)<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Vue Devtools failed to install:&#x27;</span>, e.<span class="hljs-title function_">toString</span>())<br>    &#125;<br>  &#125;<br></code></pre></div></td></tr></table></figure><h4 id="Electron打包"><a href="#Electron打包" class="headerlink" title="Electron打包"></a>Electron打包</h4><p>第一次打包会很慢很慢，也可能会超时，解决方案可以参考<a href="https://www.cnblogs.com/qirui/p/8328015.html">这篇</a>或者<a href="https://www.jianshu.com/p/35abb68d0331">文章2</a><br>设electron淘宝镜像在终端中敲入<br> <figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">npm set ELECTRON_MIRROR=https:<span class="hljs-regexp">//</span>npm.taobao.org<span class="hljs-regexp">/mirrors/</span>electron/<br></code></pre></div></td></tr></table></figure><br> 打开C盘，在你当前用户下搜索 .npmrc 文件，用记事本打开，看看是否设置成功。</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">npm <span class="hljs-built_in">run</span> electron:build<br></code></pre></div></td></tr></table></figure><ul><li>如果你很顺利的话就会在根目录看到<code>dist_electron</code>文件夹里面就会有绿色版的<code>exe</code>和安装包🤔（没有的话就是打包失败了）</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6d9946fc3e074c59b032da755ef0e3d0~tplv-k3u1fbpfcp-zoom-1.image"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dd76026c03ee4401953cba33b499e9ae~tplv-k3u1fbpfcp-zoom-1.image"></p><ul><li>但是默认的安装体验是非常差的我们可以通过<code>vue.config.js</code>来设置安装过程的步骤具体😛<a href="https://www.electron.build/">参考文档</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// vue.config.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">pluginOptions</span>: &#123;<br>    <span class="hljs-attr">electronBuilder</span>: &#123;<br>      <span class="hljs-attr">builderOptions</span>: &#123;<br>        <span class="hljs-attr">win</span>:&#123;<br>          <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;nsis&#x27;</span> <span class="hljs-comment">// 安装方式</span><br>        &#125;,<br>        <span class="hljs-attr">nsis</span>:&#123;<br>          <span class="hljs-attr">oneClick</span>: <span class="hljs-literal">false</span>, 是否一键安装<br>          <span class="hljs-attr">allowToChangeInstallationDirectory</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">// 允许更改安装目录</span><br>        &#125;<br>        <span class="hljs-comment">// options placed here will be merged with default configuration and passed to electron-builder</span><br>      &#125;,<br>      <span class="hljs-attr">nodeIntegration</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">contextIsolation</span>: !<span class="hljs-literal">true</span><br>    &#125;<br>  &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><blockquote><p>如果在页面中使用了history路由可能在打包之后发现router-view中是空的</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">解决方法就是在 <span class="hljs-title class_">App</span>.<span class="hljs-property">vue</span> 载入的时候，给 mounted 这个钩子里面手动跳转到你想要的首页页面的路径去就可以了。<br><br>个人用的是 <span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;/&quot;</span>) ，打包后 router-view 的部分就显示正常了。<br></code></pre></div></td></tr></table></figure><h4 id="主进程与渲染进程通信"><a href="#主进程与渲染进程通信" class="headerlink" title="主进程与渲染进程通信"></a>主进程与渲染进程通信</h4><ul><li>用到两个模块 <code>ipcMain</code>和<code>ipcRender</code></li><li>在渲染进程中发送事件给主进程，监听主进程发过来的事件<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;loginContainer&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;systemLogoBox&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;systemLogo&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;@/assets/img/logo.png&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;sendMessage&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">import</span> &#123;onMounted&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span><br><span class="language-javascript">  <span class="hljs-keyword">import</span> &#123; ipcRenderer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;electron&#x27;</span></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> <span class="hljs-title function_">sendMessage</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span><br><span class="language-javascript">    <span class="hljs-comment">// 向主进程发送事件类似$emit</span></span><br><span class="language-javascript">    ipcRenderer.<span class="hljs-title function_">invoke</span>(<span class="hljs-string">&quot;hello&quot;</span>)</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">  <span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">    ipcRenderer.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;helloClick&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我收到了点击事件&#x27;</span>)</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li>主进程中监听渲染进程中发送的事件，发送事件给渲染进程<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// background.js增加如下代码</span><br><span class="hljs-keyword">import</span> &#123;ipcMain,<span class="hljs-title class_">Notification</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;electron&#x27;</span><br><span class="hljs-comment">// 监听渲染进程发送的事件</span><br>ipcMain.<span class="hljs-title function_">handle</span>(<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 创建桌面通知</span><br>  <span class="hljs-keyword">const</span> n = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Notification</span>(&#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;通知信息&#x27;</span>,<br>    <span class="hljs-attr">body</span>: <span class="hljs-string">&quot;你收到了一条消息&quot;</span><br>  &#125;)<br>  n.<span class="hljs-title function_">show</span>()<br>  n.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(win)<br>    <span class="hljs-comment">// 点击桌面通知的时候发送事件给到渲染进程</span><br>    win.<span class="hljs-property">webContents</span>.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;helloClick&#x27;</span>)<br>  &#125;)<br>&#125;)<br></code></pre></div></td></tr></table></figure>如果在开发的过程中发现了一些问题可以先看看官网的<a href="https://www.electronjs.org/docs/latest/faq">常见问题处理</a>特别注意<code>nodejs</code>和<code>Electron</code>的版本</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>Electron</code>的入门还是比较简单的，但是在实际工作当中可能会出现调用<code>dll</code>文件或者与硬件进行交互的时候可能就会消耗一定的精力😥，如果我在后期遇到了类似的工作，也会总结起来与大家进行分享滴🎈<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b5fdaf4ef2b14ee39dd797ac2067d5ad~tplv-k3u1fbpfcp-zoom-1.image"></p><h5 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h5><ul><li><p><a href="https://jspang.com/">技术胖</a></p></li><li><p><a href="https://nklayman.github.io/vue-cli-plugin-electron-builder/">vue-cli-plugin-electron-builder</a></p></li><li><p><a href="https://www.electron.build/">electron.build</a></p></li><li><p><a href="https://www.electronjs.org/">electron</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Electron</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>echarts自定义地图</title>
    <link href="/2022/05/17/echarts%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9C%B0%E5%9B%BE/"/>
    <url>/2022/05/17/echarts%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9C%B0%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  在日常的工作中肯定会遇到各种各样的<code>echarts</code>的行政地图👀，有一天突然领导说<strong>xx县</strong>想要一个地图，我心想这还不简单嘛😁找到json文件就开干呗😍。结果我找了一天也没有找到县级的<code>json</code>地图文件，我的辛酸路就此开始😢。</p><h2 id="问题关键"><a href="#问题关键" class="headerlink" title="问题关键"></a>问题关键</h2><p>  我们解决根本问题的关键就是要制作出某个县的<code>json</code>文件，相信很多做过<code>echarts</code>地图的小伙伴都知道只要有了<code>json</code>文件，做个地图还不是分分钟,但是地图<code>json</code>文件中的内容是很恶心的😌，下面是某市部分<code>json</code>的截图👇。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7a60ef7cb8514d36aad8093fc33d2c05~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="相关网站"><a href="#相关网站" class="headerlink" title="相关网站"></a>相关网站</h3><p>通过可视化的方式编辑<code>geojson</code>地图数据。</p><p><a href="http://www.bigemap.com/">BIGEMAP</a></p><p>加载多种在线瓦片地图谷歌，<code>OSM</code>，天地图，<code>bing</code>，高德，以及多种离线地图<code>bmdb</code>格式地图,等等。我们用到他的作用就是导出部分 乡镇的<code>KML</code>文件🥠。</p><h2 id="制作流程"><a href="#制作流程" class="headerlink" title="制作流程"></a>制作流程</h2><h3 id="导出KML文件"><a href="#导出KML文件" class="headerlink" title="导出KML文件"></a>导出KML文件</h3><ul><li>下载<a href="http://www.bigemap.com/reader/download/">BIGEMAP</a>客户端</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3bc37d64e3a2428dbfd3e0af4b4e17d7~tplv-k3u1fbpfcp-zoom-1.image"></p><ul><li><p>选择对应区县<br>安装完成之后，打开软件，点击右侧<strong>选择行政区域</strong>找到对应街道或者乡镇🎨。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cf3e72d2708048cc958daaaa7f554fe5~tplv-k3u1fbpfcp-zoom-1.image"></p></li><li><p>导出KML文件</p></li></ul><p>点击分享按钮，另存到某个文件夹中，依次导出🍧。</p><blockquote><p>注：不直接导出上一级的<code>KML</code>，而是依次导出的原因是，如果导出的是上一级,只有当前级别的轮廓不包括下一级的资源👛。</p></blockquote><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/737cc3c8666041aa869e6421c3dbf5f6~tplv-k3u1fbpfcp-zoom-1.image"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2f4dd7b357e848a7bf458112de18d0a9~tplv-k3u1fbpfcp-zoom-1.image"></p><h3 id="生成GeoJSON文件"><a href="#生成GeoJSON文件" class="headerlink" title="生成GeoJSON文件"></a>生成GeoJSON文件</h3><ul><li>打开<a href="https://geojson.io/">geojson.io</a>依次导入刚才对应的<code>KML</code>文件。</li></ul><p>左上角<code>OPEN-&gt;FILE</code>，导入之后就会生成对应可视化地图以及<code>json</code>🍠。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b1a3866c8e37405c82024defdbc2ce42~tplv-k3u1fbpfcp-zoom-1.image"></p><ul><li>将json复制出来随便放在某个echarts地图的示例当中就可以啦🤙。</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a2ff756889844331bb94b670b074d56f~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="自定义地图"><a href="#自定义地图" class="headerlink" title="自定义地图"></a>自定义地图</h2><p>比如某个地市下新增加了一个开发区，还没有归并到新的行政区划中，就需要我们在<code>GEOJSON</code>中进行手动增加😋。</p><ul><li>找到对应绘制工具，勾勒区域。</li></ul><p>点击多边形工具之后在地图的某个位置通过首尾相连的方式画出一个区域🚇。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a43f5d9c071e4e1ca838d1c966c45ab6~tplv-k3u1fbpfcp-zoom-1.image"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d82ade904fe24aef95832926bfe8f135~tplv-k3u1fbpfcp-zoom-1.image"></p><ul><li>编辑新增区域属性</li></ul><p>点击绘制的区域增加<code>name</code>属性，如果想要增加其他属性可以通过点击<code>AddRow</code>进行增加，一定要点击<strong>SAVE</strong>进行保存🥙。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5492ce312cce42f99bc8d9352b7578f6~tplv-k3u1fbpfcp-zoom-1.image"></p><ul><li>将json复制出来随便放在某个echarts地图的示例当中发现新增加的区域已经出现了😏。</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ac616141e41142c6ad82981ffdacfce0~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="拓展小工具"><a href="#拓展小工具" class="headerlink" title="拓展小工具"></a>拓展小工具</h2><p><a href="http://datav.aliyun.com/portal/school/atlas/area_selector">DATAV.GeoAtlas</a></p><p>阿里推出的一个用于获取全国、各省、各市的详细地图信息的json文件，针对区县只有对应地图轮廓而没有乡镇或街道，数据来源为高德🤪。</p><p><a href="https://chenxuan0000.github.io/vue-seamless-scroll/zh/">vue-seamless-scroll</a></p><p>在做大屏期间用到的无缝滚动插件挺好用的，不需要自己在去监听表格的高度自己实现了🤪。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/98898900eb5041bc98ab9057a9c122ea~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在做大屏项目的时候经常会遇到<code>echarts</code>地图👜，我们只需要找到问题的痛点原因是什么，都会找到相关的答案哒🤣,如果你使用的是省市的地图可以直接通过<code>DATAV.GeoAtlas</code>🌯找到你想要的<code>json</code>文件哦,如果对你有帮助记得点赞哦！！🤪<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/60710cf4d33743218f92b8d0d99ea8bb~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.cxyzjd.com/article/weixin_44861708/114223258">解决如何整理出乡镇级的地图</a></p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Echart</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VUE项目中调用高德地图🤞</title>
    <link href="/2022/05/17/VUE%E9%A1%B9%E7%9B%AE%E4%B8%AD%E8%B0%83%E7%94%A8%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BE%F0%9F%A4%9E/"/>
    <url>/2022/05/17/VUE%E9%A1%B9%E7%9B%AE%E4%B8%AD%E8%B0%83%E7%94%A8%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BE%F0%9F%A4%9E/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>相信大家或多或少都接触过在大屏的项目，在大屏项目中除了用到了<code>echarts</code>中的行政地图，街道地图也是很常见的，今天主要来说一下在<code>vue</code>中调用高德地图遇到的一些问题🤪。</p><h2 id="申请高德key"><a href="#申请高德key" class="headerlink" title="申请高德key"></a>申请高德key</h2><p>无论我们使用任何方式调用高德地图都需要在<a href="https://lbs.amap.com/?ref=https://console.amap.com">高德地图开放平台</a>中申请<code>key</code>😏</p><ul><li>注册帐号</li></ul><p>访问高德地图开发平台根据实际情况填写就可以🍜（实名认证的时候选择个人就可以，如果是企业级的项目，可能会涉及人员变动，建议使用公司邮箱进行注册）区别如下👇。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f4f251d8f6d04c47882a1fdf710ec56a~tplv-k3u1fbpfcp-zoom-1.image"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/08aceac969b04ae59328f01790afa5aa~tplv-k3u1fbpfcp-zoom-1.image"></p><ul><li>创建应用 </li></ul><p>新建应用时名称，与类型可以随意填写，尽量填写的与开发的应用一直，方便后期维护🚘</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/64d0ece0edcb46cbbbc0296f5dfe8ed3~tplv-k3u1fbpfcp-zoom-1.image"><br>应用创建成功之后，点击添加就会需要我们选择需要使用高德地图的哪些服务，不同的服务平台，对应填写的内容也有所区别🎪，例如<code>Android</code>需要填写<code>App</code>包名，<code>Android</code>的<code>SHA1</code>码等等，因为我这次的项目是个大屏项目所以就选择<code>Web端（JSAPI）</code>😮</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8103e4a7817a4fe0a9b860e914bae98b~tplv-k3u1fbpfcp-zoom-1.image"><br>信息填写完毕之后就会在当前应用下生成对应的Key值和<strong>安全密钥</strong>（安全密钥在之前的版本中是没有的）</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a8870fbfa6014366bc27b6c32b8d2f2b~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><h4 id="vue-amap"><a href="#vue-amap" class="headerlink" title="vue-amap"></a><a href="https://elemefe.github.io/vue-amap/#/"><code>vue-amap</code></a></h4><p><code>vue-amap</code>是基于 <code>Vue 2.x </code>与高德的地图组件👨‍🦰，提供一些基础和高级的功能，例如：地图扎点，信息窗体，搜索组件，类型插件等等，不需要我们在造轮子了，所以我们就来试一试🎑。</p><h5 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h5><blockquote><p>当我们在使用组件的时候都会先看一下文档，但是当我在看文档的时候发现，文档中只有对应的<code>api</code>而没有示例，很难下手，于是在<a href="https://github.com/ElemeFE/vue-amap/issues/646"><code>issues</code></a>中找到了答案。</p></blockquote><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ecec3f94258544aebbfe5c4d1035d806~tplv-k3u1fbpfcp-zoom-1.image"></p><p>解决方案也很简单</p><ul><li>将项目下载到本地</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4936e46f3e2044d4b58ce15f06e43266~tplv-k3u1fbpfcp-zoom-1.image"></p><ul><li>修改<code>src/docs/index.html</code>里的<code>docsify</code>引用<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">将<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//unpkg.com/docsify/lib/docsify.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>修改为<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//unpkg.com/docsify@4.11.6/lib/docsify.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4704daecc802444287432df7a78bbcf7~tplv-k3u1fbpfcp-zoom-1.image"></p><ul><li>执行<code>npm install</code> <code>npm start</code>默认在<code>4201</code>端口就会启动项目就可以看到项目示例了。</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0b501477ca64441787d6b22fb890af3b~tplv-k3u1fbpfcp-zoom-1.image"></p><h5 id="项目中应用"><a href="#项目中应用" class="headerlink" title="项目中应用"></a>项目中应用</h5><ul><li><code>npm</code>安装<figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada">npm install vue-amap <span class="hljs-comment">--save</span><br></code></pre></div></td></tr></table></figure></li><li><code>main.js</code>中挂载<code>vue-amap</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueAMap</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-amap&#x27;</span>;<br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">VueAMap</span>);<br><span class="hljs-title class_">VueAMap</span>.<span class="hljs-title function_">initAMapApiLoader</span>(&#123;<br>  <span class="hljs-comment">//申请地址 https://lbs.amap.com/ 选择web端jsAPI</span><br>  <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;自己申请的高德地图key&#x27;</span>, <br>  <span class="hljs-comment">// 插件集合，用到什么插件就使用什么插件</span><br>  <span class="hljs-attr">plugin</span>: [<span class="hljs-string">&#x27;AMap.Autocomplete&#x27;</span>, <span class="hljs-string">&#x27;AMap.PlaceSearch&#x27;</span>, <span class="hljs-string">&#x27;AMap.Scale&#x27;</span>, <span class="hljs-string">&#x27;AMap.OverView&#x27;</span>, <span class="hljs-string">&#x27;AMap.ToolBar&#x27;</span>, <span class="hljs-string">&#x27;AMap.MapType&#x27;</span>, <span class="hljs-string">&#x27;AMap.PolyEditor&#x27;</span>, <span class="hljs-string">&#x27;AMap.CircleEditor&#x27;</span>],<br>  <span class="hljs-attr">v</span>: <span class="hljs-string">&#x27;1.4.4&#x27;</span>, <span class="hljs-comment">// 高德sdk版本，最新的sdk已经出到了2.0</span><br>  <span class="hljs-comment">//官网解释：JSAPI 2.0 提供的开发接口与 1.4 版本达到 99%的兼容度，但是为了保证插件的稳定性我们还是选择1.4.4。</span><br>&#125;)<br></code></pre></div></td></tr></table></figure><ul><li>组件用法<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-amap</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">vid</span>=<span class="hljs-string">&quot;amapDemo&quot;</span> <span class="hljs-attr">:center</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">:zoom</span>=<span class="hljs-string">&quot;zoom&quot;</span> <span class="hljs-attr">:events</span>=<span class="hljs-string">&quot;events&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;amap-demo&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">el-amap</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 建议将zoom,center等可配置的项均写在配置文件中，方便打包之后进行修改。</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">zoom</span>: <span class="hljs-number">12</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">center</span>: [<span class="hljs-number">121.59996</span>, <span class="hljs-number">31.197646</span>],</span><br><span class="language-javascript">          <span class="hljs-attr">events</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-string">&#x27;click&#x27;</span>: <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">              <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;map clicked&#x27;</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">          &#125;,</span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">    &#125;;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li></ul><p>以上就是在<code>vue</code>项目中使用<code>vue-amap</code>调用高德地图<code>api</code>的基本使用😀，具体对地图的操作可以根据文档的规范来就可以了，在使用的过程中可能会遇到几个问题😣。</p><h3 id="刷新页面，地图加载偶尔失败"><a href="#刷新页面，地图加载偶尔失败" class="headerlink" title="刷新页面，地图加载偶尔失败"></a>刷新页面，地图加载偶尔失败</h3><ul><li>在main.js中加入以下内容。<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 解决地图刷新显示不出来</span><br><span class="hljs-keyword">const</span> amapKeys = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(<span class="hljs-variable language_">localStorage</span>).<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span> key.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/^_AMap_/</span>))<br>amapKeys.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">// console.log(key)</span><br>  <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">removeItem</span>(key)<br>&#125;)<br></code></pre></div></td></tr></table></figure></li></ul><h3 id="在绑定插件的时候，控制台报错-a-d-split-is-not-a-function"><a href="#在绑定插件的时候，控制台报错-a-d-split-is-not-a-function" class="headerlink" title="在绑定插件的时候，控制台报错 a[d].split is not a function"></a>在绑定插件的时候，控制台报错 <code>a[d].split is not a function</code></h3><ul><li>含有地图组件的路由不使用懒加载的方式（<em>临时方案</em>）</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8562a6608f514f6db0a4a9409521c31b~tplv-k3u1fbpfcp-zoom-1.image"></p><blockquote><p>注： <code>vue-amap</code> 是不支持<code>vue3.x</code>，😥并且不能绑定高德地图新版<code>api</code>对应的安全密钥<code>jscode</code>,可能会导致部分服务无法使用。 对应的<code>vue3</code>版本的插件<a href="https://vue-amap.guyixi.cn/">看这里</a>🧵。</p></blockquote><h2 id="原生调用高德API"><a href="#原生调用高德API" class="headerlink" title="原生调用高德API"></a>原生调用高德API</h2><ul><li>安装官方提供的loader <figure class="highlight coffeescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> install @amap/amap-jsapi-loader --save<br></code></pre></div></td></tr></table></figure></li><li>main.js中绑定安全密钥jscode（不绑定部分功能无法使用）<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 该写法只推荐在开发阶段，如果在生产阶段建议采用反向代理</span><br><span class="hljs-comment">// 官网说明https://lbs.amap.com/api/javascript-api/guide/abc/prepare</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">_AMapSecurityConfig</span> = &#123;<br>  <span class="hljs-attr">securityJsCode</span>: <span class="hljs-string">&#x27;jscode&#x27;</span> <span class="hljs-comment">// 输入你的jscode</span><br>&#125;<br></code></pre></div></td></tr></table></figure></li><li>封装组件<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;home_div&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">AMapLoader</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@amap/amap-jsapi-loader&#x27;</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Mapview&quot;</span>,</span><br><span class="language-javascript">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">map</span>: <span class="hljs-literal">null</span>,</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">initAMap</span>();</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">initAMap</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title class_">AMapLoader</span>.<span class="hljs-title function_">load</span>(&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;xxx&#x27;</span>,  <span class="hljs-comment">//设置您的key</span></span><br><span class="language-javascript">                <span class="hljs-attr">version</span>: <span class="hljs-string">&quot;2.0&quot;</span>, <span class="hljs-comment">// 高德地图版本</span></span><br><span class="language-javascript">                <span class="hljs-attr">plugins</span>: [<span class="hljs-string">&#x27;AMap.ToolBar&#x27;</span>, <span class="hljs-string">&#x27;AMap.Driving&#x27;</span>], <span class="hljs-comment">// 插件</span></span><br><span class="language-javascript">                <span class="hljs-title class_">AMapUI</span>: &#123; <span class="hljs-comment">// 高德地图UI组件库，可不写，内部提供了覆盖物标注点，以及部分模块的封装</span></span><br><span class="language-javascript">                    <span class="hljs-attr">version</span>: <span class="hljs-string">&quot;1.1&quot;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">plugins</span>: [],</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-title class_">Loca</span>: &#123; <span class="hljs-comment">// Loca版本(高性能地图数据可视化库) 可不写</span></span><br><span class="language-javascript">                    <span class="hljs-attr">version</span>: <span class="hljs-string">&quot;2.0&quot;</span></span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">            &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">AMap</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// container渲染的id</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">map</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AMap</span>.<span class="hljs-title class_">Map</span>(<span class="hljs-string">&quot;container&quot;</span>, &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">zoom</span>: <span class="hljs-number">5</span>, <span class="hljs-comment">// 当前缩放级别</span></span><br><span class="language-javascript">                    <span class="hljs-attr">zooms</span>: [<span class="hljs-number">2</span>, <span class="hljs-number">22</span>], <span class="hljs-comment">// 缩放级别范围</span></span><br><span class="language-javascript">                    <span class="hljs-attr">center</span>: [<span class="hljs-number">105.602725</span>, <span class="hljs-number">37.076636</span>], <span class="hljs-comment">// 中心点</span></span><br><span class="language-javascript">                &#125;);</span><br><span class="language-javascript">            &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>  <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.home_div</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">    <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-id">#container</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">    <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li></ul><h4 id="混合使用（vue-amap与原生API混合使用）"><a href="#混合使用（vue-amap与原生API混合使用）" class="headerlink" title="混合使用（vue-amap与原生API混合使用）"></a>混合使用（vue-amap与原生API混合使用）</h4><ul><li><p>只想通过 <code>vue-amap </code>引入高德地图，而部分实例化的操作直接基于高德地图的 <code>sdk </code>完成</p><blockquote><p>实例化操作不是加载地图，简单来说就是用一些属性去实例化地图的这个类 <code>new xxx()</code> 代表的就是实例化<code>xxx</code>🛸。这样就不需要在使用<code>el-amap</code>中的<code>center</code>属性和<code>zoom</code>属性了🎨，因为已经通过原生的方式进行实例化了👜。</p></blockquote><figure class="highlight coffeescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coffeescript"><span class="hljs-keyword">import</span> &#123; lazyAMapApiLoaderInstance &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-amap&#x27;</span>;<br>lazyAMapApiLoaderInstance.load().<span class="hljs-keyword">then</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>  <span class="hljs-regexp">//</span> your code ...<br>  this.map = <span class="hljs-keyword">new</span> AMap.<span class="hljs-built_in">Map</span>(<span class="hljs-string">&#x27;amapContainer&#x27;</span>, &#123;<br>    center: <span class="hljs-keyword">new</span> AMap.LngLat(<span class="hljs-number">121.59996</span>, <span class="hljs-number">31.197646</span>)<br>  &#125;);<br>&#125;);<br></code></pre></div></td></tr></table></figure></li><li><p>在<code>vue-amap</code>中引入高德原生<code>SDK</code>只需在<code>el-amap</code>上绑定<code>amap-manager</code>就可以拿到高德原生<code>AMap.Map</code>实例<a href="https://elemefe.github.io/vue-amap/#/zh-cn/introduction/compatible">文档地址</a></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;amap-page-container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-amap</span> <span class="hljs-attr">vid</span>=<span class="hljs-string">&quot;amapDemo&quot;</span> <span class="hljs-attr">:center</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">:amap-manager</span>=<span class="hljs-string">&quot;amapManager&quot;</span> <span class="hljs-attr">:zoom</span>=<span class="hljs-string">&quot;zoom&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;amap-demo&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-amap</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;toolbar&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add()&quot;</span>&gt;</span>add marker<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.amap-demo</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span> <span class="hljs-meta">!important</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// NPM 方式</span></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AMapManager</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-amap&#x27;</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">let</span> amapManager = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AMapManager</span>();</span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">zoom</span>: <span class="hljs-number">12</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">center</span>: [<span class="hljs-number">121.59996</span>, <span class="hljs-number">31.197646</span>],</span><br><span class="language-javascript">      amapManager,</span><br><span class="language-javascript">    &#125;;</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">let</span> o = amapManager.<span class="hljs-title function_">getMap</span>();</span><br><span class="language-javascript">      <span class="hljs-keyword">let</span> marker = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AMap</span>.<span class="hljs-title class_">Marker</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">position</span>: [<span class="hljs-number">121.59996</span>, <span class="hljs-number">31.177646</span>]</span><br><span class="language-javascript">      &#125;);</span><br><span class="language-javascript">      marker.<span class="hljs-title function_">setMap</span>(o);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>网上针对高德地图的调用方案也有很多，我也是刚刚接触，文中的观点都是自身的看法，最后说一下自身对选型的判断🎑。</p><ul><li>如果是大屏类的项目，没有过多的交互只是简单扎点，展示建议使用<code>vue-amap</code>🤙🤙🤙。</li><li>如果是已地图为中心的项目，包括人员路线，轨迹等等比较复杂的交互建议使用原生🤙🤙🤙。</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c721b629f48f4fdd90071c8751616844~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><p><a href="https://lbs.amap.com/api/javascript-api/guide/abc/prepare">高德地图API</a></p></li><li><p><a href="https://elemefe.github.io/vue-amap/#/">vue-amap</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>提高逼格的几个网站</title>
    <link href="/2021/02/27/%E6%8F%90%E9%AB%98%E9%80%BC%E6%A0%BC%E7%9A%84%E5%87%A0%E4%B8%AA%E7%BD%91%E7%AB%99/"/>
    <url>/2021/02/27/%E6%8F%90%E9%AB%98%E9%80%BC%E6%A0%BC%E7%9A%84%E5%87%A0%E4%B8%AA%E7%BD%91%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<h1 id="必须让你的恶习先你而死😤"><a href="#必须让你的恶习先你而死😤" class="headerlink" title="必须让你的恶习先你而死😤"></a>必须让你的恶习先你而死😤</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近发现的书签栏里收藏了好多不错的网站，独乐乐不如众乐乐（放在我这里吃灰，莫不如让大家一起吃灰）本文不涉及技术，我也不知道怎么分类好了😫我就全都列在这里吧直接点击标题就可以跳转链接哦🤣。</p><h3 id="JSFuck（变态加密）"><a href="#JSFuck（变态加密）" class="headerlink" title="JSFuck（变态加密）"></a><a href="http://www.jsfuck.com/">JSFuck</a>（变态加密）</h3><p>他会把你的<code>js</code>代码转换成一堆你看明白的东西，适合与小白炫耀自己的技术<br><img src="https://static01.imgkr.com/temp/08f40ec6115940ed8e167a866e20fa67.png"></p><p>推荐指数:★★★</p><h3 id="Codelf（变量命名神器）"><a href="#Codelf（变量命名神器）" class="headerlink" title="Codelf（变量命名神器）"></a><a href="https://unbug.github.io/codelf/">Codelf</a>（变量命名神器）</h3><p>程序员最头痛的事之一大概就是变量命名了，有了它之后妈妈再也不担心我起名low了(支持中文查询哦)<br>VsCode编辑器也有对应的插件哦。名字也叫<code>Codelf</code><br><img src="https://static01.imgkr.com/temp/76f2fbdaa7304e3cb4d0cb669989cc4f.png"></p><p>推荐指数:★★★★★</p><h3 id="carbon-代码截图工具"><a href="#carbon-代码截图工具" class="headerlink" title="carbon(代码截图工具)"></a><a href="https://carbon.now.sh/">carbon</a>(代码截图工具)</h3><p><code>carbon</code>工具提供了多种代码高亮方式，也支持自定义颜色。如果以后有的地方用到了代码截图用这个网站是再好不过的了<br><code>Vscode</code>编辑器也有类似的插件<code>Polacode</code></p><p><img src="https://static01.imgkr.com/temp/7576e7c8b6964ea797fcc118d3f6d93e.png"></p><h3 id="腾讯互动娱乐创意设计团队"><a href="#腾讯互动娱乐创意设计团队" class="headerlink" title="腾讯互动娱乐创意设计团队"></a><a href="https://tgideas.qq.com/">腾讯互动娱乐创意设计团队</a></h3><p>我其实都不怎么看，今天一看觉得网站的风格真的是好喜欢，里面也有不错分享，有时间的同学可以看一看</p><p><img src="https://static01.imgkr.com/temp/619446f3c4934b26a38e02a30e662f41.png"></p><p>推荐指数:★★★</p><h3 id="processon-作图工具"><a href="#processon-作图工具" class="headerlink" title="processon(作图工具)"></a><a href="https://www.processon.com/">processon</a>(作图工具)</h3><p>如果有同学需要画，流程图、UML、网络拓扑图、组织结构图可以试一下，我们团队当初让我们画UML图的时候用到了(是不是替我打抱不平😠)</p><p><img src="https://static01.imgkr.com/temp/052cb16563c24f97a0662170b65de569.png"></p><p>推荐指数:★★★</p><h3 id="阮一峰的个人博客"><a href="#阮一峰的个人博客" class="headerlink" title="阮一峰的个人博客"></a><a href="http://www.ruanyifeng.com/home.html">阮一峰的个人博客</a></h3><p>这个我就不多说了好吧，我现在一共发了六篇文章 好像有四篇文章都提到了这个博客,很屌很屌。</p><p><img src="https://static01.imgkr.com/temp/096e63392a774ed3bf998c6e14b77c46.png"></p><p>推荐指数:★★★★★</p><h3 id="msdn-itellyou"><a href="#msdn-itellyou" class="headerlink" title="msdn.itellyou"></a><a href="https://msdn.itellyou.cn/">msdn.itellyou</a></h3><p>相信有很多做系统的伙伴，都在这里下载的系统镜像，下载链接速度可观。</p><p><img src="https://static01.imgkr.com/temp/c34347cac0704808a7c52c975fcfbdf1.png"></p><p>推荐指数:★★★★★</p><h3 id="凹凸实验室"><a href="#凹凸实验室" class="headerlink" title="凹凸实验室"></a><a href="https://aotu.io/">凹凸实验室</a></h3><p>凹凸实验室是一个京东的技术团队，里面有很多好前端开发的文章，喜欢的铁子们可以去逛一逛。</p><p><img src="https://static01.imgkr.com/temp/9f90c35286494baf9d09b04975b6220f.png"></p><h3 id="哄女友神器"><a href="#哄女友神器" class="headerlink" title="哄女友神器"></a><a href="https://sourceforge.net/projects/ascgen2/">哄女友神器</a></h3><p><code>Ascgen2</code>是一款把图片转成<code>ASCII</code>的应用程序，<code>19</code>年的时候抖音上流行过一段时间，看起来是密密麻麻的代码调整一下字体就会出现一张女朋友的脸，应该都是用这个工具实现的，你也可以给你的女朋友展示一下，程序员的小魔术。</p><p><img src="https://static01.imgkr.com/temp/609aba743ebd40529e791bdb064f50c7.png"><br>推荐指数:★★★★</p><h3 id="gitignore-io"><a href="#gitignore-io" class="headerlink" title="gitignore.io"></a><a href="https://www.toptal.com/developers/gitignore">gitignore.io</a></h3><p>该网站会帮你自动生成<code>gitignore.io</code>，你只需输入你要使用的项目语言类型或者平台类型，点击生成就会生成对应的<code>gitignore.io</code>,如果不使用脚手架搭建的项目还是特别好用的一个网站的，每个人的需求不同，也可以自行在加。<br><img src="https://static01.imgkr.com/temp/41344ed3d7e14a92870a684acaa418cf.png"></p><h3 id="wallhaven"><a href="#wallhaven" class="headerlink" title="wallhaven"></a><a href="https://wallhaven.cc/">wallhaven</a></h3><p>俗话说的好，一篇好的文章，如果没有好看的图片，文章的内容也会大打折扣(我叫俗话)，我文章的大图，都是在这个网站找的，可以说是非常<code>nice</code>的二次元的风格，非常适合各种程(老)序(色)员(批)。</p><p><img src="https://static01.imgkr.com/temp/4e887f0fa81c45d89d2c09cb5b2d0791.png"><br>推荐指数:★★★★★</p><h3 id="掘金"><a href="#掘金" class="headerlink" title="掘金"></a><a href="https://juejin.cn/">掘金</a></h3><p>不多聊了啊呦,去吃饭了啊呦😚(特意查了一下压轴是第二位)，白嫖了三年，用压轴来回馈你吧🎨。</p><p>推荐指数:★★★★★</p><h3 id="drinkwd"><a href="#drinkwd" class="headerlink" title="drinkwd"></a><a href="https://drinkwd.github.io/">drinkwd</a></h3><p>我的博客，和在掘金的文章是一模一样滴,收藏一下，可以更快的找到我哦🤭(害羞脸)。</p><p><img src="https://static01.imgkr.com/temp/c46536c3324c4359bd97f331bf3380af.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面的推荐指数都是根据我日常的使用情况，来进行推荐的。有很多鲜为人知的技术网站,还有一些网站是国内用户访问不了的😫我就不列出来。这篇文章是没有尽头的，我争取更到退休😲!如果有大佬也有一些好用的网站在评论区留言哦。🧐</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码人生</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>不得不学的图标引入🎡</title>
    <link href="/2021/02/25/%E4%B8%8D%E5%BE%97%E4%B8%8D%E5%AD%A6%E7%9A%84%E5%9B%BE%E6%A0%87%E5%BC%95%E5%85%A5/"/>
    <url>/2021/02/25/%E4%B8%8D%E5%BE%97%E4%B8%8D%E5%AD%A6%E7%9A%84%E5%9B%BE%E6%A0%87%E5%BC%95%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="坚强的信心，能使平凡的人做出惊人的事业👻"><a href="#坚强的信心，能使平凡的人做出惊人的事业👻" class="headerlink" title="坚强的信心，能使平凡的人做出惊人的事业👻"></a>坚强的信心，能使平凡的人做出惊人的事业👻</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为什么要使用字体图标，有很多同学认为，图片已经满足了我们的日常需求为什么还要字体图标呢。大概有以下几点(敲黑板👨‍💻)</p><ul><li>加载速度快，体积小🎈。</li><li>字体图标的颜色和大小都是可以设置的，如果使用图片的话就只能换一张图🎭。</li><li>字体图标有独立的分辨率，无论是网页端💻和手机端📱都有很好的展示。</li></ul><h2 id="字体图标工具选型"><a href="#字体图标工具选型" class="headerlink" title="字体图标工具选型"></a>字体图标工具选型</h2><ul><li><a href="https://www.iconfont.cn/">阿里巴巴矢量图标库</a></li><li><a href="https://icomoon.io/">icomoon</a></li><li><a href="http://www.fontawesome.com.cn/">Font Awesome</a></li></ul><p>由于我们公司使用的是<code>阿里巴巴矢量图标库</code>来生成的，我下面的分享都会以这个为例。其他工具也都是类似哒🎨</p><p> 不同框架引入的方式多多少少会有所不同🧐，我把常用到的几种方式都来哔哔一下,请君笑纳♥。</p><h2 id="使用create-react-app创建的工程中引入iconfont"><a href="#使用create-react-app创建的工程中引入iconfont" class="headerlink" title="使用create-react-app创建的工程中引入iconfont"></a>使用<code>create-react-app</code>创建的工程中引入<code>iconfont</code></h2><p>如果还有老铁不知道怎么使用<code>create-react-app</code>创建项目的<a href="https://zh-hans.reactjs.org/docs/create-a-new-react-app.html">看这里</a></p><p>首先大家要清楚一点，前端工程师主要来负责图标的展示，创造图标的这些小事<code>UI</code>设计师肯定手到擒来😏，我们交给他就可以啦，如果公司没有<code>UI</code>设计师，也不用怕。图标库提供了相当多的图标。相信你肯定能找到属于你的那一款。</p><ul><li>注册，登录(不多说啦😀)</li><li>登录成功之后点击小云彩上传<code>svg</code>图标(一定是<code>svg</code>哦😙)</li></ul><p><img src="https://static01.imgkr.com/temp/4aa2063cb8554137b40cf94615dcf8c9.png"></p><ul><li>选择第一个框框(支持同时上传多个)</li></ul><p><img src="https://static01.imgkr.com/temp/a68bf05f2d684b4383d206b0c878c8f6.png"></p><ul><li>根据需求自行选择要不要去色。<br><img src="https://static01.imgkr.com/temp/9592a57b7b3b4b259e64c5bf5005cefe.png"></li><li>鼠标悬浮到上传的图标点击购物车(支持批量加入购物车，不花钱的哦🤣)</li></ul><p><img src="https://static01.imgkr.com/temp/751668897a65433ca6d3e6337b99190c.png"></p><ul><li>下载代码<br><img src="https://static01.imgkr.com/temp/0bec4953f2704238bf7582576f82afda.png"><br>下载代码成功之后双击打开文件夹下面的<code>demo_index.html</code></li></ul><p><img src="https://static01.imgkr.com/temp/74107d09fbcb4565a55091ff76286997.png"></p><p>有三种引用方式本文只讲后两种(第一种是真的不常用😑)<br>这三种区别在<code>demo.html</code>中都有明确的说明，我就不班门弄斧啦🎉。</p><h3 id="FontClass"><a href="#FontClass" class="headerlink" title="FontClass"></a>FontClass</h3><p>打开刚才创建的<code>react</code>项目在<code>public</code>文件夹下新建一个文件夹起名<code>font</code>(随意起名)然后把下载的图标代码全部拷贝到<code>font</code>目录下<code>demo.html</code>和<code>demo.css</code>可以不要.</p><p><img src="https://static01.imgkr.com/temp/09f3147089794df7a121646bb3c46d8d.png"></p><p>然后在<code>index.html</code>中引入<code>iconfont.css</code></p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">&lt;link <span class="hljs-attribute">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;./font/iconfont.css&quot;</span>&gt;<br></code></pre></div></td></tr></table></figure><p>然后在全局任意页面使用标签绑定类名就可以了(个人建议使用i标签或者span标签)</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros"><span class="hljs-comment"># xxx是什么你去看demo.html一眼就会看到啦，默认是svg图标的文件名。</span><br>&lt;i <span class="hljs-attribute">className</span>=<span class="hljs-string">&quot;iconfont icon-xxx&quot;</span>&gt;&lt;/i&gt; <br></code></pre></div></td></tr></table></figure><p>启动项目<code>npm start </code><br>大功告成🎨(不成功来找我！)</p><h3 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h3><p>在<code>index.html</code>中引入<code>iconfont.js</code></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./font/iconfont.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>全局任意页面使用</p><figure class="highlight abnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs abnf">&lt;svg class<span class="hljs-operator">=</span><span class="hljs-string">&quot;icon&quot;</span> aria-hidden<span class="hljs-operator">=</span><span class="hljs-string">&quot;true&quot;</span> width<span class="hljs-operator">=</span><span class="hljs-string">&quot;50&quot;</span> height<span class="hljs-operator">=</span><span class="hljs-string">&quot;50&quot;</span>&gt;<br>  &lt;use xlink-href<span class="hljs-operator">=</span><span class="hljs-string">&quot;#icon-xxxx&quot;</span>&gt;&lt;/use&gt;<br>&lt;/svg&gt;<br></code></pre></div></td></tr></table></figure><p>启动项目<code>npm start </code>你发现你失败了，<code>WTF</code>😲我这完全按照文档复制粘贴的啊，为什么会失败!。<br>不要忘了我们现在是在<code>jsx</code>里面写<code>html</code> 跟普通的<code>html</code>还是有些区别的  查阅<a href="https://reactjs.org/docs/dom-elements.html#all-supported-html-attributes">文档</a>之后我们改成这个样子。</p><figure class="highlight abnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs abnf"> &lt;svg class<span class="hljs-operator">=</span><span class="hljs-string">&quot;icon&quot;</span> aria-hidden<span class="hljs-operator">=</span><span class="hljs-string">&quot;true&quot;</span> width<span class="hljs-operator">=</span><span class="hljs-string">&quot;50&quot;</span> height<span class="hljs-operator">=</span><span class="hljs-string">&quot;50&quot;</span>&gt;<br>         &lt;use xlinkHref<span class="hljs-operator">=</span><span class="hljs-string">&quot;#icon-dapingzhanshi&quot;</span>&gt;&lt;/use&gt;<br>&lt;/svg&gt;<br></code></pre></div></td></tr></table></figure><h2 id="使用create-react-app创建的工程中使用ant-design自定义图标"><a href="#使用create-react-app创建的工程中使用ant-design自定义图标" class="headerlink" title="使用create-react-app创建的工程中使用ant.design自定义图标"></a>使用<code>create-react-app</code>创建的工程中使用ant.design自定义图标</h2><p><code>ant.design</code>提供了丰富图标但有的时候可能它提供的图标也不能满足我们日常的需求。我们可以使用以上两种阿里巴巴提供的方式进行引入，也可以使用<code>ant.design</code>提供的默认方法</p><p>ant.design不同版本的引入方式可能会有区别，具体的引入方式还要以<a href="https://ant.design/components/icon-cn/">官网</a>为主</p><p><img src="https://static01.imgkr.com/temp/59c6bf0656b54bae951b4c55bf444ebc.png"></p><blockquote><p>注: <code>scriptUrl</code>后面对应的地址就是我们在 <code>Symbol</code>方式引入的<code>js</code>文件，如果js文件放在了public目录下不需要使用require，因为public不会参与打包。</p></blockquote><h2 id="使用ant-desin-pro创建的项目引入IconFont"><a href="#使用ant-desin-pro创建的项目引入IconFont" class="headerlink" title="使用ant.desin.pro创建的项目引入IconFont"></a>使用ant.desin.pro创建的项目引入IconFont</h2><p>使用<code>ant.design.pro</code>搭建的项目在<code>src/defaultSetting.js</code>中有一个<code>iconfontUrl</code>字段，将之前下载好的字体文件放在<code>public/fonts</code>下面，把<code>js</code>文件引入即可。</p><p><img src="https://static01.imgkr.com/temp/0878fb69250a41c08d1b7a731ec5592e.png"></p><p>使用方法：</p><ul><li>如果是路由菜单的话直接在路由上将对应的icon名字写在icon属性后面就可以了。</li></ul><p><img src="https://static01.imgkr.com/temp/c778fdfa22d74826b11a88a3180bcab6.png"></p><p> 如果是某个页面展示图标 </p><ul><li><code>FontClass</code>方式 需要在<code>global.less</code>文件中引入<code>css</code>文件,使用的话使用<code>i</code>标签或者<code>span</code>标签引入就可以📣。</li></ul><p><img src="https://static01.imgkr.com/temp/ec045dc84253400c95e6b9e4708f0892.png"></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;iconfont icon-xuqiudengji&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li><code>Symbol</code>方式 无需引入<code>css</code>文件因为我们在<code>defaultSetting</code>中已经配置了<code>js</code>文件。直接按照上文提到的<code>Symbol</code>使用方式就可以📣。</li></ul><figure class="highlight abnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs abnf">&lt;svg className<span class="hljs-operator">=</span><span class="hljs-string">&quot;icon&quot;</span> aria-hidden<span class="hljs-operator">=</span><span class="hljs-string">&quot;true&quot;</span> width<span class="hljs-operator">=</span><span class="hljs-string">&quot;50&quot;</span> height<span class="hljs-operator">=</span><span class="hljs-string">&quot;50&quot;</span>&gt;<br>    &lt;use xlinkHref<span class="hljs-operator">=</span><span class="hljs-string">&quot;#icon-xuqiudengji&quot;</span>&gt;&lt;/use&gt;<br>&lt;/svg&gt;<br></code></pre></div></td></tr></table></figure><blockquote><p>当然 ant.design.pro 也集成了ant.design也可以使用ant.design提供的默认方法引入。</p></blockquote><h2 id="使用vue-cli搭建的vue项目"><a href="#使用vue-cli搭建的vue项目" class="headerlink" title="使用vue-cli搭建的vue项目"></a>使用<code>vue-cli</code>搭建的<code>vue</code>项目</h2><p>阿里巴巴提供的方式都可以使用，只是引入的位置有区别。</p><ul><li>FontClass 在入口文件<code>main.js</code>中引入字体的css文件</li></ul><p><img src="https://static01.imgkr.com/temp/6ff807746eb14bcc8051d8ee9c22e039.png"></p><p>在全局任意页面使用如下标签即可。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;iconfont icon-xuqiudengji&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li>Symbol 在入口文件<code>main.js</code>中引入字体的js文件</li></ul><p><img src="https://static01.imgkr.com/temp/667af74f53a148af8f8355cf7d59b8f4.png"></p><p>在全局任意页面使用如下标签即可。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">use</span> <span class="hljs-attr">xlink:href</span>=<span class="hljs-string">&quot;#icon-aliens-ip&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">use</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="如何自动更新svg字体图标"><a href="#如何自动更新svg字体图标" class="headerlink" title="如何自动更新svg字体图标"></a>如何自动更新svg字体图标</h2><p>上面的这些方式，如果你习惯了之后你会发现一个问题，就是我们每次如果有新的图标加入的时候我们都要重复一次之前的动作 上传所有<code>svg</code>&gt;下载图标代码&gt;替换<code>font</code>文件夹。要说麻烦其实也不太麻烦，就是几分钟的事。我们肯定不想一直重复做相同的事情。</p><h3 id="在线链接"><a href="#在线链接" class="headerlink" title="在线链接"></a>在线链接</h3><p>阿里巴巴还是强啊！他提供了在线链接😃，只要我们图标库的项目里面增加了图标他就会自动生成链接，这就相当于我们不需要去下载图标代码了，直接使用他在线的链接就可以了<code>FontClass</code>和<code>Symbol</code>都有。敲黑板📏！！！</p><blockquote><p>流程大概就是这样，我们需要在阿里巴巴图标库中创建一个项目，然后将自己想要的图标导入到自己的项目，他会自动生成在线链接，我们就不需要在下载图标代码到自己的项目了，直接把上面的本地路径改成他的在线链接就可以了。好活🤣<br><img src="https://static01.imgkr.com/temp/414ab69dddb54e88b2ebc31e21ab07ef.png"><br>当然缺点也是很明显的，这种方式就相当于是阿里巴巴帮助我们维护<code>svg</code>图标，如果某一天链接不通了，网络不通了，领导还是会找你。只不过这是一种简单快捷的方法，我们还是自己维护<code>svg</code>图标才能做到心里有数。</p></blockquote><h3 id="svgtofont-js"><a href="#svgtofont-js" class="headerlink" title="svgtofont.js"></a><a href="https://github.com/jaywcjlove/svgtofont">svgtofont.js</a></h3><p>新建项目起名为<code>svgToFont</code>在文件夹中执行<code>npm init --yes</code>,在svgToFont文件夹下新建文件夹起名为<code>svg</code>将你要用到的<code>svg</code>图标全部拷贝到<code>svg</code>文件夹中，安装<code>svgtofont</code></p><figure class="highlight coffeescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> init --<span class="hljs-literal">yes</span> <br><span class="hljs-built_in">npm</span> install svgtofont --save<br></code></pre></div></td></tr></table></figure><p>安装完成之后新建<code>app.js</code>文件将下面的代码全部拷贝到app.js中</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> svgtofont = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;svgtofont&quot;</span>);<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><br><span class="hljs-title function_">svgtofont</span>(&#123;<br>  <span class="hljs-attr">src</span>: path.<span class="hljs-title function_">resolve</span>(process.<span class="hljs-title function_">cwd</span>(), <span class="hljs-string">&quot;svg&quot;</span>), <span class="hljs-comment">// svg 图标目录路径</span><br>  <span class="hljs-attr">dist</span>: path.<span class="hljs-title function_">resolve</span>(process.<span class="hljs-title function_">cwd</span>(), <span class="hljs-string">&quot;fonts&quot;</span>), <span class="hljs-comment">// 输出到指定目录中</span><br>  <span class="hljs-attr">fontName</span>: <span class="hljs-string">&quot;iconfont&quot;</span>, <span class="hljs-comment">// 设置字体名称</span><br>  <span class="hljs-attr">css</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 生成字体文件</span><br>  <span class="hljs-attr">startNumber</span>: <span class="hljs-number">20000</span>, <span class="hljs-comment">// unicode起始编号</span><br>  <span class="hljs-attr">svgicons2svgfont</span>: &#123;<br>    <span class="hljs-attr">fontHeight</span>: <span class="hljs-number">1000</span>,<br>    <span class="hljs-attr">normalize</span>: <span class="hljs-literal">true</span><br>  &#125;,<br>  <span class="hljs-attr">website</span>: <span class="hljs-literal">null</span> <span class="hljs-comment">// 没有演示html文件</span><br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;生成完成!&#x27;</span>);<br>&#125;);;<br></code></pre></div></td></tr></table></figure><p>然后在项目根目录执行<code>node app.js</code>不出意外的话你会看到<code>fonts</code>目录，里面的内容基本上是和阿里巴巴图标库下载的代码一样。也是同样按照上面提供的那些方式，进行引入，使用就可以。但是现在变成了我们自己维护<code>svg</code>图标。</p><blockquote><p>注意<code>symbol</code>方式引用的时候会有些不同，因为字体图标生成之后你会发现没有<code>js</code>文件，所以在使用的时候要把symbol.svg的路径加上。附上<a href="https://cloud.tencent.com/developer/section/1424047">xlinkHref</a>对应路径的详解，我这个路径弄了好久😣。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">svg</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">use</span> <span class="hljs-attr">xlinkHref</span>=<span class="hljs-string">&quot;/font/iconfont.symbol.svg#iconfont-aliens-ip&quot;</span>&#125;&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">use</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="webpack-iconfont-plugin-nodejs"><a href="#webpack-iconfont-plugin-nodejs" class="headerlink" title="webpack-iconfont-plugin-nodejs"></a><a href="https://github.com/hzsrc/webpack-iconfont-plugin-nodejs">webpack-iconfont-plugin-nodejs</a></h3><p>这个<code>webpack</code>插件大概的原理就是监听<code>svg</code>文件的变化，当有修改或添加，删除svg文件的时候就会生成对应的字体图标代码🎍。</p><ul><li>方式一</li></ul><p>我们可以按照新建项目的形式来维护我们的<code>svg</code>图标(类似于<code>svgtofont.js</code>)🧵。</p><ul><li>方式二</li></ul><p>因为<code>webpack-iconfont-plugin-nodejs</code>是支持热加载的可以实时监听<code>svg</code>文件的变化，我们也可以在webpack插件中使用它，需要将使用的svg图标全部拷贝到项目中而不是新建一个项目来维护。🎃具体使用方法<a href="https://segmentfault.com/a/1190000017480480">看这里</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p> 总而言之，在日常的开发中，字体图标还是特别常见的，以上几种方式，应该可以满足基本的开发了🧐，如果有大佬还有更优雅的方式，欢迎在评论区狠狠的教育我，一起进步🤣。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://segmentfault.com/a/1190000016462275">svgtofont</a></p><p><a href="https://segmentfault.com/a/1190000017480480">webpack-iconfont-plugin-nodejs</a></p><p><a href="https://zhuanlan.zhihu.com/p/57998143">菜单栏自定义ICON</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/SVG/Element/symbol">symbol</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>React</tag>
      
      <tag>IconFont</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>你不知道的Git🍜</title>
    <link href="/2021/02/22/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84Git/"/>
    <url>/2021/02/22/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84Git/</url>
    
    <content type="html"><![CDATA[<h1 id="天下古今之庸人，皆以一惰字致败🍳"><a href="#天下古今之庸人，皆以一惰字致败🍳" class="headerlink" title="天下古今之庸人，皆以一惰字致败🍳"></a>天下古今之庸人，皆以一惰字致败🍳</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>相信大家已经特别熟练了<code>git</code>的使用，已经足够满足日常开发了。如果还有人不会使用git的去看廖雪峰大神的<a href="https://www.liaoxuefeng.com/wiki/896043488029600"><code>git</code>教程</a>（零基础教学）满足日常开发的同时，我们可能也会遇到奇奇怪怪的问题😣，我就把我遇到的问题，以及使用Git的小技巧分享一下🧵。</p><h3 id="git-pull-提示错误-Your-local-changes-to-the-following-files-would-be-overwritten-by-merge"><a href="#git-pull-提示错误-Your-local-changes-to-the-following-files-would-be-overwritten-by-merge" class="headerlink" title="git pull 提示错误,Your local changes to the following files would be overwritten by merge"></a>git pull 提示错误,Your local changes to the following files would be overwritten by merge</h3><p>场景再现： 老李👔和老张🧥同时开发一个项目，他们两个开发的工作有交叉，老李写代码非常快，没下班就火急火燎的写完了，老张比较慢快到下班的时候才把代码写完😒。这时当他想更新代码,老李说我更新代码了你先pull一下，于是就产生了上面的问题！！！</p><p>产生原因：多人操作场景，其中一人将代码提交到远程<code>git</code>,另一个人也修改了文件准备<code>pull</code>的时候会产生该问题；</p><p>解决方案一: 保留本地新修改的代码。暂存本地新修改代码，并把<code>git</code>服务器上的代码<code>pull</code>到本地，释放暂存 之后按照 <code>add</code> <code>commit</code> <code>push</code> 进行代码更新。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">git stash<br>git pull origin master<br>git stash pop<br>...解决冲突<br>git add .<br>git commit -m fix:解决冲突<br>git push origin master<br></code></pre></div></td></tr></table></figure><p>解决方案二: 覆盖本地新修改的代码，只保留服务端的代码。直接退回到上一个版本然后把<code>git</code>服务器上的代码<code>pull</code>到本地</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">git reset --hard<br>git pull origin master<br></code></pre></div></td></tr></table></figure><p>解决方案三: 提交代码到暂存区，拉取代码在本地解决冲突再重新提交</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">git add .<br>git commit -m fix:更新<br>git pull origin master<br>...解决冲突<br>git add .<br>git commit -m fix:解决冲突<br>git push origin master<br></code></pre></div></td></tr></table></figure><h3 id="gitignore-无效的解决方法"><a href="#gitignore-无效的解决方法" class="headerlink" title=".gitignore 无效的解决方法"></a>.gitignore 无效的解决方法</h3><p>场景再现: <code>.gitignore</code>第一次没有写全。比如老李新建了一个项目跟往常一样正常的提交，随着项目体积的不断增加，老李发现有一个文件的目录上传的<code>git</code>根本是没有必要的，还特别大。于是老李就在<code>.gitignore</code>中加入了相应的目录规则，但是并没有生效！！！</p><p>产生原因：<code>.gitignore</code>只能忽略那些原来没有被<code>track</code>的文件，如果某些文件已经被纳入了版本管理中，则修改<code>.gitignore</code>是无效的</p><p>解决办法：先把本地缓存删除，然后再提交。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">git <span class="hljs-built_in">rm</span> -r --cached .<br>git add .<br>git commit -m <span class="hljs-string">&#x27;niubi&#x27;</span><br></code></pre></div></td></tr></table></figure><h3 id="git-push-u-origin-master-u参数的意义"><a href="#git-push-u-origin-master-u参数的意义" class="headerlink" title="git push -u origin master(-u参数的意义)"></a>git push -u origin master(-u参数的意义)</h3><ul><li><p>不带任何参数的<code>git push</code>，默认只推送当前分支</p></li><li><p><code>git push -u origin master</code> 上面命令将本地的<code>master</code>分支推送到<code>origin</code>主机，同时指定<code>origin</code>为默认主机，后面就可以不加任何参数使用<code>git push</code>了。</p></li><li><p><code>git push</code> 如果当前分支与多个主机存在追踪关系，那么这个时候也可以使用-u选项会指定一个默认主机，如果不加参数就会推送到默认主机(场景：同一个项目记关联了<code>github</code>也关联了<code>gitee</code>)。</p></li></ul><h3 id="一个项目关联多个远程Git仓库"><a href="#一个项目关联多个远程Git仓库" class="headerlink" title="一个项目关联多个远程Git仓库"></a>一个项目关联多个远程Git仓库</h3><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ebb9c6f9b7c94261bed16a64a7fac54b~tplv-k3u1fbpfcp-watermark.image" alt="创建仓库.png"></p><ul><li><p>方法一: 使用 <code>git remote add</code> 命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">git remote add github https://github.com/xxx/xxx.git <span class="hljs-comment">#关联github</span><br>git remote add gitee https://gitee.com/xxx/xxx.git <span class="hljs-comment"># 关联gitee</span><br></code></pre></div></td></tr></table></figure><p>缺点: 每次<code>push</code>的时候都要<code>push</code>两次才能推送到相应的远程。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">git push github master<br>git push gitee master<br></code></pre></div></td></tr></table></figure></li><li><p>方法二：使用 git remote set-url 命令</p></li></ul><p>前提是你已经有了一个远程库了，再次添加另一个远程库。</p><figure class="highlight dsconfig"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dsconfig"><span class="hljs-string">git</span> <span class="hljs-string">remote</span> <span class="hljs-built_in">set-url</span> <span class="hljs-built_in">--add</span> <span class="hljs-string">github</span> <span class="hljs-string">https</span>://<span class="hljs-string">git</span>.<span class="hljs-string">oschina</span>.<span class="hljs-string">net</span>/<span class="hljs-string">zxbetter</span>/<span class="hljs-string">test</span>.<span class="hljs-string">git</span><br></code></pre></div></td></tr></table></figure><p>这样只要执行<code>git push github master</code>一次就可以推送到两个远程库了。</p><h3 id="git-push到远程指定分支"><a href="#git-push到远程指定分支" class="headerlink" title="git push到远程指定分支"></a>git push到远程指定分支</h3><ul><li>解决方案一 </li></ul><p>先创建远程分支</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;<br></code></pre></div></td></tr></table></figure><ul><li>解决方案二</li></ul><p>先创建本地分支并切换到该分支,<code>push</code>的时候可以直接指定远程分支名，远程分支会自动创建。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">git checkout -b [本地分支名]<br>git add .<br>git commit -m <br>git push origin [远程分支名]<br></code></pre></div></td></tr></table></figure><h3 id="git-给分支添加描述"><a href="#git-给分支添加描述" class="headerlink" title="git 给分支添加描述"></a>git 给分支添加描述</h3><p>场景再现：老张👨‍💻在开发项目的过程中经常有不同的需求，没有办法他只能建立不同的分支来维护自己的项目。稳定运行一个月之后，突然有一个地势的项目要改需求，他已经忘记了当时建立的分支是干什么的了如下图。当时暴怒，提出离职😲。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9edbd786e8b94cd6b5615b2ffdc0a97b~tplv-k3u1fbpfcp-zoom-1.image"></p><ul><li><p>解决办法一</p><p>使用命令给分支添加描述</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">git config branch.[branch_name].description <span class="hljs-string">&quot;分支描述信息&quot;</span> <span class="hljs-comment"># 设置分支描述</span><br>git config branch.&#123;branch_name&#125;.description <span class="hljs-comment"># 获取分支描述</span><br></code></pre></div></td></tr></table></figure><p>这样的<code>缺点</code>太明显了每次只能获取一个分支的描述，命令还特别长。</p></li><li><p>解决办法二</p></li></ul><p>使用<code>npm</code>包<code>git-br</code></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">$ npm install -g git-br <span class="hljs-comment"># 全局安装git-br </span><br>$ git config branch.[branch_name].description <span class="hljs-string">&quot;分支描述信息&quot;</span> <span class="hljs-comment"># 设置分支描述</span><br>$ git br <span class="hljs-comment"># 获取分支描述</span><br></code></pre></div></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a090e9f6619d4af0803d1ba02ceb3568~tplv-k3u1fbpfcp-zoom-1.image"></p><h3 id="Git操作失败并提示Another-git-process-seems-to-be-running"><a href="#Git操作失败并提示Another-git-process-seems-to-be-running" class="headerlink" title="Git操作失败并提示Another git process seems to be running"></a>Git操作失败并提示Another git process seems to be running</h3><p>原因：<code>Git</code>在使用过程中遭遇了奔溃，部分被上锁资源没有被释放导致的</p><p>解决方案： 进入项目文件夹下的 <code>.git</code>文件中（显示隐藏文件夹或<code>rm .git/index.lock</code>）删除<code>index.lock</code>文件即可。</p><h3 id="创建干净的本地分支并关联远程分支。"><a href="#创建干净的本地分支并关联远程分支。" class="headerlink" title="创建干净的本地分支并关联远程分支。"></a>创建干净的本地分支并关联远程分支。</h3><p>一般在一个分支下创建新的分支时，会把上个分支的内容复制到新分支中，如果我们不想要上个分支的内容，创建干净的分支，改怎么办呢？</p><p>解决方案</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">git checkout -b 本地分支名  origin/远程分支名<br></code></pre></div></td></tr></table></figure><h3 id="Git提交带表情🎈"><a href="#Git提交带表情🎈" class="headerlink" title="Git提交带表情🎈"></a>Git提交带表情🎈</h3><p>这种提交我们在github上很常见，他们是怎么把表情加上去的呢</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/91849288ed57487aa4f41bcf2b14c281~tplv-k3u1fbpfcp-zoom-1.image"></p><p>全局安装 <code>gitmoji-cli</code></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">npm i -g gitmoji-cli<br></code></pre></div></td></tr></table></figure><p>安装完之后只需要在每次提交的时候加上相应的表情编码就可以了，不同的表情代表着不同的类别，使得代码提交更加清晰。<a href="https://gitmoji.dev/">gitmoji</a><br>举个栗子🧨</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b755af5e2f3046f285c5fb7a64b2ca2d~tplv-k3u1fbpfcp-zoom-1.image"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0938309f5b1d49b89b46aba0d793380a~tplv-k3u1fbpfcp-zoom-1.image"></p><p>发现我的提交前面已经有小表情了是不是非常明显👀。</p><h3 id="Git提交规范"><a href="#Git提交规范" class="headerlink" title="Git提交规范"></a>Git提交规范</h3><p>废话少说先上图🤔</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2ea4df9ee5154effa9948a4477e4d1a8~tplv-k3u1fbpfcp-zoom-1.image"></p><p>你是不是也一脸懵逼，这是在提交什么。一般来说<code>commit</code>应该一眼就能知道提交的是什么。也为了和一起开发的同事清楚的知道，你这次提交的内容🙄。网上大部分说的规范就是<a href="https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#"><code>Angular </code>规范</a>英文好的同学可以去看看，也可以直接参考<a href="https://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html">阮一峰大佬的博客</a>了解了大概规范之后我们就找相应的工具帮我们弄成规范的样子就好啦😁。</p><p><code>Commitizen</code>（合格<code>Commit message</code> 的工具）</p><p>全局安装</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">npm install -g commitizen<br></code></pre></div></td></tr></table></figure><p>然后，在项目目录里，运行下面的命令，使其支持 Angular 的 Commit message 格式。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">commitizen init cz-conventional-changelog --save --save-exact<br></code></pre></div></td></tr></table></figure><blockquote><p><del>注意：因为commitizen工具是基于Node.js的,所以要保证你的项目下要有package.json</del> </p></blockquote><p>之后再提交代码的时候使用<code>git cz</code> 代替<code>git commit</code>命令就会出现提交类型的选择，使你提交的代码更规范。🤗</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/14de749bc4c0436c9d77c78c96d5e739~tplv-k3u1fbpfcp-zoom-1.image"></p><p><code>cz-customizable</code> 自定义中文配置</p><p>你的选择类别可能是英文，转换成中文也特别简单<br>在项目中运行如下命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">npm install cz-customizable --save-dev<br><br>commitizen init cz-customizable --save-dev --save-exact --force<br><br></code></pre></div></td></tr></table></figure><p>修改<code>package.json </code>中 <code>config.commitizen </code>字段为</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash"><span class="hljs-string">&quot;config&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;commitizen&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;path&quot;</span>: <span class="hljs-string">&quot;./node_modules/cz-customizable&quot;</span><br>    &#125;<br>  &#125;<br><br></code></pre></div></td></tr></table></figure><p>在项目根目录创建一个 <a href="https://github.com/qiqihaobenben/commitizen-git/blob/master/.cz-config.js">.cz-config.js</a> 的文件这个文件的内容我们参照大佬写好的就行了<br>关闭命令窗口再次打开输入git cz就会发现已经全部变成中文啦 大功告成🎨。</p><h3 id="生成-Change-log"><a href="#生成-Change-log" class="headerlink" title="生成 Change log"></a>生成 Change log</h3><p>如果你的所有 Commit 都符合 Angular 格式，那么发布新版本时， Change log 就可以用脚本自动生成（<a href="https://github.com/btford/grunt-conventional-changelog/blob/master/CHANGELOG.md">例子</a>）。</p><p>生成的文档包括以下三个部分。</p><blockquote><ul><li>New features</li><li>Bug fixes</li><li>Breaking changes</li></ul></blockquote><p>每个部分都会罗列相关的 <code>commit</code> ，并且有指向这些 <code>commit</code> 的链接。当然，生成的文档允许手动修改，所以发布前，你还可以添加其他内容。</p><p><a href="https://www.npmjs.com/package/conventional-changelog-cli">conventional-changelog-cli</a> 就是生成 <code>Change log</code> 的工具，运行下面的命令即可。</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> npm install <span class="hljs-literal">-g</span> conventional<span class="hljs-literal">-changelog-cli</span><br><span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> my<span class="hljs-literal">-project</span><br><span class="hljs-variable">$</span> conventional<span class="hljs-literal">-changelog</span> <span class="hljs-literal">-p</span> angular <span class="hljs-literal">-i</span> CHANGELOG.md <span class="hljs-literal">-w</span> <span class="hljs-literal">-r</span> <span class="hljs-number">0</span><br></code></pre></div></td></tr></table></figure><p>上面的命令可以生成所有发布的 <code>Change log</code>。</p><p>为了方便使用，可以将其写入<code>package.json</code>的<code>scripts</code>字段。</p><figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c"><span class="hljs-meta"># 在命令行生成ChangeLog</span><br>&#123;<br>  <span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;changelog&quot;</span>: <span class="hljs-string">&quot;conventional-changelog -p angular -i CHANGELOG.md -w -r 0&quot;</span><br>  &#125;<br>&#125;<br><span class="hljs-meta"># 将生成的内容写入文件</span><br>&#123;<br>  <span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;changelog&quot;</span>: <span class="hljs-string">&quot;conventional-changelog -p angular -i CHANGELOG.md -s -r 0&quot;</span><br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>以后，直接运行下面的命令即可。</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">$ npm <span class="hljs-built_in">run</span> changelog<br></code></pre></div></td></tr></table></figure><h3 id="快速定位人员"><a href="#快速定位人员" class="headerlink" title="快速定位人员"></a>快速定位人员</h3><p>相信在开发代码的过程中可能会遇到这种如下情况（<strong>夸张语法</strong>）👇</p><ul><li><strong>领导</strong>🤦‍♂️：这块代码究竟是谁写的代码，让公司赚了<code>50W</code>。</li><li><strong>小王</strong>🤷‍：我写的。</li><li><strong>小李</strong>🤷‍:好像是我写的吧，有点记不住了。</li><li><strong>小张</strong>🤷‍：我也忘了是不是我写的了我看一下<code>git</code>代码的提交记录吧。<br></li></ul><p>当我们遇到这种问题的时候，如果是去<code>git</code>上一点一点去查提交记录的话未免有点太浪费时间🤷‍♂️费了这次表扬的机会，包括如果有问题的话也可以找到对应的人👩‍🔧</p><ul><li><strong>gitlens</strong>安装</li></ul><p>在<code>vscode</code>拓展商店中找到<code>gitlens</code>安装。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d9dda1eaa19f4d73b04271ddcc1977c3~tplv-k3u1fbpfcp-zoom-1.image"></p><ul><li>查看方式<br>当我们的项目如果有<code>.git</code>文件的时候就自动解析出提交人的姓名,哪一行代码是谁在什么时间点提交的。</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/59e80b22ea21409f8baa04fa853d52d8~tplv-k3u1fbpfcp-zoom-1.image"></p><h3 id="生成代码片段"><a href="#生成代码片段" class="headerlink" title="生成代码片段"></a>生成代码片段</h3><p>当我们在使用<code>vscode</code>编程的时候在写<code>vue</code>程序的时候避免不了要用到以下模板</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3763292058a44aed8040eec47aae8c48~tplv-k3u1fbpfcp-zoom-1.image"><br>但是🥠身份程序员每次多打一个字我们都会觉得累想一下我们在写<code>html</code>文件的时候为什么写一个<strong>html:5</strong> 的时候就会自动生成一个模板呢😘</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e4710151addc4be9a8deabad8147267e~tplv-k3u1fbpfcp-zoom-1.image"></p><p>实际上上面的过程就是一个代码片段，接下来我们就需要实现一个<code>vue</code>的代码片段。</p><h4 id="vue代码片段"><a href="#vue代码片段" class="headerlink" title="vue代码片段"></a><code>vue</code>代码片段</h4><ul><li>打开<code>vscode</code>设置小齿轮找到用户代码片段</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/56974a1084e34e54b9770a60c4af603d~tplv-k3u1fbpfcp-zoom-1.image"></p><ul><li>点击用户代码片段，在弹出的框中选择新代码片段，填入名称可以随意填写，点击<code>enter</code></li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c7331cd95289401b9a1e3710254b647e~tplv-k3u1fbpfcp-zoom-1.image"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d2e44c736e3c446c91af2c5a2225451f~tplv-k3u1fbpfcp-zoom-1.image"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/755e2a39e0ff4602997558d1c5d109a0~tplv-k3u1fbpfcp-zoom-1.image"></p><ul><li>编写代码片段模板，保存即可。<figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-comment">// Example: </span><br><span class="hljs-comment">// &quot;vue&quot;: &#123;</span><br><span class="hljs-comment">// &quot;scope&quot;: &quot;javascript,typescript&quot;, 指定文件类型</span><br><span class="hljs-comment">// &quot;prefix&quot;: &quot;log&quot;, //输入前缀</span><br><span class="hljs-comment">// &quot;body&quot;: [ // 模板内容</span><br><span class="hljs-comment">// &quot;console.log(&#x27;$1&#x27;);&quot;,</span><br><span class="hljs-comment">// &quot;$2&quot;</span><br><span class="hljs-comment">// ],</span><br><span class="hljs-comment">// &quot;description&quot;: &quot;Log output to console&quot; // 描述</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;vue&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;prefix&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;vue&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;body&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;&lt;template&gt;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;  &lt;div class=\&quot;\&quot;&gt;&lt;/div&gt;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;&lt;/template&gt;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;&lt;script&gt;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;export default &#123;&#125;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;&lt;/script&gt;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;&lt;style scoped&gt;&lt;/style&gt;&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;vue Components&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></div></td></tr></table></figure></li><li>当我们载输入<code>vue</code>的时候就会自动生成模板啦。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7e1cd76cda1e4b0288561b5587f33467~tplv-k3u1fbpfcp-zoom-1.image"></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这就是我在开发中遇到过的一些常见问题，以后如果有新的问题，还会持续更新哒，如果我的文章对你有用，记得三连一下哦🍬</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://segmentfault.com/a/1190000023388007">让你的 commit 更有价值</a></p><p><a href="https://www.cnblogs.com/wangziye/p/11904511.html">分支添加描述</a></p><p><a href="https://segmentfault.com/a/1190000011294144">添加多个远程库</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>🕶给博客增加评论功能🕶</title>
    <link href="/2021/02/22/%E7%BB%99%E5%8D%9A%E5%AE%A2%E5%A2%9E%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/"/>
    <url>/2021/02/22/%E7%BB%99%E5%8D%9A%E5%AE%A2%E5%A2%9E%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="弱者坐待时机，强者制造时机✨。"><a href="#弱者坐待时机，强者制造时机✨。" class="headerlink" title="弱者坐待时机，强者制造时机✨。"></a>弱者坐待时机，强者制造时机✨。</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h2><p>  昨天博客搭建完了之后，突然想到要是有老铁跟我互动应该怎么办啊😶(<a href="https://drinkwd.github.io/2021/02/20/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E6%80%8E%E4%B9%88%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/">不知道怎么搭建博客的看我上一篇文章</a>)<br>我就去fluid的文档里面搜了搜确实有关于博客评论的知识点👍点赞。</p><h2 id="2-评论系统选型"><a href="#2-评论系统选型" class="headerlink" title="2 评论系统选型"></a>2 评论系统选型</h2><p>文档里面明确说了如果想要应该使用博客评论，应该注意的问题，我在这里引用一下<a href="https://hexo.fluid-dev.com/docs/guide/#%E8%AF%84%E8%AE%BA">地址</a>。</p><p><img src="https://static01.imgkr.com/temp/22d9b09df5ed44a59155150381d8223a.png"></p><p>既然作者都说国内用户推荐使用<code>Valine</code>或者<code>Utterances</code>那我就在这两个里面选了一个。下面是这两个评论的截图。</p><p><img src="https://static01.imgkr.com/temp/8cb587e783434d7f9c7620ea95c9f2a8.png" alt="Utterances👆"></p><p><img src="https://static01.imgkr.com/temp/b9dc2a2b8b5244cea23b2a4f50942201.png" alt="Valine👆"><br>通过颜值和实用度来看我选择了<code>Utterances</code>因为我觉得他的样式好看一点。并且还不用像<code>Valine</code>填写用户信息和网址直接只用<code>GitHub</code>账户登陆就可以了✨。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>选型选好了之后我们就根据作者提供的文档,以及我们的配置文件也就是<a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">_config.fluid.yml</a>修改一下配置文件。</p><p><img src="https://static01.imgkr.com/temp/f6d86c26efeb49d2b90793427edfdd72.png" alt="配置文件👆"><br>配置文件配置完之后我们执行一下<code>hexo s</code>命令看看你的文章下面是不是就多出来一个类似与<code>github Issue</code>的评论。我天真的以为这就结束了。但是当我真正评论的时候，他就报错了。是长这个样子的。</p><p><img src="https://static01.imgkr.com/temp/e9755f51d6df41569bb895d83784e460.png"><br>翻译过来的大概意思就是你配置的仓库并没有绑定<code>Utterances</code> 如果你想使用这个Utterances就去绑定一下。接下来点击<code>install app</code>。会跳转到绑定安装页面。</p><p><img src="https://static01.imgkr.com/temp/758ab6cdb1eb46f6a3d7b07f71a3b045.png"><br>点击<code>install</code> 进行下一步操作，他会询问你名下所有的库都绑定<code>Utterances</code>还是只给某个固定的库绑定，我们选择自己的博客，然后点击<code>install</code>,之后会让你输入github密码，我们把正确的密码输入正确就可以啦。<br><img src="https://static01.imgkr.com/temp/4dc7cad5457541b0a02cb0e33b801290.png"><br>这时我们再次回到自己的博客再次评论发表评论就会发现已经大功告成啦🎁。</p><p><img src="https://static01.imgkr.com/temp/c33d704a3572435f8c198c11b232c352.png"></p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>实际上用户在真正评论了之后会在绑定的仓库下面提一个<code>Issue</code>。</p><p><img src="https://static01.imgkr.com/temp/dbd93eede76b41b79145911c2c7ef23c.png"><br>关闭还是回复就交给你自由发挥啦🎁。</p><p>细心的同学可能会发现，我只是评论了为什么发起Issue还默认把路径和文章名称作为评论的标题啊并且还是乱码？🎭这时有两种解决方案。</p><ul><li>文章的标题采用中文(有点鸡贼哈)</li><li>修改配置文件<br>怎么修改配置文件呢？我们去<a href="https://utteranc.es/"><code>utterances</code></a>的官网,这里是这么说的<code>Blog Post ↔️ Issue Mapping</code> 翻译过来就是文章和<code>Issue</code>的映射。我翻译了一下大概是这样。</li></ul><p><img src="https://static01.imgkr.com/temp/3a37787208884086a12d4d3e07955bfb.png"><br>我们选择第三个 文章标题和页面标题，不包含路径这是<code>utteranc</code>官网下方的代码会跟着变化。</p><p><img src="https://static01.imgkr.com/temp/cacb14902c074f42b6530233faf8fac6.png"></p><p>紧接着我们把<code>_config.fluid.yml</code>文件中的<code>issue-term</code>后面修改为<code>title</code> 再次评论一下,就会发现乱码没有了🎉。</p><p><img src="https://static01.imgkr.com/temp/065e8f02639749a0a42964f5eceabb6d.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>当初以为评论特别简单修改一个配置就可以，后来还是发现自己大意了没有闪😕。网上关于这种的也不是很多，我全是凭着谷歌翻译一点点摸索出来的。还好<code>fluid</code>作者和<code>utterances</code>作者的文档写的比较详细。小生这厢有礼了，下期见🏃‍♂️。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GitHub Pages</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>😍手把手教你怎么搭建一个博客😍</title>
    <link href="/2021/02/20/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E6%80%8E%E4%B9%88%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2021/02/20/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E6%80%8E%E4%B9%88%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="🍻-不见五陵豪杰墓，无花无酒锄做田"><a href="#🍻-不见五陵豪杰墓，无花无酒锄做田" class="headerlink" title="🍻 不见五陵豪杰墓，无花无酒锄做田"></a>🍻 不见五陵豪杰墓，无花无酒锄做田</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>选择<code>GitHub Pages</code>作为自己博客的原因就是他是<code>完全免费</code>的，不需要自己花钱买云服务进行搭建，支持的<code>主题也是非常多</code>的，当然咱们写博客最主要的一点就是创作，搭建成功之后，我们只需要考虑，怎么写好别人能看懂的并且快速、简洁、方便维护的博客就好啦(这就用到了hexo),搭建过程还是需要一点点时间哒😋。</p></blockquote><h2 id="1-万事开头难😖"><a href="#1-万事开头难😖" class="headerlink" title="1 万事开头难😖"></a>1 万事开头难😖</h2><h3 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h3><ul><li>注册一个github账户</li><li>创建一个<code>特殊的github仓库</code>，搭建简易版的<code>GitHub Pages博客</code>（后面会说有多特殊）</li><li>如何更新博客内容。</li><li>了解<a href="https://hexo.io/zh-cn/docs/">hexo</a>的基本语法和使用</li><li>结合hexo博客框架实现一个<code>快速、简洁且高效</code>的博客</li></ul><h3 id="注册一个github账户"><a href="#注册一个github账户" class="headerlink" title="注册一个github账户"></a>注册一个github账户</h3><p>进入<a href="https://github.com/">github</a>按照步骤填写基本信息，github会给你的邮箱发一个验证码进行验证，验证成功之后这时你就拥有了属于你自己的github账户😕(我github账户这里面都是之前写的垃圾，大佬嘴下留情)</p><p><img src="https://s3.ax1x.com/2021/02/19/yhPVbj.png" alt="注册☝"></p><p><img src="https://s3.ax1x.com/2021/02/19/yhCfu4.png" alt="注册成功☝"></p><h3 id="搭建简易版的GitHub-Pages博客"><a href="#搭建简易版的GitHub-Pages博客" class="headerlink" title="搭建简易版的GitHub Pages博客"></a>搭建简易版的GitHub Pages博客</h3><p>为什么说是一个特殊的github仓库呢😇，因为她对应的仓库名的格式是 <code>username.github.io</code>(username代表的是你的github注册时填写的名字)</p><p><img src="https://s3.ax1x.com/2021/02/19/yhES91.png" alt="新建仓库☝"><br>仓库创建成功之后点击<code>Settings</code>进入到设置界面一直往下拉会看到<code>GitHub Pages 标签块</code>，下面有你github Pages的访问地址，点击之后你就会发现你<code>裸奔的博客</code>诞生了🤗.毕竟我们的博客是给人看的 我们还是穿个衣服比较好，点击<code>choose a theme</code> 会有一堆主题任你选择，随便选一个你的博客就会穿上新衣服啦🤣</p><p><img src="https://s3.ax1x.com/2021/02/19/yhmai4.png" alt="进入设置☝"></p><p><img src="https://s3.ax1x.com/2021/02/19/yhmcdO.png" alt="找到GitHub Pages标签☝"></p><p><img src="https://s3.ax1x.com/2021/02/19/yhm4SA.png" alt="裸奔博客☝"></p><p><img src="https://s3.ax1x.com/2021/02/19/yhuU29.png" alt="选择主题☝"></p><p><img src="https://s3.ax1x.com/2021/02/19/yhusUO.png" alt="穿衣博客☝"></p><blockquote><p>起仓库名称的时候需要注意下面两个问题</p><ul><li>如果你起的仓库名称是<code>xxx.github.io</code>(xxx不是你的github用户名)那么你的访问地址就会变成username.github.io/xxx.github.io🎨。也不是不可以就是<code>不美观</code>👀<br><img src="https://static01.imgkr.com/temp/3bf4e535849347b48d34458e86f55cdd.png"></li><li>如果你起的仓库名称是随便起的例如就叫一个test,当你点击<code>Settings</code>的时候就会询问你是否要把当前项目升级成<code>GitHub Pages</code><br><img src="https://static01.imgkr.com/temp/a5f34c710a8042d88d009b8583a98a06.png"></li><li>所以我们还是老老实实按照人家的规定来起名字。与其他业务级的项目区分开，博客就是一个独立的静态网站，按照规则办事。🎈</li></ul></blockquote><h3 id="更新博客内容"><a href="#更新博客内容" class="headerlink" title="更新博客内容"></a>更新博客内容</h3><blockquote><p>注：前提条件你的电脑已经配置了git的相关配置(否则会无法使用git命令哦)具体怎么配置就🤞廖雪峰大佬的<a href="https://www.liaoxuefeng.com/wiki/896043488029600">git教程</a>就可以很完整</p></blockquote><ul><li><p>现在穿上衣服的博客内容我们要修改应该怎么办呢🤫(<code>就是把大象放进冰箱里面的道理是一样的</code>)，首先应该先把冰箱门打开(找到项目地址把<code>项目clone到本地</code>)🍕。<br><img src="https://s3.ax1x.com/2021/02/19/yh13h8.png" alt="找到项目地址☝"></p></li><li><p>第二步把大象放到冰箱里面(<code>修改项目中的部分代码</code>,例如这个我们就将welcome。。修改为欢迎来到我的博客)🍔。<br><img src="https://s3.ax1x.com/2021/02/19/yh3Kv4.png" alt="克隆项目☝"></p></li><li><p>第三步把冰箱门关上(将修改之后的文件再次<code>提交到github</code>)🍟,这时再次访问你的地址(username.github.io)你就会发现你修改的内容已经被更新了(项目更新之后github pages 可能会有延迟。喝杯茶水的时间就更新好了。)😁<br><img src="https://s3.ax1x.com/2021/02/19/yh3GUx.png" alt="提交项目☝"></p></li></ul><p>至此，你的简易博客就完成啦🧐，虽然说目前只是一个<code>简易版的小博客</code>，不过你想有一个<code>漂亮的简历</code>到此就可以为止啦，自己弄弄排版。这样的<code>在线简历</code>不是比pdf那种简历强多啦，开动你的脑瓜吧😎。</p><h2 id="2只要肯登攀😝"><a href="#2只要肯登攀😝" class="headerlink" title="2只要肯登攀😝"></a>2只要肯登攀😝</h2><h3 id="hexo的安装以及hexo的基本用法"><a href="#hexo的安装以及hexo的基本用法" class="headerlink" title="hexo的安装以及hexo的基本用法"></a>hexo的安装以及hexo的基本用法</h3><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><ul><li><a href="https://nodejs.org/en/"><code>Node.js</code></a> (<code>Node.js</code> 版本需不低于 <code>10.13</code>，建议使用<code> Node.js 12.0</code> 及以上版本)</li><li><a href="https://git-scm.com/"><code>Git</code></a></li></ul><h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装<a href="https://hexo.io/"><code>Hexo</code></a></h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">npm install hexo-cli -g <span class="hljs-comment">//全局安装hexo，如果安装特别慢可以使用cnpm局部安装：npm install hexo</span><br>hexo init blog   <span class="hljs-comment">//初始化博客</span><br>cd blog <span class="hljs-comment">// 进入到指定目录</span><br>npm install <span class="hljs-comment">// 安装依赖</span><br>hexo s <span class="hljs-comment">// 运行项目</span><br></code></pre></div></td></tr></table></figure><p>浏览器访问<code>localhost:4000</code>就可以看到初始化的博客啦(<code>hexo</code>是适配手机端的哦✨)</p><p><img src="https://s3.ax1x.com/2021/02/22/y7k7fe.png"></p><h4 id="Hexo重要配置"><a href="#Hexo重要配置" class="headerlink" title="Hexo重要配置"></a><code>Hexo</code><a href="https://hexo.io/zh-cn/docs/configuration">重要配置</a></h4><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">drinkwd的个人博客</span> <span class="hljs-comment"># 网站标题</span><br><span class="hljs-attr">subtitle:</span> <span class="hljs-string">&#x27;欢迎来到drinkwd的个人博客&#x27;</span> <span class="hljs-comment"># 网站副标题</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;我曾踏足山巅，也曾进入低谷，二者都让我受益良多&#x27;</span> <span class="hljs-comment"># 网站描述</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">drinkwd</span> <span class="hljs-comment"># 作者</span><br><span class="hljs-attr">url:</span> <span class="hljs-string">https://drinkwd.github.io/</span> <span class="hljs-comment"># 你网站的网址 不可以省略前面的http/https</span><br><span class="hljs-attr">theme:</span> <span class="hljs-string">landscape</span> <span class="hljs-comment"># 可以修改主题（不是直接修改名称，需要按照文档步骤进行操作）</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span> <span class="hljs-comment"># 部署类型可以是多个如果是github写git就可以</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">https://github.com/drinkwd/drinkwd.github.io.git</span>  <span class="hljs-comment"># 仓库地址</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span> <span class="hljs-comment"># 远程分支</span><br></code></pre></div></td></tr></table></figure><h4 id="主题修改"><a href="#主题修改" class="headerlink" title="主题修改"></a>主题修改</h4><p>这个主题修改活活我是弄了2个多小时🧭选择恐惧症，真的是不知道哪款主题比较适合自己，即想酷炫又想简约May the force be with you（别太放肆没什么用👑）最后选了<a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid</a>中文文档，各种配置文件说的特别细，感谢作者大佬🧎‍♂️按照网站的教程一步一步的操作就可以打造一个酷炫又满足使用的博客。客官我上图了🙆‍♂️。</p><p><img src="https://s3.ax1x.com/2021/02/22/y7kbSH.png"></p><h4 id="Hexo常用命令"><a href="#Hexo常用命令" class="headerlink" title="Hexo常用命令"></a><code>Hexo</code><a href="https://hexo.io/zh-cn/docs/commands.html">常用命令</a></h4><p><em>本地查看效果</em></p><figure class="highlight crystal"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo s<br></code></pre></div></td></tr></table></figure><p><em>新建文章</em></p><figure class="highlight gauss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gauss">$ hexo <span class="hljs-keyword">new</span> &lt;<span class="hljs-built_in">title</span>&gt;<br></code></pre></div></td></tr></table></figure><p><em>新建页面</em></p><figure class="highlight gauss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gauss">$ hexo <span class="hljs-keyword">new</span> page &lt;<span class="hljs-built_in">title</span>&gt;<br></code></pre></div></td></tr></table></figure><p><em>推送至github</em></p><figure class="highlight crystal"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo deploy<br></code></pre></div></td></tr></table></figure><blockquote><p>如果执行hexo d的时候发生了如下错误说明你没有安装<code>hexo-deployer-git</code>插件,在工作目录下把插件安装上就好了<br><img src="https://static01.imgkr.com/temp/e13aba141bf24458bedc22061aeded83.png"></p></blockquote><figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada">$ cnpm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></div></td></tr></table></figure><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><blockquote><p>如果你在执行<code>hexo d</code>的时候会让你输入账号和密码每次都会提示特别浪费时间，填写的是<code>github</code>的用户名和密码 我知道的两种解决方案🍦</p><ul><li>使用<code>vscode</code>的终端进行推送(好活🎨)，<code>vscode</code>会提示你绑定<code>github</code>账号，这样每次登陆的时候<code>vscode</code>的就帮助验证了🤪。</li><li>设置<code>ssh</code>也是在学习<code>git</code>的时候必要的，一步这时还是要再一次拿出<a href="https://www.liaoxuefeng.com/wiki/896043488029600/896954117292416">廖雪峰大佬的<code>git</code>教程</a>了🤪。</li></ul></blockquote><blockquote><p>执行<code>hexo d</code>之前最好先执行一下<code>hexo clean</code>(清楚缓存文件和静态文件，要不然有可能会更新的还是之前版本的文件)或者也可以这么使用 <code>hexo clean &amp;&amp; hexo d</code></p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>写博客的过程还是很开心的。虽然费点时间但是授人予鱼的过程也是自己更加深入学习的过程。一起加油🎉。<br><strong>年轻人</strong> 🎈<code>May the force be with you</code>🎈</p><h2 id="本文参考"><a href="#本文参考" class="headerlink" title="本文参考"></a>本文参考</h2><p><a href="https://hexo.io/zh-cn/">hexo</a></p><p><a href="https://www.jianshu.com/p/f82c76b90336">GitHub Pages一个最基础的个人网站</a></p><p><a href="https://hexo.fluid-dev.com/docs/start/#%E6%9B%B4%E6%96%B0%E4%B8%BB%E9%A2%98">fluid</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>GitHub Pages</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
